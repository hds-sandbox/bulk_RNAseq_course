[
  {
    "objectID": "develop/05a_data_analysis_setup.html",
    "href": "develop/05a_data_analysis_setup.html",
    "title": "UCloud setup",
    "section": "",
    "text": "Section Overview\n\n\n\n‚è∞ Time Estimation: 20 minutes\nüí¨ Learning Objectives:\n\nStart a transcriptomics app job in UCloud for the next lessons in data analysis\nGet started on UCloud to perform data analysis",
    "crumbs": [
      "Data analyses",
      "UCloud setup"
    ]
  },
  {
    "objectID": "develop/05a_data_analysis_setup.html#submit-the-job-in-ucloud",
    "href": "develop/05a_data_analysis_setup.html#submit-the-job-in-ucloud",
    "title": "UCloud setup",
    "section": "Submit the job in UCloud",
    "text": "Submit the job in UCloud\nAccess UCloud with your account and choose the project Sandbox RNASeq Workshop where you have been invited.\n\nClick on Apps on the left-side menu, and search for the application Transcriptomics Sandbox and select it:\n\nOnce you are in the Transcriptomics Sandbox, input appropriate parameters to run a job. Here, you will find a set of recommended values to choose.\n\n\n\n\n\n\nWarning\n\n\n\nAlways ensure that you are in the ‚Äúsandbox_bulkRNAseq‚Äù workspace. You can select the workspace by clicking on the down arrow (‚à®) icon to open a dropdown menu.\n\n\nLet‚Äôs take a look at the parameters we have chosen. We have given it a Job name, Hours, Machine type as well as a Mandatory Parameter Select a module. We have selected the module Introduction to bulk RNAseq analysis in R. This module will load the materials necessary to follow the next lessons. It will also contain a data file containing the preprocessing results so that you can go through analyses without processing raw reads with our pipeline, which takes several hours. You can test out running the pipeline by following our guide here and then mounting the data from your own drive (independently of our workshops).\nTo set up a job for using the bulk RNA-seq module in our Transcriptomics app, you need to do the following:\n\nCheck the App version (we recommend using the latest).\nNote that Documentation is available (though it redirects you to this website).\nIf you have previously run the app, you can import job parameters from that run. We‚Äôll get to that later.\nSet your job name (pick something original / with your initials!), your hours of use (you can top up later as the job runs, but give a good estimate), and your machine type (if you simply want to do the downstream analysis, you only need 1 core, but running the full pipeline will take 8-12 cores).\nAdd folders containing any material that your job needs to run. For first time use, without your own data, you don‚Äôt need a folder. However, we recommend making your own working directory in your member files (see my work_JAB example below) and eventually copying files to and editing files from there (e.g.¬†work_&lt;YourInitials&gt;).\nSelect the module you want to use. In this example, we select ‚ÄòIntroduction to bulk RNAseq analysis in R‚Äô.\nThen you can submit your job.\n\n\n\n\nJob setting using user preprocessing results\n\n\nNow, you are ready to run the app by clicking on the button on the right column of the screen (submit).\nNext, wait until the screen looks like the figure below. This process usually takes a few minutes. You can always come back to this screen via the Runs button in the left menu on UCloud. From there, you can add extra time or stop the app if you no longer need it.\n\nClick on open interface on the top right-hand side of the screen. You will start Rstudio through your browser!\nOn the lower right side of Rstudio, in the file explorer, you should see a folder called Intro_to_bulkRNAseq. Here you will find the materials of the course. If you have added your own preprocessing results, they will also listed here.\n\nYou are ready to start analysing your data!\n\n\n\n\n\n\nWarning\n\n\n\nDoes your session not seem to be starting properly? If your ‚ÄòMessages‚Äô window indicates the job has started, but your open interface button is not clickable, hit refresh. If it IS clickable, but the new tab that opens is just spinning without showing an interface, wait a few seconds and then hit refresh. It‚Äôs probably there, but UCloud just takes a moment sometimes to gather its thoughts.",
    "crumbs": [
      "Data analyses",
      "UCloud setup"
    ]
  },
  {
    "objectID": "develop/05a_data_analysis_setup.html#stopping-the-app",
    "href": "develop/05a_data_analysis_setup.html#stopping-the-app",
    "title": "UCloud setup",
    "section": "Stopping the app",
    "text": "Stopping the app\nWhen you are finished, go to Runs &gt; Running jobs in uCloud and click on the Job name you want to stop if you have several running. It is important to stop the job to prevent it from using unnecessary resources. Here, you can also click on the job and add extra time!",
    "crumbs": [
      "Data analyses",
      "UCloud setup"
    ]
  },
  {
    "objectID": "develop/05a_data_analysis_setup.html#saved-work",
    "href": "develop/05a_data_analysis_setup.html#saved-work",
    "title": "UCloud setup",
    "section": "Saved work",
    "text": "Saved work\nAfter running a first work session, everything that you have created, including the scripts and results of your analysis, will be saved in your own personal ‚ÄúJobs‚Äù folder. Inside this folder there will be a subfolder called Transcriptomics Sandbox, which will contain all the jobs you have run with the Transcriptomics Sandbox app. Inside this folder, you will find your folder named after the job name you gave in the previous step.\n\nYour material will be saved in a volume with your username, that you should be able to see under the menu Files.\n\n\n\nGo to Jobs ‚Üí Transcriptomics Sandbox ‚Üí &lt;Job name&gt; ‚Üí Intro_to_bulkRNAseq",
    "crumbs": [
      "Data analyses",
      "UCloud setup"
    ]
  },
  {
    "objectID": "develop/05a_data_analysis_setup.html#restarting-the-rstudio-session",
    "href": "develop/05a_data_analysis_setup.html#restarting-the-rstudio-session",
    "title": "UCloud setup",
    "section": "Restarting the Rstudio session",
    "text": "Restarting the Rstudio session\n\nStarting from in-progress work\nIf you want to keep working on your previous results, it makes sense to copy the Intro_to_bulkRNAseq folder to your own working directory, and reload this folder for new jobs. If this exact folder with this exact name is available in the root directory of your job workspace, the app will not download fresh directories, and you will instead have your own edited/editable files.\nTo copy the directory, complete the following steps:\n\nGo to Jobs ‚Üí Transcriptomics Sandbox ‚Üí &lt;Job name&gt; ‚Üí Intro_to_bulkRNAseq\nClick ONCE to select Intro_to_bulkRNAseq\nClick ‚ÄòCopy to‚Ä¶‚Äô\nClick on your root member files directory\nSelect ‚ÄòCopy to‚Äô the custom working directory you made (you can Create folder now if you haven‚Äôt previously)\n\n\n\n\n\n\n\n\nTa-da\n\n\n\nNow you will always have your own, writeable copy of this directory‚Ä¶ AS LONG AS YOU LOAD IT IN YOUR NEXT JOB!\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nRemember to save your notebooks while working in an interactive session. Otherwise you might lose edits to your .Rmd files.\n\n\n\n\nReusing old job parameters\nThe very easy way (perhaps after your job has accidentally run out of time / disconnected due to a UCloud blip) is to simply hit ‚ÄòRun application again‚Äô.\n\nOther moderately easy methods include: A) accessing the Runs menu, where you can see completed, pending, and active jobs and select one to restart via Run application again. B) accessing the Transcriptomics Sandbox App job setup window, selecting Import parameters, and then importing from your last job. You can also select a JobParameters.json file if one has been shared with you to replicate parameters for a specific task.",
    "crumbs": [
      "Data analyses",
      "UCloud setup"
    ]
  },
  {
    "objectID": "develop/07c_DEA_visualization.html",
    "href": "develop/07c_DEA_visualization.html",
    "title": "Log Fold Shrinkage and DEA visualizations",
    "section": "",
    "text": "Approximate time: 45 minutes",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Log Fold Shrinkage and DEA visualizations"
    ]
  },
  {
    "objectID": "develop/07c_DEA_visualization.html#learning-objectives",
    "href": "develop/07c_DEA_visualization.html#learning-objectives",
    "title": "Log Fold Shrinkage and DEA visualizations",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nExplain log fold change shrinkage\nSetup results data for application of visualization techniques\nDescribe different data visualization useful for exploring results from a DGE analysis\nCreate a volcano plot and MA plot to evaluate relationship among DGE statistics\nCreate a heatmap to illustrate expression changes of differentially expressed genes",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Log Fold Shrinkage and DEA visualizations"
    ]
  },
  {
    "objectID": "develop/07c_DEA_visualization.html#more-accurate-lfc-estimates",
    "href": "develop/07c_DEA_visualization.html#more-accurate-lfc-estimates",
    "title": "Log Fold Shrinkage and DEA visualizations",
    "section": "More accurate LFC estimates",
    "text": "More accurate LFC estimates\nIn the previous lessons, we learned about how to generate a table with Differentially Expressed Genes\n\n## DO NOT RUN\nres_tableCont &lt;- results(dds, contrast=contrast_cont, alpha = 0.05)\n\nhead(res_tableCont)\n\nThe problem with these fold change estimates is that they are not entirely accurate as they do not account for the large dispersion we observe with low read counts. To address this, the log2 fold changes need to be adjusted.\nTo generate the shrunken log2 fold change estimates, you have to run an additional step on your results object (that we will create below) with the function lfcShrink().\n\n## Save the unshrunken results to compare\nres_tableCont_unshrunken &lt;- res_tableCont\n\n# Apply fold change shrinkage\nres_tableCont &lt;- lfcShrink(dds, coef=\"condition_control_vs_vampirium\", type=\"apeglm\")\n\n\nFor more information on shrinkage, the DESeq2 vignette has an Extended section on shrinkage estimators that is quite useful.\n\n\ncontrast vs coef\nWhen using the shrinkage method, rather than using the contrast argument you will be required to specify coef. Using contrast forms an expanded model matrix, treating all factor levels equally, and averages over all distances between all pairs of factor levels to estimate the prior. Using coef, means looking only at that column of the model matrix (so usually that would be one level against the reference level) and estimates the prior for that coefficient from the distribution of those MLE of coefficients. When using coef, the shrinkage depends on which level is chosen as reference.\n\n\nHow do I know what to value to provide to the coef argument?\nThe value you provide here needs to match identically to what is stored in the column header of the coefficients table. To see what values you have to work with you can use resultsNames(dds).",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Log Fold Shrinkage and DEA visualizations"
    ]
  },
  {
    "objectID": "develop/07c_DEA_visualization.html#visualizing-the-results",
    "href": "develop/07c_DEA_visualization.html#visualizing-the-results",
    "title": "Log Fold Shrinkage and DEA visualizations",
    "section": "Visualizing the results",
    "text": "Visualizing the results\n\nMA plot\nA plot that can be useful to exploring our results is the MA plot. The MA plot shows the mean of the normalized counts versus the log2 fold changes for all genes tested. The genes that are significantly DE are colored to be easily identified (adjusted p-value &lt; 0.01 by default).\nLet‚Äôs start with the unshrunken results:\n\n# MA plot using unshrunken fold changes\nplotMA(res_tableCont_unshrunken, ylim=c(-2,2))\n\n\n\n\n\n\n\n\nAnd now the shrunken results:\n\n# MA plot using shrunken fold changes\nplotMA(res_tableCont, ylim=c(-2,2))\n\n\n\n\n\n\n\n\n\nExercise 1\nWhy are there genes with high mean and big log2 fold changes, but are not statistically significant?",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Log Fold Shrinkage and DEA visualizations"
    ]
  },
  {
    "objectID": "develop/07c_DEA_visualization.html#advanced-visualizations",
    "href": "develop/07c_DEA_visualization.html#advanced-visualizations",
    "title": "Log Fold Shrinkage and DEA visualizations",
    "section": "Advanced visualizations",
    "text": "Advanced visualizations\nWe will be working with three different data objects we have already created in earlier lessons:\n\nMetadata for our samples (a dataframe): meta\nNormalized expression data for every gene in each of our samples (a matrix): normalized_counts\nTibble versions of the DESeq2 results we generated in the last lesson: res_tableCont_tb and res_tableGar_tb\n\nFirst, we already have a metadata tibble.\n\nmeta %&gt;% head()\n\n\n  \n\n\n\nNext, let‚Äôs bring in the normalized_counts object with our gene names.\n\n# DESeq2 creates a matrix when you use the counts() function\n## First convert normalized_counts to a data frame and transfer the row names to a new column called \"gene\"\nnormalized_counts &lt;- counts(dds, normalized=T) %&gt;% \n  data.frame() %&gt;%\n  rownames_to_column(var=\"gene\") \n\n\nPlotting significant DE genes\nOne way to visualize results would be to simply plot the expression data for a handful of genes. We could do that by picking out specific genes of interest or selecting a range of genes.\nUsing DESeq2 plotCounts() to plot expression of a single gene\nTo pick out a specific gene of interest to plot, for example TSPAN7 (ID ENSG00000156298), we can use the plotCounts() from DESeq2. plotCounts() requires that the gene specified matches the original input to DESeq2.\n\n# Plot expression for single gene\nplotCounts(dds, gene=\"ENSG00000156298\", intgroup=\"condition\") \n\n\n\n\n\n\n\n\nUsing ggplot2 to plot expression of a single gene\nIf you wish to change the appearance of this plot, we can save the output of plotCounts() to a variable specifying the returnData=TRUE argument, then use ggplot():\n\n# Save plotcounts to a data frame object\nd &lt;- plotCounts(dds, gene=\"ENSG00000156298\", intgroup=\"condition\", returnData=TRUE)\n\n# What is the data output of plotCounts()?\nd %&gt;% head()\n\n\n  \n\n\n\n\n# Plot the Vampirium normalized counts, using the samples (rownames(d) as labels)\nlibrary(ggrepel)\n\nggplot(d, aes(x = condition, y = count, color = condition)) + \ngeom_point(position=position_jitter(w = 0.1,h = 0)) +\ngeom_text_repel(aes(label = rownames(d))) + \ntheme_bw() +\nggtitle(\"TSPAN7\") +\ntheme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\nCreate a translator from gene names to gene IDs\nWhile gene IDs are unique and traceable, it is hard for us humans to memorize a bunch of numbers. Let‚Äôs try to make a translator function that will give you possible gene IDs for a gene name. Then you can use this table to select one of the possible gene_IDs.\nThe function will take as input a vector of gene names of interest, the tx2gene dataframe and the dds object that you analyzed\n\nlookup &lt;- function(gene_name, tx2gene, dds){\n  hits &lt;- tx2gene %&gt;% dplyr::select(gene_symbol, gene_ID) %&gt;% distinct() %&gt;% \n    dplyr::filter(gene_symbol %in% gene_name & gene_ID %in% rownames(dds))\n  return(hits)\n}\n\nlookup(gene_name = \"TSPAN7\", tx2gene = tx2gene, dds = dds)\n\n\n  \n\n\n\nOn the other hand, we can add the information from our tx2gene table, since it has the gene name!\n\ntx2gene\n\n\n  \n\n\n\nHowever, we see that the table has many duplicates per gene, due to the fact that a gene may have several transcripts IDs associated to it. Since our results table has gene IDs, it is important to remove transcript information and remove duplicated rows before merging the information.\nWe remove the transcript ID column and duplicated rows from the tx2gene table using tidyverse syntax. We merge the tables using the merge function, which has many options for merging. Since our tables have different column names for the gene ID variable, we provide them with the by.x and by.y arguments. We also want to keep all of our results, so we use the argument all.x as well.\n\nres_tableCont_tb &lt;- merge(res_tableCont_tb, tx2gene %&gt;% select(-transcript_ID) %&gt;% distinct(),\n                        by.x = \"gene\", by.y = \"gene_ID\", all.x = T)\n\nres_tableCont_tb\n\n\n  \n\n\n\n\n\nHeatmap\nIn addition to plotting subsets, we could also extract the normalized values of all the significant genes and plot a heatmap of their expression using pheatmap().\n\n### Extract normalized expression for significant genes from the OE and control samples\n### also get gene name\nnorm_Contsig &lt;- normalized_counts %&gt;% dplyr::select(gene, starts_with(\"Vampirium\"), starts_with(\"Control\"))  %&gt;%\n  dplyr::filter(gene %in% sigCont$gene)  \n\nNow let‚Äôs draw the heatmap using pheatmap:\n\n### Run pheatmap using the metadata data frame for the annotation\npheatmap(norm_Contsig %&gt;% column_to_rownames(\"gene\"), \n         cluster_rows = T, \n         show_rownames = F,\n         annotation = meta %&gt;% column_to_rownames(var = \"sample\") %&gt;% dplyr::select(\"condition\"), \n         border_color = NA, \n         fontsize = 10, \n         scale = \"row\", \n         fontsize_row = 10, \n         height = 20)\n\n\n\n\n\n\n\n\n\nNOTE: There are several additional arguments we have included in the function for aesthetics. One important one is scale=\"row\", in which Z-scores are plotted, rather than the actual normalized count value.\nZ-scores are computed on a gene-by-gene basis by subtracting the mean and then dividing by the standard deviation. The Z-scores are computed after the clustering, so that it only affects the graphical aesthetics and the color visualization is improved.\n\n\n\nVolcano plot\nTo generate a volcano plot, we first need to have a column in our results data indicating whether or not the gene is considered differentially expressed based on p-adjusted values and we will include a log2fold change here.\n\n## Obtain logical vector where TRUE values denote padj values &lt; 0.05 and fold change &gt; 1.5 in either direction\n\nres_tableCont_tb &lt;- res_tableCont_tb %&gt;% \nmutate(threshold_OE = padj &lt; 0.05 & abs(log2FoldChange) &gt;= 0.58)\n\nNow we can start plotting. The geom_point object is most applicable, as this is essentially a scatter plot:\n\n## Volcano plot\nggplot(res_tableCont_tb) + \n  geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_OE)) +\n  ggtitle(\"Control vs Vampirium\") +\n  xlab(\"log2 fold change\") + \n  ylab(\"-log10 adjusted p-value\") +\n  #scale_y_continuous(limits = c(0,50)) +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = rel(1.5), hjust = 0.5),\n        axis.title = element_text(size = rel(1.25)))  \n\n\n\n\n\n\n\n\nChecking the top DE genes\nThis is a great way to get an overall picture of what is going on, but what if we also wanted to know where the top 10 genes (lowest padj) in our DE list are located on this plot? We could label those dots with the gene name on the Volcano plot using geom_text_repel().\nFirst, we need to order the res_tableCont tibble by padj, and add an additional column to it, to include on those gene names we want to use to label the plot.\n\n## Create an empty column to indicate which genes to label\nres_tableCont_tb &lt;- res_tableCont_tb %&gt;% mutate(genelabels = \"\")\n\n## Sort by padj values \nres_tableCont_tb &lt;- res_tableCont_tb %&gt;% arrange(padj)\n\n## Populate the gene labels column with contents of the gene symbols column for the first 10 rows, i.e. the top 10 most significantly expressed genes\nres_tableCont_tb$genelabels[1:10] &lt;- as.character(res_tableCont_tb$gene_symbol[1:10])\n\nhead(res_tableCont_tb)\n\n\n  \n\n\n\nNext, we plot it as before with an additional layer for geom_text_repel() wherein we can specify the column of gene labels we just created.\n\nggplot(res_tableCont_tb, aes(x = log2FoldChange, y = -log10(padj))) +\n  geom_point(aes(colour = threshold_OE)) +\n  geom_text_repel(aes(label = genelabels)) +\n  ggtitle(\"Control vs Vampirium\") +\n  xlab(\"log2 fold change\") + \n  ylab(\"-log10 adjusted p-value\") +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = rel(1.5), hjust = 0.5),\n        axis.title = element_text(size = rel(1.25)))",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Log Fold Shrinkage and DEA visualizations"
    ]
  },
  {
    "objectID": "develop/07c_DEA_visualization.html#extra-reports-for-dea",
    "href": "develop/07c_DEA_visualization.html#extra-reports-for-dea",
    "title": "Log Fold Shrinkage and DEA visualizations",
    "section": "Extra: Reports for DEA",
    "text": "Extra: Reports for DEA\nNOTE: If using the DESeq2 tool for differential expression analysis, the package ‚ÄòDEGreport‚Äô can use the DESeq2 results output to make the top20 genes and the volcano plots generated above by writing a few lines of simple code. While you can customize the plots above, you may be interested in using the easier code. Below are examples of the code to create these plots:\nNote that, since the argument these reports is the dds object, which contains gene IDs instead of gene names, we will have to provide gene IDs to fetch information!\n\nDEGreport::degPlot(dds = dds, res = res_tableCont_unshrunken, n = 20, xs = \"condition\", group = \"condition\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))# dds object is output from DESeq2\n\n\n\n\n\n\n\n\n\nDEGreport::degPlotWide(counts = dds, genes = row.names(res_tableCont)[1:5], group = \"condition\")\n\n\n\n\n\n\n\n\n\nDEGreport::degVolcano(\n    data.frame(res_tableCont[,c(\"log2FoldChange\",\"padj\")]), # table - 2 columns\n    plot_text = data.frame(res_tableCont_tb[1:10,c(\"log2FoldChange\",\"padj\",\"gene_symbol\")])) # table to add names",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Log Fold Shrinkage and DEA visualizations"
    ]
  },
  {
    "objectID": "develop/02_experimental_planning.html",
    "href": "develop/02_experimental_planning.html",
    "title": "Experimental design considerations",
    "section": "",
    "text": "Section Overview\n\n\n\n‚è∞ Time Estimation: 30 minutes\nüí¨ Learning Objectives:\n\nDescribe the importance of replicates for RNA-seq differential expression experiments.\nExplain the relationship between the number of biological replicates, sequencing depth and the differentially expressed genes identified.\nDemonstrate how to design an RNA-seq experiment that avoids confounding and batch effects.\n\n\n\nUnderstanding the steps in the experimental process of RNA extraction and preparation of RNA-Seq libraries is helpful for designing an RNA-Seq experiment, but there are special considerations that should be highlighted that can greatly affect the quality of a differential expression analysis.\nThese important considerations include:\n\nProper experiment controls\nNumber and type of replicates\nIssues related to confounding\nAddressing batch effects\n\nWe will go over each of these considerations in detail, discussing best practice and optimal design.\n\n\nExperimental controls must be used in order to minimize the effect of variables which are not the interest of the study. Thus, it allows the experiment to minimize the changes in all other variables except the one being tested, and help us ensure that there have been no deviations in the environment of the experiment that could end up influencing the outcome of the experiment, besides the variable they are investigating.\nThere are different types of controls, but we will mainly see positive and negative controls:\n\nNegative: The negative control is a variable or group of samples where no response is expected.\nPositive: A positive control is a variable or group of samples that receives a treatment with a known positive result.\n\nIt is very important that you give serious thought about proper controls of your experiment so you can control as many sources of variation as possible. This will greatly strengthen the results of your experiment.\n\n\n\nExperimental replicates can be performed as technical replicates or biological replicates.\n\n\n\n\n\n\nFigure¬†1: Types of experimental replicates. Image credit: Klaus B., EMBO J (2015) 34: 2727-2730\n\n\n\n\nTechnical replicates: use the same biological sample to repeat the technical or experimental steps in order to accurately measure technical variation and remove it during analysis.\nBiological replicates use different biological samples of the same condition to measure the biological variation between samples.\n\nIn the days of microarrays, technical replicates were considered a necessity; however, with the current RNA-Seq technologies, technical variation is much lower than biological variation and technical replicates are unnecessary.\nIn contrast, biological replicates are absolutely essential for differential expression analysis. For mice or rats, it might be easy to determine what constitutes a different biological sample, but it‚Äôs a bit more difficult to determine for cell lines. This article gives some great recommendations for cell line replicates.\nFor differential expression analysis, the more biological replicates, the better the estimates of biological variation and the more precise our estimates of the mean expression levels. This leads to more accurate modeling of our data and identification of more differentially expressed genes.\n\n\n\n\n\n\nFigure¬†2: Image credit: Liu, Y., et al., Bioinformatics (2014) 30(3): 301‚Äì304\n\n\n\nAs the figure above illustrates, biological replicates are of greater importance than sequencing depth, which is the total number of reads sequenced per sample. The figure shows the relationship between sequencing depth and number of replicates on the number of differentially expressed genes identified [1]. Note that an increase in the number of replicates tends to return more DE genes than increasing the sequencing depth. Therefore, generally more replicates are better than higher sequencing depth, with the caveat that higher depth is required for detection of lowly expressed DE genes and for performing isoform-level differential expression.\n\n\n\n\n\n\nTip\n\n\n\nSample pooling: Try to avoid pooling of individuals/experiments, if possible; however, if absolutely necessary, then each pooled set of samples would count as a single replicate. To ensure similar amounts of variation between replicates, you would want to pool the same number of individuals for each pooled set of samples.\nFor example, if you need at least 3 individuals to get enough material for your control replicate and at least 5 individuals to get enough material for your treatment replicate, you would pool 5 individuals for the control and 5 individuals for the treatment conditions. You would also make sure that the individuals that are pooled in both conditions are similar in sex, age, etc.\n\n\nReplicates are almost always preferred to greater sequencing depth for bulk RNA-Seq. However, guidelines depend on the experiment performed and the desired analysis. Below we list some general guidelines for replicates and sequencing depth to help with experimental planning:\n\nGeneral gene-level differential expression:\n\nENCODE guidelines suggest 30 million SE reads per sample (stranded).\n15 million reads per sample is often sufficient, if there are a good number of replicates (&gt;3).\nSpend money on more biological replicates, if possible.\nGenerally recommended to have read length &gt;= 50 bp\n\nGene-level differential expression with detection of lowly-expressed genes:\n\nSimilarly benefits from replicates more than sequencing depth.\nSequence deeper with at least 30-60 million reads depending on level of expression (start with 30 million with a good number of replicates).\nGenerally recommended to have read length &gt;= 50 bp\n\nIsoform-level differential expression:\n\nOf known isoforms, suggested to have a depth of at least 30 million reads per sample and paired-end reads.\nOf novel isoforms should have more depth (&gt; 60 million reads per sample).\nChoose biological replicates over paired/deeper sequencing.\nGenerally recommended to have read length &gt;= 50 bp, but longer is better as the reads will be more likely to cross exon junctions\nPerform careful QC of RNA quality. Be careful to use high quality preparation methods and restrict analysis to high quality RIN # samples.\n\nOther types of RNA analyses (intron retention, small RNA-Seq, etc.):\n\nDifferent recommendations depending on the analysis.\nAlmost always more biological replicates are better!\n\n\n\n\n\n\n\n\nWhat is coverage?\n\n\n\nThe metric used to estimate the depth of sequencing for genomes is ‚Äúcoverage‚Äù - the number of times the sequenced nucleotides ‚Äúcover‚Äù the genome. While this metric is commonly used and sufficiently accurate for whole genome sequencing, it does not apply to transcriptomes. This is because, although the percentage of the genome exhibiting transcriptional activity may be known, gene expression levels vary significantly.\n\n\n\n\n\nA confounded RNA-Seq experiment is one where you cannot distinguish the separate effects of two different sources of variation in the data.\nFor example, we know that sex has large effects on gene expression, and if all of our control mice were female and all of the treatment mice were male, then our treatment effect would be confounded by sex. We could not differentiate the effect of treatment from the effect of sex.\n\nTo AVOID confounding:\n\nEnsure animals in each condition are all the same sex, age, litter, and batch, if possible.\nIf not possible, then ensure to split the animals equally between conditions\n\n\n\n\n\nA batch effect appears when variance is introduced into your data as a consequence of technical issues such as sample collection, storage, experimental protocol, etc. Batch effects are problematic for RNA-Seq analyses, since you may see significant differences in expression due solely to the batch effect.\nTo explore the issues generated by poor batch study design, they are highlighted nicely in this paper.\n\n\n\nWere all RNA isolations performed on the same day?\nWere all library preparations performed on the same day?\nDid the same person perform the RNA isolation/library preparation for all samples?\nDid you use the same reagents for all samples?\nDid you perform the RNA isolation/library preparation in the same location?\n\nIf any of the answers is ‚ÄòNo‚Äô, then you have batches.\n\n\n\n\nDesign the experiment in a way to avoid batches, if possible.\nIf unable to avoid batches:\n\nDo NOT confound your experiment by batch (top section in Figure¬†3)\n\nDO split replicates of the different sample groups across batches. The more replicates the better, definitely more than 2 (bottom section in Figure¬†3).\n\n\n\n\n\n\n\nFigure¬†3: The problem of confounding biological variation and batch effects. Image credit: Hicks SC, et al., Biostatistics (2018)\n\n\n\n\nDO make a balanced batch design. For example if you can only prepare a subset of samples in the lab on a given day, do not do 90% of samples on day 1 and the remaining 10% on day 2, aim for balance, 50% each day.\nDO include batch information in your experimental metadata. During the analysis, we can regress out the variation due to batch if not confounded so it doesn‚Äôt affect our results if we have that information.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning on sample preparations\n\n\n\nThe sample preparation of cell line ‚Äúbiological‚Äù replicates ‚Äúshould be performed as independently as possible‚Äù (as batches), ‚Äúmeaning that cell culture media should be prepared freshly for each experiment, different frozen cell stocks and growth factor batches, etc. should be used (read more about it here).‚Äù However, preparation across all conditions should be performed at the same time.\n\n\n\nThis lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).",
    "crumbs": [
      "Experiment design",
      "Experimental design considerations"
    ]
  },
  {
    "objectID": "develop/02_experimental_planning.html#controls",
    "href": "develop/02_experimental_planning.html#controls",
    "title": "Experimental design considerations",
    "section": "",
    "text": "Experimental controls must be used in order to minimize the effect of variables which are not the interest of the study. Thus, it allows the experiment to minimize the changes in all other variables except the one being tested, and help us ensure that there have been no deviations in the environment of the experiment that could end up influencing the outcome of the experiment, besides the variable they are investigating.\nThere are different types of controls, but we will mainly see positive and negative controls:\n\nNegative: The negative control is a variable or group of samples where no response is expected.\nPositive: A positive control is a variable or group of samples that receives a treatment with a known positive result.\n\nIt is very important that you give serious thought about proper controls of your experiment so you can control as many sources of variation as possible. This will greatly strengthen the results of your experiment.",
    "crumbs": [
      "Experiment design",
      "Experimental design considerations"
    ]
  },
  {
    "objectID": "develop/02_experimental_planning.html#replicates",
    "href": "develop/02_experimental_planning.html#replicates",
    "title": "Experimental design considerations",
    "section": "",
    "text": "Experimental replicates can be performed as technical replicates or biological replicates.\n\n\n\n\n\n\nFigure¬†1: Types of experimental replicates. Image credit: Klaus B., EMBO J (2015) 34: 2727-2730\n\n\n\n\nTechnical replicates: use the same biological sample to repeat the technical or experimental steps in order to accurately measure technical variation and remove it during analysis.\nBiological replicates use different biological samples of the same condition to measure the biological variation between samples.\n\nIn the days of microarrays, technical replicates were considered a necessity; however, with the current RNA-Seq technologies, technical variation is much lower than biological variation and technical replicates are unnecessary.\nIn contrast, biological replicates are absolutely essential for differential expression analysis. For mice or rats, it might be easy to determine what constitutes a different biological sample, but it‚Äôs a bit more difficult to determine for cell lines. This article gives some great recommendations for cell line replicates.\nFor differential expression analysis, the more biological replicates, the better the estimates of biological variation and the more precise our estimates of the mean expression levels. This leads to more accurate modeling of our data and identification of more differentially expressed genes.\n\n\n\n\n\n\nFigure¬†2: Image credit: Liu, Y., et al., Bioinformatics (2014) 30(3): 301‚Äì304\n\n\n\nAs the figure above illustrates, biological replicates are of greater importance than sequencing depth, which is the total number of reads sequenced per sample. The figure shows the relationship between sequencing depth and number of replicates on the number of differentially expressed genes identified [1]. Note that an increase in the number of replicates tends to return more DE genes than increasing the sequencing depth. Therefore, generally more replicates are better than higher sequencing depth, with the caveat that higher depth is required for detection of lowly expressed DE genes and for performing isoform-level differential expression.\n\n\n\n\n\n\nTip\n\n\n\nSample pooling: Try to avoid pooling of individuals/experiments, if possible; however, if absolutely necessary, then each pooled set of samples would count as a single replicate. To ensure similar amounts of variation between replicates, you would want to pool the same number of individuals for each pooled set of samples.\nFor example, if you need at least 3 individuals to get enough material for your control replicate and at least 5 individuals to get enough material for your treatment replicate, you would pool 5 individuals for the control and 5 individuals for the treatment conditions. You would also make sure that the individuals that are pooled in both conditions are similar in sex, age, etc.\n\n\nReplicates are almost always preferred to greater sequencing depth for bulk RNA-Seq. However, guidelines depend on the experiment performed and the desired analysis. Below we list some general guidelines for replicates and sequencing depth to help with experimental planning:\n\nGeneral gene-level differential expression:\n\nENCODE guidelines suggest 30 million SE reads per sample (stranded).\n15 million reads per sample is often sufficient, if there are a good number of replicates (&gt;3).\nSpend money on more biological replicates, if possible.\nGenerally recommended to have read length &gt;= 50 bp\n\nGene-level differential expression with detection of lowly-expressed genes:\n\nSimilarly benefits from replicates more than sequencing depth.\nSequence deeper with at least 30-60 million reads depending on level of expression (start with 30 million with a good number of replicates).\nGenerally recommended to have read length &gt;= 50 bp\n\nIsoform-level differential expression:\n\nOf known isoforms, suggested to have a depth of at least 30 million reads per sample and paired-end reads.\nOf novel isoforms should have more depth (&gt; 60 million reads per sample).\nChoose biological replicates over paired/deeper sequencing.\nGenerally recommended to have read length &gt;= 50 bp, but longer is better as the reads will be more likely to cross exon junctions\nPerform careful QC of RNA quality. Be careful to use high quality preparation methods and restrict analysis to high quality RIN # samples.\n\nOther types of RNA analyses (intron retention, small RNA-Seq, etc.):\n\nDifferent recommendations depending on the analysis.\nAlmost always more biological replicates are better!\n\n\n\n\n\n\n\n\nWhat is coverage?\n\n\n\nThe metric used to estimate the depth of sequencing for genomes is ‚Äúcoverage‚Äù - the number of times the sequenced nucleotides ‚Äúcover‚Äù the genome. While this metric is commonly used and sufficiently accurate for whole genome sequencing, it does not apply to transcriptomes. This is because, although the percentage of the genome exhibiting transcriptional activity may be known, gene expression levels vary significantly.",
    "crumbs": [
      "Experiment design",
      "Experimental design considerations"
    ]
  },
  {
    "objectID": "develop/02_experimental_planning.html#confounding-variables",
    "href": "develop/02_experimental_planning.html#confounding-variables",
    "title": "Experimental design considerations",
    "section": "",
    "text": "A confounded RNA-Seq experiment is one where you cannot distinguish the separate effects of two different sources of variation in the data.\nFor example, we know that sex has large effects on gene expression, and if all of our control mice were female and all of the treatment mice were male, then our treatment effect would be confounded by sex. We could not differentiate the effect of treatment from the effect of sex.\n\nTo AVOID confounding:\n\nEnsure animals in each condition are all the same sex, age, litter, and batch, if possible.\nIf not possible, then ensure to split the animals equally between conditions",
    "crumbs": [
      "Experiment design",
      "Experimental design considerations"
    ]
  },
  {
    "objectID": "develop/02_experimental_planning.html#batch-effects",
    "href": "develop/02_experimental_planning.html#batch-effects",
    "title": "Experimental design considerations",
    "section": "",
    "text": "A batch effect appears when variance is introduced into your data as a consequence of technical issues such as sample collection, storage, experimental protocol, etc. Batch effects are problematic for RNA-Seq analyses, since you may see significant differences in expression due solely to the batch effect.\nTo explore the issues generated by poor batch study design, they are highlighted nicely in this paper.\n\n\n\nWere all RNA isolations performed on the same day?\nWere all library preparations performed on the same day?\nDid the same person perform the RNA isolation/library preparation for all samples?\nDid you use the same reagents for all samples?\nDid you perform the RNA isolation/library preparation in the same location?\n\nIf any of the answers is ‚ÄòNo‚Äô, then you have batches.\n\n\n\n\nDesign the experiment in a way to avoid batches, if possible.\nIf unable to avoid batches:\n\nDo NOT confound your experiment by batch (top section in Figure¬†3)\n\nDO split replicates of the different sample groups across batches. The more replicates the better, definitely more than 2 (bottom section in Figure¬†3).\n\n\n\n\n\n\n\nFigure¬†3: The problem of confounding biological variation and batch effects. Image credit: Hicks SC, et al., Biostatistics (2018)\n\n\n\n\nDO make a balanced batch design. For example if you can only prepare a subset of samples in the lab on a given day, do not do 90% of samples on day 1 and the remaining 10% on day 2, aim for balance, 50% each day.\nDO include batch information in your experimental metadata. During the analysis, we can regress out the variation due to batch if not confounded so it doesn‚Äôt affect our results if we have that information.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning on sample preparations\n\n\n\nThe sample preparation of cell line ‚Äúbiological‚Äù replicates ‚Äúshould be performed as independently as possible‚Äù (as batches), ‚Äúmeaning that cell culture media should be prepared freshly for each experiment, different frozen cell stocks and growth factor batches, etc. should be used (read more about it here).‚Äù However, preparation across all conditions should be performed at the same time.\n\n\n\nThis lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).",
    "crumbs": [
      "Experiment design",
      "Experimental design considerations"
    ]
  },
  {
    "objectID": "develop/index.html",
    "href": "develop/index.html",
    "title": "Welcome to the bulk RNA-seq analysis workshop",
    "section": "",
    "text": "Welcome to the bulk RNA-seq analysis workshop\n\n\nThis workshop material includes a tutorial on how to approach RNAseq data, starting from your sequencing reads (fastq files). Thus, the workshop only briefly touches upon laboratory protocols, library preparation, and experimental design of RNA sequencing experiments, mainly for the purpose of outlining considerations in the downstream bioinformatic analysis. This workshop is based on the materials developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC), a collection of modified tutorials from the DESeq2, R language vignettes and the nf-core rnaseq pipeline.\n\n\n\n\n\n\n\nCourse Overview\n\n\n\n\nüìñ Syllabus:\n\n\nCourse introduction\n\nExperimental planning\n\nData explanation\n\nRead reprocessing and preprocessing pipelines\n\nAnalysing RNAseq data\n\nRNAseq counts\n\nExploratory analysis\n\nDifferential Expression Analysis\n\nFunctional analysis\n\nSummarized workflow\n\n\n‚è∞ Total Time Estimation: 8 hours\nüìÅ Supporting Materials: Workshop slides with theory on bulk RNAseq can be found in this zenodo repository.\nüë®‚Äçüíª Target Audience: Ph.D., MSc, etc.\nüë©‚Äçüéì Level: Beginner.\nüîí License: Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) license.\n\nüí∞ Funding: This project was funded by the Novo Nordisk Fonden (NNF20OC0063268).\n\n\n\n\n\n\n\n\n\nCourse Requirements\n\n\n\n\nKnowledge of R, Rstudio and Rmarkdown. It is recommended that you have at least followed our workshop R basics\nBasic knowledge of RNAseq technology\nBasic knowledge of data science and statistics such as PCA, clustering and statistical testing\n\n\n\nThis workshop material includes a tutorial on how to approach RNAseq data, starting from your sequencing reads (fastq files). Thus, the workshop only briefly touches upon laboratory protocols, library preparation, and experimental design of RNA sequencing experiments, mainly for the purpose of outlining considerations in the downstream bioinformatic analysis. This workshop is based on the materials developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC), a collection of modified tutorials from the DESeq2, R language vignettes and the nf-core rnaseq pipeline.\nThe aim of this repository is to run a comprehensive but introductory workshop on bulk-RNAseq bioinformatic analyses. Each of the modules of this workshop is accompanied by a powerpoint slideshow explaining the steps and the theory behind a typical bioinformatics analysis (ideally with a teacher). Many of the slides are annotated with extra information and/or point to original sources for extra reading material.\n\n\n\n\n\n\nCourse Goals\n\n\n\nBy the end of this workshop, you should be able to analyse your own bulk RNAseq data:\n\nPreprocess your reads into a count matrix.\nNormalize your data.\nExplore your samples with PCAs and heatmaps.\nPerform Differential Expression Analysis.\nAnnotate your results.\n\n\n\n\nAcknowledgements\nWe recognize the substantial contribution of Jos√© Alejandro Romero Herrera, a former team member, in developing the course material. Other members that have contributed to the development of this course:\n\n\n\n\n\n\n\n\n\nMember\nRole\nInstitution\nPI\n\n\n\n\nJennifer Bartell\nProject Manager, Data Scientist\nCenter for Health Data Science, KU\nAnders Krogh\n\n\nDiana Andrejeva\nData Scientist\nCenter for Health Data Science, KU\nAnders Krogh\n\n\nSamuele Soraggi\nData Scientist\nBioinformatics Research Centre, AU\nMikkel Schierup\n\n\n\nWe would also like to extend our gratitude to:\n\nCenter for Health Data Science, University of Copenhagen.\nHugo Tavares, Bioinformatics Training Facility, University of Cambridge.\nSilvia Raineri, Center for Stem Cell Medicine (reNew), University of Copenhagen.\nHarvard Chan Bioinformatics Core (HBC), check out their github repo\nnf-core community\n\n\n\nCourse Instructors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdrija Kalvisa\n\n\nData Scientist\n\n\n\n\n\n\n\n\n\n\n\nAlba Refoyo Martinez\n\n\nData Scientist\n\n\n\n\n\n\n\n\n\n\n\nHenrike Zschach\n\n\nData Scientist\n\n\n\n\n\n\n\n\n\n\n\nThilde Terkelsen\n\n\nData Scientist\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "develop/summary.html",
    "href": "develop/summary.html",
    "title": "Workshop summary",
    "section": "",
    "text": "Below you will find a summary of all the steps used in the workshop, as well as annotations for each of the steps."
  },
  {
    "objectID": "develop/summary.html#rnaseq-experiment",
    "href": "develop/summary.html#rnaseq-experiment",
    "title": "Workshop summary",
    "section": "RNAseq experiment",
    "text": "RNAseq experiment\n\nThe goal of a bulk RNAseq analysis is to compare gene expression between two or more conditions.\nA bulk RNAseq experiment requires isolation of mRNA from samples with different conditions.\nmRNA molecules are sequenced (reads), so we know their nucleotide sequence.\nWe still cannot do any sort of comparison between genes.\n\nSequences lack gene information, cannot perform any statistical analysis.\n\nReads need to be preprocessed to obtain a matrix of counts per gene and sample (‚Äúcount matrix‚Äù).\nTo preprocess fastq files we use a plethora of programs for each step.\n\nQC, trimming, alignment and quantification.\n\nAll these steps are compiled into a pipeline: nf-core rnaseq.\n\nRead more about how to use the nf-core rnaseq pipeline here.\n\nThen, we can proceed with data analysis and finding differences in expression.\n\nAfter the count matrix is created, we use R to analyse our data.\nBulk RNAseq analysis in R uses also several R packages.\n\nSo our workflow can be divided in two: preprocessing and data analysis."
  },
  {
    "objectID": "develop/summary.html#ucloud",
    "href": "develop/summary.html#ucloud",
    "title": "Workshop summary",
    "section": "UCloud",
    "text": "UCloud\n\nUCloud is a danish High Performance Computing environment.\n\nLots of storage, lots of CPUs and RAM (computing power).\n\nDanish institutions have access to it.\n\nYou personally have 1000 DKK in computing resources.\n\nUCloud works in apps, giving you access to different programs.\n\nAll apps have documentation on how to use them!\n\nThis means everyone is using the same versions of software.\n\nMakes teaching much much easier, results are reproducible."
  },
  {
    "objectID": "develop/summary.html#step-1-preprocessing",
    "href": "develop/summary.html#step-1-preprocessing",
    "title": "Workshop summary",
    "section": "Step 1 Preprocessing",
    "text": "Step 1 Preprocessing\n\nTraditional preprocessing\n\n\nExperimental design. Before you start a bulk RNAseq experiment, take into account: 1. Proper controls. 2. Replicates. 3. Confounding factors. 4. Batch effects. 5. Talk to a bioinformatician!\nWet lab protocol The RNAseq lab protocol ends in the sequencer\nSequencer Sequencer returns images of the sequence-by-synthesis process in bcl format\nBcl to fastq files translation Software bcl2fastq transforms sequencer images into fastq format. This is formally known as ‚Äúreads‚Äù. Depending on your RNAseq protocol, you will have either single end or paired end reads.\nRaw fastq files They contain read information, such as the nucleotide sequence and the quality of each of the nucleotides. They are called ‚Äúraw‚Äù cause they are unfiltered and may contain primers and adaptors. We need to check read quality and probably clean them\nReads Quality Control Using the software fastQC we can check the quality of our reads before and after cleaning. fastQC will calculate metrics such as: GC-content, overall read quality, per base quality, overrepresented sequences, etc.\nRaw fastQC report We check the report in html, which can be visualized in an internet browser. We check the fastQC metrics mentioned in 6.\nTrimming and cleaning Raw fastq files may contain bad quality reads and adaptors which will pose a problem when trying to align the reads. TrimGalore! is a tool that will clean, filter and trim reads. It will also create a fastQC report of the clean reads.\n\nRemove adapters\nTrim bad quality bases from either end\nFilter out bad quality reads\n\n\nTrimming & cleaning: quality control\n\nClean fastq files These are reads that have been cleaned and ready to aligned.\nClean fastQC report We check again that we have solved the issues we saw in 7.\nAlignment Alignment is the process of mapping the origin of our reads to the reference genome12. There are many aligners tools, such as STAR, BWA, or HISAT2. They will use the indexed genome13 to map the reads.\nReference genome In order to know from which genes our reads are coming from, we need to align them to a reference genome. Make sure you are using the latest stable version of the genome for your organism of interest! Depending on the aligner you are using, you will have to index your genome15 using that same aligner\nfasta file A fasta file is a text file that contains a nucleotide or amino acid sequence. It always starts with ‚Äú&gt;‚Äù as a header. The header contains information about the sequence, such as ‚ÄúChromosome 1 of the mouse genome‚Äù.\nAnnotations in gtf or gff file While the fasta file contains the actual sequence, the annotation file provides information about regions of the sequence, such as genes, promoters, enhancers, etc. The annotation file will have coordinates of where this region falls in the fasta sequence, as well as what type of region it is. Thus it is important that the coordinates of the file matches the version of the reference genome you are using.\nReference indexing In order to align reads to a reference in an efficient way, the fasta file must be structured. This process is called ‚Äúindexing‚Äù, which allows fast search and mapping of reads to the reference. Indexing is performed by the same aligner that you will be using. It will return files with different formats, depending on the aligner you used.\nAligned reads Reads that have been mapped to the reference genome. They are in BAM format17.\nBAM files BAM files are binary files containing information about the read alignment, such as: - Where in the reference do they fall. - Quality of the mapping. - Quality of the read.\n\nDuplicates evaluation\n\nCheck duplicates Due to the nature of mRNAs and the protocol to sequence them, duplications will occur (blue reads in 16). They can be artifacts of PCR amplification or natural duplicates of highly expressed genes. The tool dupRadar will create these plots for you to check them out19.\ndupRadar results dupRadar will plot the ratio of duplications (y axis) as a function of the gene expression (x axis).\nAs long as you find a low ratio of duplicates for lowly expressed genes and high duplication rates of highly expressed genes, there is nothing to worry about (left image).\nIf your ratio of duplicates is proportional (right plot) you probably have artificial duplicates. You may consider removing them in 20.\nRemove duplicates This is an optional step if your duplicate ratios are not what you expected from the dupRadar results19. This can be done with the tool MarkDuplicates and will return you BAM files17 without duplicated reads.\nQuantification Using the annotations from the gtf or gff file14, we can finally count how many reads belong to each gene from each sample and create a count matrix.\nThere are several tools that can do this, such as STAR, HISAT2, bedtools, Rsubread.\nCount matrix Matrix of rows and columns where: columns are samples and rows are genes. Usually in tab separated values (tsv) format.\nMultiQC report All metrics and QC checks can be compiled into a single html report that summarizes the entire preprocessing workflow:\n\nRaw reads fastQC\nClean and trimmed reads QC\nAlignment metrics\nDuplication rates\ndupRadar results\nQuantification results \n\n\nAll these steps are compiled into a pipeline: nf-core rnaseq\n\n\nPseudo preprocessing\n\nPseudoalignment and quantification preprocessing differs from traditional mapping. With pseudoalignment we do not know the exact coordinates of our reads, but it makes the alignment and quantification process much faster. However, we will lose many QC steps on the way. Other than that, the workflow starts very similar.\nNOTE: you can do traditional alignment and also pseudoquantification. This way you can still get all your QC metrics.\n\nExperimental design. Before you start a bulk RNAseq experiment, take into account: 1. Proper controls. 2. Replicates. 3. Confounding factors. 4. Batch effects. 5. Talk to a bioinformatician!\nWet lab protocol The RNAseq lab protocol ends in the sequencer\nSequencer Sequencer returns images of the sequence-by-synthesis process in bcl format\nBcl to fastq files translation Software bcl2fastq transforms sequencer images into fastq format. This is formally known as ‚Äúreads‚Äù. Depending on your RNAseq protocol, you will have either single end or paired end reads.\nRaw fastq files They contain read information, such as the nucleotide sequence and the quality of each of the nucleotides. They are called ‚Äúraw‚Äù cause they are unfiltered and may contain primers and adaptors. We need to check read quality and probably clean them\nReads Quality Control Using the software fastQC we can check the quality of our reads before and after cleaning. fastQC will calculate metrics such as: GC-content, overall read quality, per base quality, overrepresented sequences, etc.\nRaw fastQC report We check the report in html, which can be visualized in an internet browser. We check the fastQC metrics mentioned in 6.\nTrimming and cleaning Raw fastq files may contain bad quality reads and adaptors which will pose a problem when trying to align the reads. TrimGalore! is a tool that will clean, filter and trim reads. It will also create a fastQC report of the clean reads.\n\nRemove adapters\nTrim bad quality bases from either end\nFilter out bad quality reads\n\n\nTrimming & cleaning: quality control\n\nClean fastq files These are reads that have been cleaned and ready to aligned.\nClean fastQC report We check again that we have solved the issues we saw in 7.\n\nAlignment\nA. Pseudoalignment Alignment is the process of mapping the origin of our reads to the reference genome12. There are several pseudoaligners tools, such as salmon or kallisto. They will use the genome graph/index15 to align the reads. NOTE: Pseudoalignment and quantification can be done in one step/calculation, there are no aligned files.\n\nReference genome In order to know from which genes our reads are coming from, we need to align them to a reference genome. Make sure you are using the latest stable version of the genome for your organism of interest! Depending on the aligner you are using, you will have to index your genome14 using that same aligner\nfasta file A fasta file is a text file that contains a nucleotide or amino acid sequence. It always starts with ‚Äú&gt;‚Äù as a header. The header contains information about the sequence, such as ‚ÄúChromosome 1 of the mouse genome‚Äù.\nAnnotations in gtf or gff file While the fasta file contains the actual sequence, the annotation file provides information about regions of the sequence, such as genes, promoters, enhancers, etc. The annotation file will have coordinates of where this region falls in the fasta sequence, as well as what type of region it is. Thus it is important that the coordinates of the file matches the version of the reference genome you are using.\nReference indexing In order to pseudoalign reads to a reference in an efficient way, the fasta file must be structured: 1. First the reference, which includes different trasncripts, will be transfomed into a graph. 2. Each node is a k-mer consisting of ‚Äúk‚Äù nucleotides. 3. Each noche is compatible with X transcripts 4. The nodes and their compatibilities are indexed 5. Redundant nodes are removed\nIndexing is performed by the same pseudoaligner that you will be using. It will return files with different formats, depending on the pseudoaligner you used.\n\nResults quantification\n\nPseudoquantification Using the annotations from the gtf or gff file14, we can estimate count how many reads belong to each gene from each sample. Salmon and kallisto will create a quantification file for each of your samples.\nNOTE: Pseudoalignment and quantification can be done in one step/calculation, there are no aligned files.\nQuantification results Pseudoaligners will create individual results for each of the samples, called ‚Äúquant.sf‚Äù files. The quant.sf file is matrix where each row is a transcript. There are several columns: - Name: This is the name of the target transcript provided in the input transcript database (FASTA file). - Length: This is the length of the target transcript in nucleotides. - EffectiveLength: This is the computed effective length of the target transcript. - TPM: This is salmon‚Äôs estimate of the relative abundance of this transcript in units of Transcripts Per Million (TPM). - NumReads: This is salmon‚Äôs estimate of the number of reads mapping to each transcript that was quantified.\nThe pseudoaligner will also create a tx2gene.txt file that contains translations between transcripts IDs, gene IDs and gene names.\nImport and merge quant.sf files Using the tximport R package, we can import all our quant.sf files and txt2gene.txt file into a proper count matrix that will be fed into the DESeq2 package for differential expression analysis.\nCount matrix Matrix of rows and columns where: columns are samples and rows are genes. Usually in tab separated values (tsv) format.\nMultiQC report All metrics and QC checks can be compiled into a single html report that summarizes the entire preprocessing workflow: - Raw reads fastQC - Clean and trimmed reads QC - Alignment metrics - Duplication rates - dupRadar results - Quantification results\n\nAll these steps are compiled into a pipeline: nf-core rnaseq"
  },
  {
    "objectID": "develop/summary.html#data-analysis",
    "href": "develop/summary.html#data-analysis",
    "title": "Workshop summary",
    "section": "2. Data analysis",
    "text": "2. Data analysis\n\nWe have now our count matrix, either from the salmon results or from our traditional count matrix. It is time to get into Rstudio and do our data analysis!\n\nCount matrix Matrix of rows and columns where: columns are samples and rows are genes. Usually in tab separated values (tsv) format.\nMetadata Matrix of rows and columns that contain information about your samples. This could be your samplesheet.csv used for the nf-core pipeline. Each row is a sample and each column is information about that sample, including our variables of interest (condition) and possible confounding variables.\n\n\nCreate DESeq object Create a DESeq object with the count matrix and metadata, either from the salmon results (from tximport) or a traditional count matrix (traditional aligner and quantification, like STAR). We need to already specify our formula for statistical testing. This can be changed later after checking for sources of variation.\nNOTE: make sure that the order of the samples in columns in the count matrix is the same as the order of the samples in the rows of your metadata! - DESeqDataSetFromTximport(counts, colData = metadata, design = ~ condition) -&gt; For salmon results - DESeqDataSetFromMatrix(counts, colData = metadata, design = ~ condition) -&gt; For traditional count matrix\n\n\nDESeq object DESeq object will contain all the info necessary to run a differential expression analysis, including the design, size factors, dispersions and statistical tests.\nDesign Formula used for modeling and statistical testing. In here you should also put your variables that contribute to differences between samples (variance). - A basic experiment, e.g., treated vs untreated cells will have this information in the metadata variable ‚Äúcondition‚Äù. Thus the design formula should be: ~ condition. - A experiment containing two variables, such as ‚Äútreatment‚Äù (treated and control) vs sex (males and females) would have a design formula like this: ~ sex + condition. Your variable of interest should be the last one! - If you expect a combined effect between sex and treatment, add the combined factor to the design: ~ sex + condition + sex:condition.\n\n\nModel counts Running the DESeq() function, you will automatically model your counts for differential expression analysis. The DESeq() function will run three steps in a row:\n\nestimateSizeFactors(dds): calculate size factors for each sample and normalize count matrix by the median of rations method\nestimateDispersions(dds): estimate gene dispersions, that is, how is the variance of a gene compared to its mean across all samples.\nnbinomWaldTest(dds): model your counts using the size factors and dispersions as well as running Wald tests for statistical significance.\n\n\n\nModeled DESeq object DESeq object that has run the DESeq() function on it. It contains all the information calculated in 6.\nNormalized counts You can extract your normalized counts using the median of ratios methods with the function: counts(dds, normalized = T). This normalized counts can be useful for downstream analysis using other types of tools as well as visualizations.\n\n\nExploratory analysis Now we are able to check if our sampels are behaving the way we expect, that is, if our replicates are grouped together, our genes have the dispersion we expect and check for sources of variation.\n\nDispersion plot After calculating gene dispersions, we can check if our dispersions match what we expect from a negative binomial distribution typical of bulk RNAseq. If the fitted line is not in the middle of the cloud of dots, or the is a big ‚Äúrainfall‚Äù of dots coming from the clouds it might indicate problems with your data, like an outlier, contamination or you are not using a raw count matrix.\nHeatmaps and clustering You can use sample distances or Pearson correlations to group or clusters your samples together. Replicates of the same type should cluster together and be apart from other types of replicates.\nPCA plot The PCA can be used also to check that your replicates are group together. It can also be used to check for different variables that are driving the clustering11. Ideally you will find that PC1 and PC2 separate your samples by the variable of interest. Otherwise, you might want to adjust your design formula11.\n\n\n\nCheck sources of variation If variables (confounding variables) other than your variables of interest are separating your samples in your PCA plot, you should probably go back to create a DESeqObject3 step and include your confounding variables into the design formula.\n\n\nDEA We can extract now our results of Differential Expression analysis, that is, our log2 Fold Changes and statistical significance (p-value). Remember that there are different statistical filters (genes with 0 counts, outliers, etc) which will return NA as a p-value. In order to get your results you will have to provide a comparison, a.k.a., a ‚Äúcontrast‚Äù. There are different ways of specifying this contrast. You can use either:\n\nNormal results12: results(dds, contrast = &lt;comparison&gt;)\nLog2FC shrunken results13: lfcShrink(dds, coef = &lt;comparison&gt;)\n\n\n\nResults table Normal, unshrunken results for DEA of the specified comparison (contrast). You can obtain this table using the function: results(dds, contrast = comparison). The table will contain several columns. The most important ones are: - baseMean: mean of your normalized counts - log2FoldChange: ratio of expression between two conditions in log2 scale - p-value: wald statistical test pvalue - padj: adjusted pvalues for multiple testing\nYou can further filter this table using a cutoff for your adjusted pvalue and thresholds for your LFCs (up regulated genes or down regulated genes).\nLogFoldShrink results table Normal results will have very noise LFC for low counts, as well as having very low statistical significance. Using this technique, you can reduce the noisy LFC from insignificant genes. These are very useful for visualization15 or ranking of genes based on their LFC in a GSEA18. This function returns the same columns as before13.\n\n\nVisualize results Instead of looking at tables, you can check your differentially expressed genes using different visualizations.\n\nMAplot: each dot is a gene; x axis is the mean of the normalized counts; y axis is the shrunken LFC14. Colored dots are significant genes. Use the plotMA(res) function.\nVolcano plot: each dot is a gene; x axis is the shrunken LFC14; y axis is the adjusted p-value in -log10 scale. Colored dots are significant genes. You need to create custom ggplot().\nHeatmap plots. Each row is a gene and each column is a sample. You can plot here differentially expressed genes using the normalized counts8 or LFC between different comparisons.\n\nAnnotate genes We will annotate our genes with different information so that we can perform functional analysis using different databases. We do this using the R package annotationHub. We extract information regarding our genes of interest, such as entrez ID, gene names, genomic regions, etc.\nNOTE: make sure we use the same genome version as the one we used to align our reads. Different versions of the genome will have gene Ids for the same gene.\n\n\nAnnotated results table Results table annotated with more information15, such as database IDs, ready for functional analysis17.\n\n\nFunctional analysis We can annotate the results of our DEA to reveal the function or biological relevance of our genes of interest. We use the R package clusterProfiler to do functional analysis. We can consult different databases, such as Gene Ontologies (GO), KEGG pathways or Disease Ontologies (DO), using different methods:\n\nOverrepresentation analysis: enrichXXX(). Performs a statistical test on a contingency table for enrichment on GO or DO terms, as well as KEGG pathways. XXX depends on the enrichment you want to perform.\nGSEA: gseXXX(). Performs Gene Set Enrichment Analysis (GSA) on a ranked list of genes (by p-value or shrunken LFC13). XXXdepends on the enrichment you want to perform.\nPathway perturbance: pathway(). You visualize how genes in a path are being up or down regulated based on LFC. You should select a path that was a significant hit.\nNetworks: you can compile information of similar enriched terms into a network for easier understanding of your functional analysis results."
  },
  {
    "objectID": "develop/07b_hypothesis_testing.html",
    "href": "develop/07b_hypothesis_testing.html",
    "title": "Hypothesis testing with DESeq2",
    "section": "",
    "text": "Approximate time: 40 minutes",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Hypothesis testing with DESeq2"
    ]
  },
  {
    "objectID": "develop/07b_hypothesis_testing.html#learning-objectives",
    "href": "develop/07b_hypothesis_testing.html#learning-objectives",
    "title": "Hypothesis testing with DESeq2",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nDiscuss the steps required to generate a results table for pairwise comparisons (Wald test)\nRecognize the importance of multiple test correction\nIdentify different methods for multiple test correction\nSummarize the different levels of gene filtering\nEvaluate the number of differentially expressed genes produced for each comparison\nConstruct R objects containing significant genes from each comparison",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Hypothesis testing with DESeq2"
    ]
  },
  {
    "objectID": "develop/07b_hypothesis_testing.html#deseq2-model-fitting-and-hypothesis-testing",
    "href": "develop/07b_hypothesis_testing.html#deseq2-model-fitting-and-hypothesis-testing",
    "title": "Hypothesis testing with DESeq2",
    "section": "DESeq2: Model fitting and Hypothesis testing",
    "text": "DESeq2: Model fitting and Hypothesis testing\nThe final step in the DESeq2 workflow is taking the counts for each gene and fitting it to the model and testing for differential expression.\n\nGeneralized Linear Model\nAs described earlier, the count data generated by RNA-seq exhibits overdispersion (variance &gt; mean) and the statistical distribution used to model the counts needs to account for this. As such, DESeq2 uses a negative binomial distribution to model the RNA-seq counts using the equation below:\n\n\n\n\n\n\n\n\n\nThe two parameters required are the size factor, and the dispersion estimate. Next, a generalized linear model (GLM) of the NB family is used to fit the data. Modeling is a mathematically formalized way to approximate how the data behaves given a set of parameters.\nAfter the model is fit, coefficients are estimated for each sample group along with their standard error. The coefficients are the estimates for the log2 fold changes, and will be used as input for hypothesis testing.\n\n\nHypothesis testing\nThe first step in hypothesis testing is to set up a null hypothesis for each gene. In our case, the null hypothesis is that there is no differential expression across the two sample groups (LFC == 0). Second, we use a statistical test to determine if based on the observed data, the null hypothesis can be rejected. In DESeq2, the Wald test is the default used for hypothesis testing when comparing two groups.\nThe GLM and the statistical testing is done using the function nbinomWaldTest()\n\ndds &lt;- nbinomWaldTest(dds)\n\nThe model fit and Wald test were already run previously as part of the DESeq() function:\n\n## DO NOT RUN THIS CODE\n\n## Create DESeq2Dataset object\ndds &lt;- DESeqDataSetFromTximport(txi,\n                                   colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)\n## Run analysis\ndds &lt;- DESeq(dds)",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Hypothesis testing with DESeq2"
    ]
  },
  {
    "objectID": "develop/07b_hypothesis_testing.html#exploring-results",
    "href": "develop/07b_hypothesis_testing.html#exploring-results",
    "title": "Hypothesis testing with DESeq2",
    "section": "Exploring Results",
    "text": "Exploring Results\nBy default DESeq2 uses the Wald test to identify genes that are differentially expressed between two sample groups. Given the factor(s) used in the design formula, and how many factor levels are present, we can extract results for a number of different comparisons.\n\nSpecifying contrasts\nIn our dataset, we have three sample groups so we can make three possible pairwise comparisons:\n\nControl vs.¬†Vampirium\nGarlicum vs.¬†Vampirium\nGarlicum vs.¬†Control\n\nWe are really only interested in #1 and #2 from above. When we initially created our dds object we had provided ~ condition as our design formula, indicating that condition is our main factor of interest.\nTo indicate which two sample groups we are interested in comparing, we need to specify contrasts. The contrasts are used as input to the DESeq2 results() function to extract the desired results.\nContrasts can be specified in three different ways:\n\nOne of the results from resultsNames(dds) and the name argument. This one is the simplest but it can also be very restricted:\n\n\nresultsNames(dds) # to see what names to use\n\n\nresults(dds, name = resultsNames(dds)[2]) # here we specify the second comparison from the list.\n\n\nContrasts can be supplied as a character vector with exactly three elements:\n\nThe first element design_var, is one of the variables you provided to the design formula on the DESeqDataSetFromTximport() function, when you first created the dds object.\nThe second element, level_to_compare, is your group of interest of the chosen variable. In our case it would be either Control samples or Garlicum samples. The group must match the name in your metadata.\nThe last element, base_level, is, ofc, the base level for the comparison. This would be our vampirium samples. Again, the name must match the name in your metadata!\n\n# DO NOT RUN!\ncontrast &lt;- c(\"design_var\", \"level_to_compare\", \"base_level\")\nresults(dds, contrast = contrast)\n\n\nContrasts can be given as a list of 2 character vectors: the names of the fold changes for the level of interest, and the names of the fold changes for the base level. These names should match identically to the elements of resultsNames(object). This method can be useful for combining interaction terms and main effects.\n\n\n# DO NOT RUN!\nresultsNames(dds) # to see what names to use\ncontrast &lt;- list(resultsNames(dds)[2], resultsNames(dds)[3])\nresults(dds, contrast = contrast)\n\nAlternatively, if you only had two factor levels you could do nothing:\n\nresults(dds)\n\nlog2 fold change (MLE): condition garlicum vs vampirium \nWald test p-value: condition garlicum vs vampirium \nDataFrame with 38872 rows and 6 columns\n                   baseMean log2FoldChange     lfcSE      stat      pvalue\n                  &lt;numeric&gt;      &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;   &lt;numeric&gt;\nENSG00000000005   26.086073      -0.646861  0.501159 -1.290729   0.1967975\nENSG00000000419 1614.076845      -0.149505  0.100881 -1.481997   0.1383411\nENSG00000000457  509.265870       0.194316  0.109504  1.774518   0.0759776\nENSG00000000938    0.403756       1.805083  4.476581  0.403228   0.6867805\nENSG00000000971    8.381364      -1.884550  1.452071 -1.297836   0.1943437\n...                     ...            ...       ...       ...         ...\nENSG00000291310    0.380754     -2.6717039  4.492548 -0.594697 0.552046156\nENSG00000291312   20.825465     -1.6970593  1.002445 -1.692920 0.090470680\nENSG00000291315   30.487909     -0.0768952  0.470023 -0.163599 0.870046849\nENSG00000291316   73.844923      0.7412490  0.342495  2.164264 0.030444100\nENSG00000291317  299.454400     -0.7642255  0.186602 -4.095488 0.000042128\n                       padj\n                  &lt;numeric&gt;\nENSG00000000005    0.383132\nENSG00000000419    0.299549\nENSG00000000457    0.193966\nENSG00000000938          NA\nENSG00000000971    0.379530\n...                     ...\nENSG00000291310          NA\nENSG00000291312 0.220112811\nENSG00000291315 0.937261738\nENSG00000291316 0.097098441\nENSG00000291317 0.000404955\n\n\nTo start, we want to evaluate expression changes between the Control samples and the Vampirium samples. As such we will use the first method for specifying contrasts and create a character vector:\n\nExercise 1\nDefine contrasts for Control vs Vampirium samples using one of the two methods above.\nYour code here\n\ncontrast_cont &lt;-",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Hypothesis testing with DESeq2"
    ]
  },
  {
    "objectID": "develop/07b_hypothesis_testing.html#the-results-table",
    "href": "develop/07b_hypothesis_testing.html#the-results-table",
    "title": "Hypothesis testing with DESeq2",
    "section": "The results table",
    "text": "The results table\nNow that we have our contrast created, we can use it as input to the results() function.\n\n?results\n\nYou will see we have the option to provide a wide array of arguments and tweak things from the defaults as needed. For example:\n\n## Extract results for Contorl vs Vampirium with a pvalue &lt; 0.05\nres_tableCont &lt;- results(dds, contrast=contrast_cont, alpha = 0.05)\n\nThe results table that is returned to us is a DESeqResults object, which is a simple subclass of DataFrame.\n\n# Check what type of object is returned\nclass(res_tableCont)\n\nNow let‚Äôs take a look at what information is stored in the results:\n\n# What is stored in results?\nres_tableCont %&gt;% \n  data.frame() %&gt;% \n  head()\n\nWe can use the mcols() function to extract information on what the values stored in each column represent:\n\n# Get information on each column in results\ndata.frame(mcols(res_tableCont, use.names=T))\n\n\nbaseMean: mean of normalized counts for all samples in your count matrix\nlog2FoldChange: log2 fold change\nlfcSE: standard error for the lfc calculation\nstat: Wald statistic\npvalue: Wald test p-value\npadj: BH adjusted p-values\n\n\nGene-level filtering\nLet‚Äôs take a closer look at our results table. As we scroll through it, you will notice that for selected genes there are NA values in the pvalue and padj columns. What does this mean?\n\n\n\n\n\n\n\n\n\nThe missing values represent genes that have undergone filtering as part of the DESeq() function. Prior to differential expression analysis it is beneficial to omit genes that have little or no chance of being detected as differentially expressed. This will increase the power to detect differentially expressed genes. DESeq2 does not physically remove any genes from the original counts matrix, and so all genes will be present in your results table. The genes omitted by DESeq2 meet one of the three filtering criteria outlined below:\n1. Genes with zero counts in all samples\nIf within a row, all samples have zero counts there is no expression information and therefore these genes are not tested. Since we have already filtered out these genes ourselves when we created our dds object.\n\n# Show genes with zero expression\nres_tableCont %&gt;%\n  as_tibble(rownames = \"gene\") %&gt;% \n  dplyr::filter(baseMean==0) %&gt;%\n  head()\n\n\nIf there would be any genes meeting this criteria, the baseMean column for these genes will be zero, and the log2 fold change estimates, p-value and adjusted p-value will all be set to NA.\n\n2. Genes with an extreme count outlier\nThe DESeq() function calculates, for every gene and for every sample, a diagnostic test for outliers called Cook‚Äôs distance. If several samples are flagged for a certain gene, the gene is filtered out.\n\n# Show genes that have an extreme outlier\nres_tableCont %&gt;% \n  as_tibble(rownames = \"gene\") %&gt;% \n  dplyr::filter(is.na(pvalue) & is.na(padj) & baseMean &gt; 0) %&gt;%\n  head()\n\nIt seems that we have some genes with outliers!\n\nIf a gene contains a sample with an extreme count outlier then the p-value and adjusted p-value will be set to NA.\n\n3. Genes with a low mean normalized counts\nDESeq2 defines a low mean threshold, that is empirically determined from your data, in which the fraction of significant genes can be increased by reducing the number of genes that are considered for multiple testing. This is based on the notion that genes with very low counts are not likely to see significant differences typically due to high dispersion.\n\n# Show genes below the low mean threshold\nres_tableCont %&gt;% \n  as_tibble(rownames = \"gene\") %&gt;% \n  dplyr::filter(!is.na(pvalue) & is.na(padj) & baseMean &gt; 0) %&gt;%\n  head()\n\n\nIf a gene is filtered by independent filtering, then only the adjusted p-value will be set to NA.\n\n\nNOTE: DESeq2 will perform the filtering outlined above by default; however other DE tools, such as EdgeR will not. Filtering is a necessary step, even if you are using limma-voom and/or edgeR‚Äôs quasi-likelihood methods. Be sure to follow pre-filtering steps when using other tools, as outlined in their user guides found on Bioconductor as they generally perform much better.",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Hypothesis testing with DESeq2"
    ]
  },
  {
    "objectID": "develop/07b_hypothesis_testing.html#fold-changes",
    "href": "develop/07b_hypothesis_testing.html#fold-changes",
    "title": "Hypothesis testing with DESeq2",
    "section": "Fold changes",
    "text": "Fold changes\nWith large significant gene lists it can be hard to extract meaningful biological relevance. To help increase stringency, one can also add a fold change threshold. Keep in mind when setting that value that we are working with log2 fold changes, so a cutoff of log2FoldChange &lt; 1 would translate to an actual fold change of 2.\n\nAn alternative approach to add the fold change threshold:\nThe results() function has an option to add a fold change threshold using the lfcThreshold argument. This method is more statistically motivated, and is recommended when you want a more confident set of genes based on a certain fold-change. It actually performs a statistical test against the desired threshold, by performing a two-tailed test for log2 fold changes greater than the absolute value specified. The user can change the alternative hypothesis using altHypothesis and perform two one-tailed tests as well. This is a more conservative approach, so expect to retrieve a much smaller set of genes!\n\n\nres_tableCont_LFC1 &lt;- results(dds, contrast=contrast_cont, alpha = 0.05, lfcThreshold = 1)",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Hypothesis testing with DESeq2"
    ]
  },
  {
    "objectID": "develop/07b_hypothesis_testing.html#summarizing-results",
    "href": "develop/07b_hypothesis_testing.html#summarizing-results",
    "title": "Hypothesis testing with DESeq2",
    "section": "Summarizing results",
    "text": "Summarizing results\nTo summarize the results table, a handy function in DESeq2 is summary().\n\n## Summarize results\nsummary(res_tableCont, alpha = 0.05)\n\nIn addition to the number of genes up- and down-regulated at the default threshold, the function also reports the number of genes that were tested (genes with non-zero total read count), and the number of genes not included in multiple test correction due to a low mean count.",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Hypothesis testing with DESeq2"
    ]
  },
  {
    "objectID": "develop/07b_hypothesis_testing.html#extracting-significant-differentially-expressed-genes",
    "href": "develop/07b_hypothesis_testing.html#extracting-significant-differentially-expressed-genes",
    "title": "Hypothesis testing with DESeq2",
    "section": "Extracting significant differentially expressed genes",
    "text": "Extracting significant differentially expressed genes\nLet‚Äôs first create variables that contain our threshold criteria. We will only be using the adjusted p-values in our criteria:\n\n### Set thresholds\npadj.cutoff &lt;- 0.05\n\nWe can easily subset the results table to only include those that are significant using the dplyr::filter() function, but first we will convert the results table into a tibble:\n\n# Create a tibble of results and add gene symbols to new object\nres_tableCont_tb &lt;- res_tableCont %&gt;%\n  as_tibble(rownames = \"gene\") %&gt;%\n  relocate(gene, .before = baseMean)\n\nhead(res_tableCont_tb)\n\nNow we can subset that table to only keep the significant genes using our pre-defined thresholds:\n\n# Subset the tibble to keep only significant genes\nsigCont &lt;- res_tableCont_tb %&gt;%\n  dplyr::filter(padj &lt; padj.cutoff)\n\n\n# Take a quick look at this tibble\nhead(sigCont)\n\nNow that we have extracted the significant results, we are ready for visualization!\n\nExercise 2\nVampirium Differential Expression Analysis: Garlicum versus Vampirium\nNow that we have results for the Control vs Vampirium results, do the same for the Garlicum vs.¬†Control samples.\n\nCreate a contrast vector called contrast_gar.\nUse contrast vector in the results() to extract a results table and store that to a variable called res_tableGar.\nUsing a p-adjusted threshold of 0.05 (padj.cutoff &lt; 0.05), subset res_tableGar to report the number of genes that are up- and down-regulated in Garlicum compared to Vampirium.\nHow many genes are differentially expressed in the Garlicum vs Vampirium comparison? How does this compare to the Control vs Vampirium significant gene list (in terms of numbers)?",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Hypothesis testing with DESeq2"
    ]
  },
  {
    "objectID": "develop/08a_FA_genomic_annotation.html",
    "href": "develop/08a_FA_genomic_annotation.html",
    "title": "Genomic annotations for functional analyses",
    "section": "",
    "text": "Approximate time: 30 minutes",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Genomic annotations for functional analyses"
    ]
  },
  {
    "objectID": "develop/08a_FA_genomic_annotation.html#learning-objectives",
    "href": "develop/08a_FA_genomic_annotation.html#learning-objectives",
    "title": "Genomic annotations for functional analyses",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nDiscuss the available genomic annotation databases and the different types if information stored\nCompare and contrast the tools available for accessing genomic annotation databases",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Genomic annotations for functional analyses"
    ]
  },
  {
    "objectID": "develop/08a_FA_genomic_annotation.html#genomic-annotations",
    "href": "develop/08a_FA_genomic_annotation.html#genomic-annotations",
    "title": "Genomic annotations for functional analyses",
    "section": "Genomic annotations",
    "text": "Genomic annotations\nThe analysis of next-generation sequencing results requires associating genes, transcripts, proteins, etc. with functional or regulatory information. To perform functional analysis on gene lists, we often need to obtain gene identifiers that are compatible with the tools we wish to use and this is not always trivial.",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Genomic annotations for functional analyses"
    ]
  },
  {
    "objectID": "develop/08a_FA_genomic_annotation.html#databases",
    "href": "develop/08a_FA_genomic_annotation.html#databases",
    "title": "Genomic annotations for functional analyses",
    "section": "Databases",
    "text": "Databases\nWe retrieve information on the processes, pathways, etc. (for which a gene is involved in) from the necessary database where the information is stored. The database you choose will be dependent on what type of information you are trying to obtain. Examples of databases that are often queried, include:\nGeneral databases\nOffer comprehensive information on genome features, feature coordinates, homology, variant information, phenotypes, protein domain/family information, associated biological processes/pathways, associated microRNAs, etc.:\n\nEnsembl (use Ensembl gene IDs)\nNCBI (use Entrez gene IDs)\nUCSC\nEMBL-EBI\n\nAnnotation-specific databases\nProvide annotations related to a specific topic:\n\nGene Ontology (GO): database of gene ontology biological processes, cellular components and molecular functions - based on Ensembl or Entrez gene IDs or official gene symbols\nKEGG: database of biological pathways - based on Entrez gene IDs\nMSigDB: database of gene sets\nReactome: database of biological pathways\nHuman Phenotype Ontology: database of genes associated with human disease\nCORUM: database of protein complexes for human, mouse, rat\n‚Ä¶",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Genomic annotations for functional analyses"
    ]
  },
  {
    "objectID": "develop/08a_FA_genomic_annotation.html#tools-for-accessing-databases",
    "href": "develop/08a_FA_genomic_annotation.html#tools-for-accessing-databases",
    "title": "Genomic annotations for functional analyses",
    "section": "Tools for accessing databases",
    "text": "Tools for accessing databases\nWithin R, there are many popular packages used for gene/transcript-level annotation. These packages provide tools that take the list of genes you provide and retrieve information for each gene using one or more of the databases listed above.\n\nAnnotation tools: for accessing/querying annotations from a specific databases\n\n\n\nTool\nDescription\nPros\nCons\n\n\n\n\norg.Xx.eg.db\nQuery gene feature information for the organism of interest\ngene ID conversion, biotype and coordinate information\nonly latest genome build available\n\n\nEnsDb.Xx.vxx\nTranscript and gene-level information directly fetched from Ensembl API (similar to TxDb, but with filtering ability and versioned by Ensembl release)\neasy functions to extract features, direct filtering\nNot the most up-to-date annotations, more difficult to use than some packages\n\n\nTxDb.Xx.UCSC.hgxx.knownGene\nUCSC database for transcript and gene-level information or can create own TxDb from an SQLite database file using the GenomicFeatures package\nfeature information, easy functions to extract features\nonly available current and recent genome builds - can create your own, less up-to-date with annotations than Ensembl\n\n\nannotables\nGene-level feature information immediately available for the human and model organisms\nsuper quick and easy gene ID conversion, biotype and coordinate information\nstatic resource, not updated regularly\n\n\nbiomaRt\nAn R package version of the Ensembl BioMart online tool\nall Ensembl database information available, all organisms on Ensembl, wealth of information",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Genomic annotations for functional analyses"
    ]
  },
  {
    "objectID": "develop/08a_FA_genomic_annotation.html#annotationhub",
    "href": "develop/08a_FA_genomic_annotation.html#annotationhub",
    "title": "Genomic annotations for functional analyses",
    "section": "AnnotationHub",
    "text": "AnnotationHub\nAnnotationHub is a wonderful resource for accessing genomic data or querying large collection of whole genome resources, including ENSEMBL, UCSC, ENCODE, Broad Institute, KEGG, NIH Pathway Interaction Database, etc. All of this information is stored and easily accessible by directly connecting to the database.\nTo get started with AnnotationHub, we first load the library and connect to the database:\n\nlibrary(AnnotationHub)\nlibrary(ensembldb)\n\n#To avoid prompting from annotation hub\nsetAnnotationHubOption(\"CACHE\", \"./AnnotationHub\")\nsetAnnotationHubOption(\"ASK\", FALSE)\n\n# Connect to AnnotationHub\nah &lt;- AnnotationHub()\n\nTo see the types of information stored inside our database, we can just type the name of the object:\n\n# Explore the AnnotationHub object\nah\n\nAnnotationHub with 72098 records\n# snapshotDate(): 2024-10-28\n# $dataprovider: Ensembl, BroadInstitute, UCSC, ftp://ftp.ncbi.nlm.nih.gov/g...\n# $species: Homo sapiens, Mus musculus, Drosophila melanogaster, Rattus norv...\n# $rdataclass: GRanges, TwoBitFile, BigWigFile, EnsDb, Rle, OrgDb, SQLiteFil...\n# additional mcols(): taxonomyid, genome, description,\n#   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags,\n#   rdatapath, sourceurl, sourcetype \n# retrieve records with, e.g., 'object[[\"AH5012\"]]' \n\n             title                                             \n  AH5012   | Chromosome Band                                   \n  AH5013   | STS Markers                                       \n  AH5014   | FISH Clones                                       \n  AH5015   | Recomb Rate                                       \n  AH5016   | ENCODE Pilot                                      \n  ...        ...                                               \n  AH119504 | Ensembl 113 EnsDb for Xiphophorus maculatus       \n  AH119505 | Ensembl 113 EnsDb for Xenopus tropicalis          \n  AH119506 | Ensembl 113 EnsDb for Zonotrichia albicollis      \n  AH119507 | Ensembl 113 EnsDb for Zalophus californianus      \n  AH119508 | Ensembl 113 EnsDb for Zosterops lateralis melanops\n\n\nIf you would like to see more information about any of the classes of data you can extract that information as well. For example, if you wanted to determine all species information available, you could explore that within the AnnotationHub object:\n\n# Explore all species information available\nunique(ah$species) %&gt;% head()\n\n[1] \"Homo sapiens\"         \"Vicugna pacos\"        \"Dasypus novemcinctus\"\n[4] \"Otolemur garnettii\"   \"Papio hamadryas\"      \"Papio anubis\"        \n\n\nIn addition to species information, there is also additional information about the type of Data Objects and the Data Providers:\n\n# Explore the types of Data Objects available\nunique(ah$rdataclass) %&gt;% head()\n\n[1] \"GRanges\"          \"data.frame\"       \"Inparanoid8Db\"    \"TwoBitFile\"      \n[5] \"ChainFile\"        \"SQLiteConnection\"\n\n# Explore the Data Providers\nunique(ah$dataprovider) %&gt;% head()\n\n[1] \"UCSC\"        \"Ensembl\"     \"RefNet\"      \"Inparanoid8\" \"NHLBI\"      \n[6] \"ChEA\"       \n\n\nNow that we know the types of information available from AnnotationHub we can query it for the information we want using the query() function. Let‚Äôs say we would like to return the Ensembl EnsDb information for Human. To return the records available, we need to use the terms as they are output from the ah object to extract the desired data.\n\n# Query AnnotationHub\nhuman_ens &lt;- query(ah, c(\"Homo sapiens\", \"EnsDb\"))\n\nThe query retrieves all hits for the EnsDb objects, and you will see that they are listed by the release number. The most current release for GRCh38 is Ensembl 109 and AnnotationHub offers that as an option to use. However, if you look at options for older releases, for Homo sapiens it only goes back as far as Ensembl 87. This is fine if you are using GRCh38, however if you were using an older genome build like hg19/GRCh37, you would need to load the EnsDb package if available for that release or you might need to build your own with ensembldb.\n\nhuman_ens\n\nAnnotationHub with 28 records\n# snapshotDate(): 2024-10-28\n# $dataprovider: Ensembl\n# $species: Homo sapiens\n# $rdataclass: EnsDb\n# additional mcols(): taxonomyid, genome, description,\n#   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags,\n#   rdatapath, sourceurl, sourcetype \n# retrieve records with, e.g., 'object[[\"AH53211\"]]' \n\n             title                             \n  AH53211  | Ensembl 87 EnsDb for Homo Sapiens \n  AH53715  | Ensembl 88 EnsDb for Homo Sapiens \n  AH56681  | Ensembl 89 EnsDb for Homo Sapiens \n  AH57757  | Ensembl 90 EnsDb for Homo Sapiens \n  AH60773  | Ensembl 91 EnsDb for Homo Sapiens \n  ...        ...                               \n  AH109606 | Ensembl 109 EnsDb for Homo sapiens\n  AH113665 | Ensembl 110 EnsDb for Homo sapiens\n  AH116291 | Ensembl 111 EnsDb for Homo sapiens\n  AH116860 | Ensembl 112 EnsDb for Homo sapiens\n  AH119325 | Ensembl 113 EnsDb for Homo sapiens\n\n\nIf we are looking for the latest Ensembl release, so that the annotations are the most up-to-date, we can use the AnnotationHub ID to subset the object:\n\n# Extract annotations of interest\nhuman_ens &lt;- human_ens[[length(human_ens)]]\n\nNow we can use ensembldb functions to extract the information at the gene, transcript, or exon levels. We are interested in the gene-level annotations, so we can extract that information as follows:\n\n# Extract gene-level information\ngenes(human_ens, return.type = \"data.frame\") %&gt;% head()\n\n\n  \n\n\n\nBut note that it is just as easy to get the transcript- or exon-level information:\n\n# Extract transcript-level information\ntranscripts(human_ens, return.type = \"data.frame\") %&gt;% head()\n\n\n  \n\n\n# Extract exon-level information\nexons(human_ens, return.type = \"data.frame\") %&gt;% head()\n\n\n  \n\n\n\nTo obtain an annotation data frame using AnnotationHub, we‚Äôll use the genes() function, but only keep selected columns and filter out rows to keep those corresponding to our gene identifiers in our results file:\n\n# Create a gene-level dataframe \nannotations_ahb &lt;- genes(human_ens, return.type = \"data.frame\")  %&gt;%\n  dplyr::select(gene_id, gene_name, entrezid, gene_biotype, description) %&gt;% \n  dplyr::filter(gene_id %in% res_tableCont_tb$gene)\n\nThis dataframe looks like it should be fine as it is, but we look a little closer we will notice that the column containing Entrez identifiers is a list, and in fact there are many Ensembl identifiers that map to more than one Entrez identifier!\n\n# Wait a second, we don't have one-to-one mappings!\nclass(annotations_ahb$entrezid)\n\n[1] \"list\"\n\nwhich(map(annotations_ahb$entrezid, length) &gt; 1)\n\nENSG00000290825 ENSG00000239149 ENSG00000229571 ENSG00000291072 ENSG00000158747 \n              1             308             322             400             454 \nENSG00000235200 ENSG00000233008 ENSG00000137962 ENSG00000235501 ENSG00000225206 \n           1344            1457            1604            1615            1635 \nENSG00000187733 ENSG00000226419 ENSG00000277610 ENSG00000291123 ENSG00000263513 \n           1691            1829            1950            1955            1984 \nENSG00000232527 ENSG00000288905 ENSG00000117262 ENSG00000188092 ENSG00000274020 \n           1988            2004            2024            2084            2099 \nENSG00000291158 ENSG00000143384 ENSG00000163156 ENSG00000272668 ENSG00000162747 \n           2130            2173            2205            2496            2580 \nENSG00000120341 ENSG00000230124 ENSG00000284237 ENSG00000224535 ENSG00000199396 \n           2782            2823            3148            3207            3420 \nENSG00000199270 ENSG00000201925 ENSG00000228044 ENSG00000203668 ENSG00000226005 \n           3421            3422            3510            3584            3721 \nENSG00000242147 ENSG00000272381 ENSG00000228426 ENSG00000285662 ENSG00000228566 \n           3745            3994            4093            4149            4288 \nENSG00000230417 ENSG00000166272 ENSG00000232903 ENSG00000171714 ENSG00000281880 \n           4482            4838            5143            5592            5644 \nENSG00000254584 ENSG00000255267 ENSG00000229183 ENSG00000254911 ENSG00000245552 \n           5646            5752            5940            6617            6649 \nENSG00000109927 ENSG00000149557 ENSG00000151067 ENSG00000258325 ENSG00000111671 \n           6950            7009            7135            7138            7251 \nENSG00000213809 ENSG00000111215 ENSG00000212127 ENSG00000255374 ENSG00000255760 \n           7393            7411            7416            7425            7659 \nENSG00000257545 ENSG00000178882 ENSG00000249345 ENSG00000215483 ENSG00000226519 \n           8614            8939            8965            9346            9395 \nENSG00000176124 ENSG00000186047 ENSG00000235532 ENSG00000178734 ENSG00000223617 \n           9482            9491            9596            9606            9786 \nENSG00000258038 ENSG00000206588 ENSG00000253563 ENSG00000214900 ENSG00000258537 \n          10148           10195           10236           10326           10356 \nENSG00000257365 ENSG00000133961 ENSG00000223403 ENSG00000258710 ENSG00000277865 \n          10549           10680           11019           11154           11167 \nENSG00000183629 ENSG00000207432 ENSG00000261247 ENSG00000178115 ENSG00000207430 \n          11226           11258           11259           11276           11279 \nENSG00000137843 ENSG00000237289 ENSG00000259426 ENSG00000159289 ENSG00000167195 \n          11413           11540           11942           12026           12069 \nENSG00000278662 ENSG00000251209 ENSG00000259182 ENSG00000290824 ENSG00000290355 \n          12235           12488           12536           12561           12562 \nENSG00000261617 ENSG00000069764 ENSG00000224712 ENSG00000166780 ENSG00000185164 \n          12899           12966           12968           12987           13032 \nENSG00000184110 ENSG00000183336 ENSG00000181625 ENSG00000169627 ENSG00000132207 \n          13212           13249           13250           13296           13297 \nENSG00000261052 ENSG00000090857 ENSG00000157335 ENSG00000157429 ENSG00000196436 \n          13299           13812           13813           13843           13896 \nENSG00000140839 ENSG00000197943 ENSG00000260279 ENSG00000197912 ENSG00000286190 \n          13897           14007           14158           14163           14372 \nENSG00000171916 ENSG00000273018 ENSG00000154016 ENSG00000233098 ENSG00000126861 \n          14704           14706           14727           14803           14993 \nENSG00000274808 ENSG00000274512 ENSG00000273709 ENSG00000263715 ENSG00000120088 \n          15116           15158           15377           15479           15481 \nENSG00000228696 ENSG00000238083 ENSG00000108379 ENSG00000263293 ENSG00000267452 \n          15491           15496           15501           15518           15657 \nENSG00000226364 ENSG00000287664 ENSG00000267280 ENSG00000136488 ENSG00000227036 \n          15659           15769           15801           15867           15991 \nENSG00000234721 ENSG00000175711 ENSG00000262352 ENSG00000173213 ENSG00000267712 \n          16008           16331           16340           16342           16845 \nENSG00000266256 ENSG00000188629 ENSG00000213999 ENSG00000267767 ENSG00000205076 \n          16982           17431           17840           18091           18269 \nENSG00000178934 ENSG00000231924 ENSG00000160336 ENSG00000204577 ENSG00000267710 \n          18270           18438           18952           18988           19098 \nENSG00000267858 ENSG00000236790 ENSG00000228999 ENSG00000222005 ENSG00000234690 \n          19236           19305           19426           19734           19745 \nENSG00000115239 ENSG00000228590 ENSG00000271889 ENSG00000186854 ENSG00000261600 \n          19775           19822           19838           20124           20224 \nENSG00000291150 ENSG00000144015 ENSG00000186281 ENSG00000015568 ENSG00000144063 \n          20225           20264           20270           20443           20450 \nENSG00000290614 ENSG00000136698 ENSG00000236107 ENSG00000213160 ENSG00000237298 \n          20666           20668           20910           20936           21063 \nENSG00000231646 ENSG00000185176 ENSG00000233806 ENSG00000261186 ENSG00000088298 \n          21111           21735           21773           21779           22215 \nENSG00000168746 ENSG00000215440 ENSG00000228340 ENSG00000274333 ENSG00000275496 \n          22355           22556           22579           22684           22691 \nENSG00000280145 ENSG00000280018 ENSG00000276077 ENSG00000278932 ENSG00000274391 \n          22696           22699           22701           22730           22741 \nENSG00000156273 ENSG00000205670 ENSG00000222018 ENSG00000243627 ENSG00000221398 \n          22835           22920           22921           22923           22926 \nENSG00000159216 ENSG00000238141 ENSG00000184012 ENSG00000160200 ENSG00000160201 \n          22931           22995           23017           23051           23052 \nENSG00000160202 ENSG00000188660 ENSG00000234289 ENSG00000160223 ENSG00000128383 \n          23055           23059           23062           23079           23789 \nENSG00000197182 ENSG00000144455 ENSG00000227110 ENSG00000231304 ENSG00000280739 \n          23965           24069           24089           24274           24434 \nENSG00000186448 ENSG00000174840 ENSG00000184220 ENSG00000249846 ENSG00000243620 \n          24508           24802           25018           25373           25544 \nENSG00000232832 ENSG00000233136 ENSG00000248933 ENSG00000250634 ENSG00000261761 \n          26136           26329           26332           26370           26476 \nENSG00000250546 ENSG00000260641 ENSG00000245293 ENSG00000249509 ENSG00000196951 \n          26894           26987           27062           27113           27279 \nENSG00000251600 ENSG00000151611 ENSG00000251249 ENSG00000198948 ENSG00000215156 \n          27303           27322           27365           27487           27894 \nENSG00000205572 ENSG00000205571 ENSG00000172062 ENSG00000145736 ENSG00000245526 \n          28185           28186           28200           28203           28396 \nENSG00000250331 ENSG00000120709 ENSG00000247199 ENSG00000249738 ENSG00000248469 \n          28479           28846           29065           29198           29329 \nENSG00000278970 ENSG00000248275 ENSG00000112679 ENSG00000145979 ENSG00000228223 \n          29465           29483           29496           29665           29836 \nENSG00000285761 ENSG00000231074 ENSG00000241370 ENSG00000146112 ENSG00000244355 \n          29975           30012           30018           30035           30117 \nENSG00000244731 ENSG00000204314 ENSG00000237541 ENSG00000204209 ENSG00000124713 \n          30145           30155           30177           30221           30397 \nENSG00000146147 ENSG00000065615 ENSG00000111850 ENSG00000228624 ENSG00000112541 \n          30556           30743           30774           30982           31459 \nENSG00000155026 ENSG00000105889 ENSG00000196683 ENSG00000290758 ENSG00000152926 \n          31647           31776           31782           32060           32238 \nENSG00000262461 ENSG00000274570 ENSG00000286014 ENSG00000178809 ENSG00000186645 \n          32338           32340           32400           32405           32448 \nENSG00000105793 ENSG00000272752 ENSG00000223646 ENSG00000004866 ENSG00000224897 \n          32527           32686           32874           32905           32960 \nENSG00000273297 ENSG00000234352 ENSG00000230549 ENSG00000236125 ENSG00000215372 \n          33081           33110           33525           33526           33528 \nENSG00000255251 ENSG00000285765 ENSG00000285950 ENSG00000255378 ENSG00000186562 \n          33530           33531           33538           33539           33540 \nENSG00000237038 ENSG00000225327 ENSG00000254229 ENSG00000248538 ENSG00000254866 \n          33542           33543           33546           33566           33624 \nENSG00000145002 ENSG00000228801 ENSG00000076554 ENSG00000260493 ENSG00000248690 \n          33635           34035           34256           34297           34594 \nENSG00000253438 ENSG00000229140 ENSG00000181135 ENSG00000181404 ENSG00000180071 \n          34653           34667           34785           34865           35273 \nENSG00000287838 ENSG00000284116 ENSG00000290718 ENSG00000291075 ENSG00000283378 \n          35281           35293           35296           35305           35334 \nENSG00000238113 ENSG00000290971 ENSG00000260691 ENSG00000196873 ENSG00000234394 \n          35348           35396           35407           35409           35412 \nENSG00000224958 ENSG00000158169 ENSG00000225194 ENSG00000271086 ENSG00000234323 \n          35414           35677           35691           35760           35815 \nENSG00000286112 ENSG00000233016 ENSG00000273730 ENSG00000277626 ENSG00000277641 \n          36096           36257           36343           36370           36371 \nENSG00000288357 ENSG00000288487 ENSG00000288206 ENSG00000233192 ENSG00000257473 \n          36400           36401           36402           36511           36531 \nENSG00000227046 ENSG00000223793 ENSG00000206206 ENSG00000231823 ENSG00000206301 \n          36535           36549           36554           36571           36591 \nENSG00000231617 ENSG00000225103 ENSG00000206279 ENSG00000231526 ENSG00000229396 \n          36596           36614           36619           36638           36643 \nENSG00000268009 ENSG00000269791 ENSG00000236362 ENSG00000189064 ENSG00000179304 \n          37062           37063           37117           37118           37154 \nENSG00000268350 ENSG00000158301 ENSG00000269226 ENSG00000101883 ENSG00000267978 \n          37156           37497           37543           37678           37892 \nENSG00000221867 ENSG00000268902 ENSG00000197172 ENSG00000235961 ENSG00000063587 \n          37930           37931           37935           37942           37947 \nENSG00000224533 ENSG00000099715 ENSG00000114374 ENSG00000291016 \n          38029           38044           38058           38073 \n\n\nSo what do we do here? And why do we have this problem? An answer from the Ensembl Help Desk is that this occurs when we cannot choose a perfect match; ie when we have two good matches, but one does not appear to match with a better percentage than the other. In that case, we assign both matches. What we will do is choose to keep the first identifier for these multiple mapping cases.\n\nannotations_ahb$entrezid &lt;- map(annotations_ahb$entrezid,1) %&gt;%  unlist()\n\nLet‚Äôs take a look and see how many of our Ensembl identifiers have an associated gene symbol, and how many of them are unique:\n\nsum(is.na(annotations_ahb$gene_name))\n\n[1] 0\n\nsum(duplicated(annotations_ahb$gene_name))\n\n[1] 11482\n\n\nLet‚Äôs identify the non-duplicated genes and only keep the ones that are not duplicated:\n\n# Determine the indices for the non-duplicated genes\nnon_duplicates_idx &lt;- which(duplicated(annotations_ahb$gene_name) == FALSE)\n\n# How many rows does annotations_ahb have?\nannotations_ahb %&gt;% nrow()\n\n[1] 38076\n\n# Return only the non-duplicated genes using indices\nannotations_ahb &lt;- annotations_ahb[non_duplicates_idx, ]\n\n# How many rows are we left with after removing?\nannotations_ahb %&gt;% nrow()\n\n[1] 26594\n\n\nFinally, it would be good to know what proportion of the Ensembl identifiers map to an Entrez identifier:\n\n# Determine how many of the Entrez column entries are NA\nwhich(is.na(annotations_ahb$entrezid)) %&gt;% length()\n\n[1] 7260\n\n\nFor the different steps in the functional analysis, we require Ensembl and Entrez IDs. We will use the gene annotations that we generated previously to merge with our differential expression results.\n\n## Merge the AnnotationHub dataframe with the results \nres_ids_ahb &lt;- inner_join(res_tableCont_tb, annotations_ahb, by=c(\"gene\"=\"gene_id\"))    \n\n\nUsing AnnotationHub to create a tx2gene file\nIf you wish to easily translate between genes and transcripts (this depends on how the count matrix was computed), it would be wise to create a ‚Äòtranscript to gene‚Äô translation file (or tx2gene file). In our case, we already have one tx2gene table generated by our pipeline, but sometimes you may not have access to an tx2gene file already, so it is useful to learn how to create such a file To create it, we would need to use a combination of the methods above and merge two dataframes together. For example:\n\n## DO NOT RUN THIS CODE\n\n# Create a transcript dataframe\n txdb &lt;- transcripts(human_ens, return.type = \"data.frame\") %&gt;%\n   dplyr::select(tx_id, gene_id)\n txdb &lt;- txdb[grep(\"ENST\", txdb$tx_id),]\n \n # Create a gene-level dataframe\n genedb &lt;- genes(human_ens, return.type = \"data.frame\")  %&gt;%\n   dplyr::select(gene_id, gene_name)\n \n # Merge the two dataframes together\n annotations &lt;- inner_join(txdb, genedb)",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Genomic annotations for functional analyses"
    ]
  },
  {
    "objectID": "develop/08a_FA_genomic_annotation.html#annotables-package",
    "href": "develop/08a_FA_genomic_annotation.html#annotables-package",
    "title": "Genomic annotations for functional analyses",
    "section": "Annotables package",
    "text": "Annotables package\nThe annotables package is a super easy annotation package to use. It is not updated frequently, so it‚Äôs not great for getting the most up-to-date information for the current builds and does not have information for other organisms than human and mouse, but is a quick way to get annotation information, specially for older builds.\n\nlibrary(annotables)\ngrch38\n\n\n  \n\n\n\nWe can see that the grch37 object already contains all the information we want in a super easy way. Let‚Äôs annotate the results of our shrunken DEA for our Control vs Vampirium comparison:\n\n## Re-run this code if you are unsure that you have the right table\nres_tableCont &lt;- lfcShrink(dds, coef = \"condition_control_vs_vampirium\")\nres_tableCont_tb &lt;- res_tableCont %&gt;%\n    data.frame() %&gt;%\n    rownames_to_column(var=\"gene\") %&gt;% \n    as_tibble()\n\n\n## Return the IDs for the gene symbols in the DE results\nids &lt;- grch38 %&gt;% dplyr::filter(ensgene %in% rownames(res_tableCont))\n\n## Merge the IDs with the results \nres_ids &lt;- inner_join(res_tableCont_tb, ids, by=c(\"gene\"=\"ensgene\"))\n\nhead(res_ids)\n\n\n  \n\n\n\nOur data is now ready to use for functional analysis! We have all the ids necessary to proceed.\n\nExercise 1\n\nCreate a new res_ids object using the annotables package with the human build grch37. NOTE call it res_ids_grch37!\nWhat are the differences between the res_id_ahbobject and the res_ids_grch37?\n\n\nExercise 2\nAnnotate the results of your DEA for Garlicum vs Vampirium with grch38.",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Genomic annotations for functional analyses"
    ]
  },
  {
    "objectID": "develop/08c_FA_GSEA.html",
    "href": "develop/08c_FA_GSEA.html",
    "title": "Functional Class Scoring",
    "section": "",
    "text": "Approximate time: 30 minutes",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Functional Class Scoring"
    ]
  },
  {
    "objectID": "develop/08c_FA_GSEA.html#learning-objectives",
    "href": "develop/08c_FA_GSEA.html#learning-objectives",
    "title": "Functional Class Scoring",
    "section": "Learning Objectives:",
    "text": "Learning Objectives:\n\nDiscuss functional class scoring\nConstruct a GSEA analysis using GO and KEGG gene sets\nExamine results of a GSEA using pathview package",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Functional Class Scoring"
    ]
  },
  {
    "objectID": "develop/08c_FA_GSEA.html#gene-set-enrichment-analysis-using-clusterprofiler-and-pathview",
    "href": "develop/08c_FA_GSEA.html#gene-set-enrichment-analysis-using-clusterprofiler-and-pathview",
    "title": "Functional Class Scoring",
    "section": "Gene set enrichment analysis using clusterProfiler and Pathview",
    "text": "Gene set enrichment analysis using clusterProfiler and Pathview\nUsing the log2 fold changes obtained from the differential expression analysis for every gene, gene set enrichment analysis and pathway analysis can be performed using clusterProfiler and Pathview tools.\nFor a gene set or pathway analysis using clusterProfiler, coordinated differential expression over gene sets is tested instead of changes of individual genes. ‚ÄúGene sets are pre-defined groups of genes, which are functionally related. Commonly used gene sets include those derived from KEGG pathways, Gene Ontology terms, MSigDB, Reactome, or gene groups that share some other functional annotations, etc. Consistent perturbations over such gene sets frequently suggest mechanistic changes‚Äù.\n\nPreparation for GSEA\nclusterProfiler offers several functions to perform GSEA using different genes sets, including but not limited to GO, KEGG, and MSigDb. We will use the KEGG gene sets, which identify genes using their Entrez IDs. Therefore, to perform the analysis, we will need to acquire the Entrez IDs. We will also need to remove the Entrez ID NA values and duplicates (due to gene ID conversion) prior to the analysis:\n\n## Remove any NA values (reduces the data by quite a bit) and duplicates\n\nres_entrez &lt;- dplyr::filter(res_ids, entrez != \"NA\" & duplicated(entrez)==F)\n\nFinally, extract and name the fold changes:\n\n## Extract the foldchanges\nfoldchanges &lt;- res_entrez$log2FoldChange\n\n## Name each fold change with the corresponding Entrez ID\nnames(foldchanges) &lt;- res_entrez$entrez\n\nNext we need to order the fold changes in decreasing order. To do this we‚Äôll use the sort() function, which takes a vector as input. This is in contrast to Tidyverse‚Äôs arrange(), which requires a data frame.\n\n## Sort fold changes in decreasing order\nfoldchanges &lt;- sort(foldchanges, decreasing = TRUE)\n\nhead(foldchanges)\n\n     1297      1501 100996732 107985200      3263      3934 \n 4.182128  3.467430  3.280630  3.280630  3.001757  2.922119 \n\n\n\n\nPerforming GSEA\nTo perform the GSEA using KEGG gene sets with clusterProfiler, we can use the gseKEGG() function:\n\n## GSEA using gene sets from KEGG pathways\ngseaKEGG &lt;- gseKEGG(geneList = foldchanges, # ordered named vector of fold changes (Entrez IDs are the associated names)\n              organism = \"hsa\", # supported organisms listed below\n              pvalueCutoff = 0.05, # padj cutoff value\n              verbose = FALSE)\n\n## Extract the GSEA results\ngseaKEGG_results &lt;- gseaKEGG@result\nhead(gseaKEGG_results)\n\n\n  \n\n\n\n\nNOTE: The organisms with KEGG pathway information are listed here.\n\nHow many pathways are enriched?\nView the enriched pathways:\n\n## Write GSEA results to file\nwrite.csv(gseaKEGG_results, \"../Results/gsea_Cont-Vamp_kegg.csv\", quote=F)\n\n\nNOTE: We will all get different results for the GSEA because the permutations performed use random reordering. If we would like to use the same permutations every time we run a function (i.e.¬†we would like the same results every time we run the function), then we could use the set.seed(123456) function prior to running. The input to set.seed() could be any number, but if you would want the same results, then you would need to use the same number as input.\n\nExplore the GSEA plot of enrichment of one of the pathways in the ranked list:\n\n## Plot the GSEA plot for a single enriched pathway:\ngseaplot(gseaKEGG, geneSetID = gseaKEGG_results$ID[1], title = gseaKEGG_results$Description[1])\n\n\n\n\n\n\n\n\nIn this plot, the lines in plot represent the genes in the gene set, and where they occur among the log2 fold changes. The largest positive log2 fold changes are on the left-hand side of the plot, while the largest negative log2 fold changes are on the right. The top plot shows the magnitude of the log2 fold changes for each gene, while the bottom plot shows the running sum, with the enrichment score peaking at the red dotted line (which is among the negative log2 fold changes).\nUse the Pathview R package to integrate the KEGG pathway data from clusterProfiler into pathway images:\n\n## Output images for a single significant KEGG pathway\npathview(gene.data = foldchanges,\n              pathway.id = gseaKEGG_results$ID[1],\n              species = \"hsa\",\n              limit = list(gene = 2, # value gives the max/min limit for foldchanges\n              cpd = 1))\n\n\nNOTE: Printing out Pathview images for all significant pathways can be easily performed as follows:\n\n## Output images for all significant KEGG pathways\nget_kegg_plots &lt;- function(x) {\n   pathview(gene.data = foldchanges, \n            pathway.id = gseaKEGG_results$ID[x], \n            species = \"hsa\",\n            limit = list(gene = 2, cpd = 1))\n}\n\npurrr::map(1:length(gseaKEGG_results$ID), \n           get_kegg_plots)\n\n\nInstead of exploring enrichment of KEGG gene sets, we can also explore the enrichment of BP Gene Ontology terms using gene set enrichment analysis:\n\n# GSEA using gene sets associated with BP Gene Ontology terms\ngseaGO &lt;- gseGO(geneList = foldchanges, \n              OrgDb = org.Hs.eg.db, \n              ont = 'BP', \n              minGSSize = 20, \n              pvalueCutoff = 0.05,\n              verbose = FALSE) \n\ngseaGO_results &lt;- gseaGO@result\nhead(gseaGO_results)\n\n\n  \n\n\n\n\ngseaplot(gseaGO, geneSetID = gseaGO_results$ID[1], title = gseaGO_results$Description[1])\n\n\n\n\n\n\n\n\nThere are other gene sets available for GSEA analysis in clusterProfiler (Disease Ontology, Reactome pathways, etc.) You can check out this link for more!\n\nExercise 1\nRun a Disease Ontology (DO) GSEA analysis using the gseDO() function. NOTE the arguments are very similar to the previous examples.\n\nDo you find anything interesting?\n\n\nExercise 2\nRun an GSE on the results of the DEA for Garlicum vs Vampirium samples. Remember to use the annotated results!",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Functional Class Scoring"
    ]
  },
  {
    "objectID": "develop/05c_count_normalization.html",
    "href": "develop/05c_count_normalization.html",
    "title": "Count normalization with DESeq2",
    "section": "",
    "text": "Approximate time: 40 minutes",
    "crumbs": [
      "Data analyses",
      "Quality control",
      "Count normalization with DESeq2"
    ]
  },
  {
    "objectID": "develop/05c_count_normalization.html#learning-objectives",
    "href": "develop/05c_count_normalization.html#learning-objectives",
    "title": "Count normalization with DESeq2",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nBecome familiar with the DESeqDataSet object\nUnderstand how to normalize counts using DESeq2",
    "crumbs": [
      "Data analyses",
      "Quality control",
      "Count normalization with DESeq2"
    ]
  },
  {
    "objectID": "develop/05c_count_normalization.html#normalization",
    "href": "develop/05c_count_normalization.html#normalization",
    "title": "Count normalization with DESeq2",
    "section": "Normalization",
    "text": "Normalization\nThe first step in the DE analysis workflow is count normalization, which is necessary to make accurate comparisons of gene expression between samples. Let‚Äôs try to run an easy example!\n\nExercise 1\nDetermine the normalized (median of ratios) counts for your gene of interest, PD1, given the raw counts and size factors below.\nNOTE: You will need to run the code below to generate the raw counts dataframe (PD1) and the size factor vector (size_factors), then use these objects to determine the normalized counts values:\n\n# Raw counts for PD1\nPD1 &lt;- t(c(21, 58, 17, 97, 83, 10)) %&gt;% \n  as_tibble() %&gt;%\n  rename_all(~paste0(\"Sample\", 1:6))\n\n\n# Size factors for each sample\nsize_factors &lt;- c(1.32, 0.70, 1.04, 1.27, 1.11, 0.85)\n\nYour code here:",
    "crumbs": [
      "Data analyses",
      "Quality control",
      "Count normalization with DESeq2"
    ]
  },
  {
    "objectID": "develop/05c_count_normalization.html#count-normalization-of-the-vampirium-dataset-using-deseq2",
    "href": "develop/05c_count_normalization.html#count-normalization-of-the-vampirium-dataset-using-deseq2",
    "title": "Count normalization with DESeq2",
    "section": "Count normalization of the Vampirium dataset using DESeq2",
    "text": "Count normalization of the Vampirium dataset using DESeq2\nNow that we know the theory of count normalization, we will normalize the counts for the Vampirium dataset using DESeq2. This requires a few steps:\n\nEnsure the row names of the metadata dataframe are present and in the same order as the column names of the counts dataframe.\nCreate a DESeqDataSet object\nGenerate the normalized counts\n\n\n1. Match the metadata and counts data\nWe should always make sure that we have sample names that match between the two files, and that the samples are in the right order. DESeq2 will output an error if this is not the case. Since we built our txi object from our metadata, everything should be OK.\n\n### Check that sample names match in both files\nall(colnames(txi$counts) %in% meta$sample)\n\n[1] TRUE\n\nall(colnames(txi$counts) == meta$sample)\n\n[1] TRUE\n\n\nIf your data did not match, you could use the match() function to rearrange them to be matching. match() function will take two arguments and find in which order the indexes of the second argument match the first argument.\n\na &lt;- c(\"a\",\"b\",\"c\")\nb &lt;- c(\"b\",\"c\",\"a\")\n\nreorder &lt;- match(a,b)\nreorder\n\n[1] 3 1 2\n\nb[reorder]\n\n[1] \"a\" \"b\" \"c\"\n\n\n\nExercise 2\nSuppose we had sample names matching in the txi object and metadata file, but they were out of order. Write the line(s) of code required make the meta_random dataframe with rows ordered such that they were identical to the column names of the txi.\n\n# randomize metadata rownames\nmeta_random &lt;- meta[sample(1:nrow(meta)),]\n\nYour code here:\n\n#your code here\n\n\n\n\n2. Create DESEq2 object\nLet‚Äôs start by creating the DESeqDataSet object, and then we can talk a bit more about what is stored inside it. To create the object, we will need the txi object and the metadata table as input (colData argument). We will also need to specify a design formula. The design formula specifies which column(s) of our metadata we want to use for statistical testing and modeling (more about that later!). For our dataset we only have one column we are interested in, which is condition. This column has three factor levels, which tells DESeq2 that for each gene we want to evaluate gene expression change with respect to these different levels.\nIt is very important to establish beforehand which sample type will be our ‚Äúbase‚Äù or ‚Äúreference‚Äù level. If nothing is changed, DESeq2 will assume that our reference samples will be the first sample type (in alphabetical order). You can check this using the factor() function.\n\nfactor(meta$condition)\n\n[1] control   control   control   vampirium vampirium vampirium garlicum \n[8] garlicum \nLevels: control garlicum vampirium\n\n\nWhile in a normal experiment we would use control samples as our reference, in our case we are interested in both checking the differences between control vs.¬†vampirium and garlicum vs.¬†vampirium. Thus, it would be much more convenient to reorganize our factor base level to vampirium. We can do this also with the factor() function, using the levels = argument.\n\nmeta$condition = factor(meta$condition, levels = c(\"vampirium\", \"control\", \"garlicum\"))\nfactor(meta$condition)\n\n[1] control   control   control   vampirium vampirium vampirium garlicum \n[8] garlicum \nLevels: vampirium control garlicum\n\n\nWe can see now that vampirium is the first factor! Meaning that it will be interpreted by DESeq as our reference sample type.\nOur count matrix input is stored in the txi list object. So we need to specify that using the DESeqDataSetFromTximport() function, which will extract the counts component and round the values to the nearest whole number.\n\n# colData argument requires rownames in order to assess matching sample names\n# meta is a tibble object from tidyverse, so we neeed to add rownames.\n# If you do not do this and the samples do not match, you will add wrong info!\n\ndds &lt;- DESeqDataSetFromTximport(txi,\n                                   colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)\n\n\nNOTE: The warning from the chunk before is telling us that we have setup our vampirium samples as reference, instead of control! This is exactly what we wanted.\n\n\nNOTE: If you did not create pseudocounts, but a count matrix from aligned BAM files and tools such as featurecounts, you would want to use the DESeqDataSetFromMatrix() function.\n\n\n## DO NOT RUN!\n## Create DESeq2Dataset object from traditional count matrix\ndds &lt;- DESeqDataSetFromMatrix(countData = \"../Data/Vampirium_counts_traditional.tsv\", \n                              colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)\n\nYou can use DESeq-specific functions to access the different slots and retrieve information, if you wish. For example, suppose we wanted the original count matrix we would use counts():\n\nhead(counts(dds))\n\n                control_3 control_2 control_1 vampirium_3 vampirium_2\nENSG00000000005        24        28        28          22          38\nENSG00000000419      1009      1421      1634        1311        1896\nENSG00000000457       341       400       525         342         584\nENSG00000000938         0         1         1           0           0\nENSG00000000971        10        21         1           4          22\nENSG00000001036      1887      2550      3078        1659        2850\n                vampirium_1 garlicum_3 garlicum_2\nENSG00000000005          24         13         34\nENSG00000000419        2108       1484       2544\nENSG00000000457         630        549        920\nENSG00000000938           0          0          2\nENSG00000000971           1          2          4\nENSG00000001036        3013       2624       4353\n\n\nAs we go through the workflow we will use the relevant functions to check what information gets stored inside our object.\n\nPre-filtering\nWhile it is not necessary to pre-filter low count genes before running the DESeq2 functions, there are two reasons which make pre-filtering useful:\n\nBy removing rows in which there are very few reads, we reduce the memory size of the dds data object, and we increase the speed of the transformation and testing functions within DESeq2.\nIt can also improve visualizations, as features with no information for differential expression are not plotted.\n\nHere we perform a minimal pre-filtering to keep only rows that have at least 10 reads total.\n\nkeep &lt;- rowSums(counts(dds)) &gt;= 10\ndds &lt;- dds[keep,]\n\n\n\n\n3. Generate the Vampirium normalized counts\nThe next step is to normalize the count data in order to be able to make fair gene comparisons between samples.\nTo perform the median of ratios method of normalization, DESeq2 has a single estimateSizeFactors() function that will generate size factors for us. We will use the function in the example below, but in a typical RNA-seq analysis this step is automatically performed by the DESeq() function, which we will see later.\n\ndds &lt;- estimateSizeFactors(dds)\n\nBy assigning the results back to the dds object we are filling in the slots of the DESeqDataSet object with the appropriate information. We can take a look at the normalization factor applied to each sample using:\n\nsizeFactors(dds)\n\n  control_3   control_2   control_1 vampirium_3 vampirium_2 vampirium_1 \n  0.7500980   0.9580056   1.1134270   0.6565847   1.1418466   1.2185305 \n garlicum_3  garlicum_2 \n  0.9327493   1.5527685 \n\n\nNow, to retrieve the normalized counts matrix from dds, we use the counts() function and add the argument normalized=TRUE.\n\nnormalized_counts &lt;- counts(dds, normalized=TRUE)\nhead(normalized_counts)\n\n                 control_3  control_2    control_1 vampirium_3 vampirium_2\nENSG00000000005   31.99582   29.22739   25.1475854   33.506721    33.27943\nENSG00000000419 1345.15751 1483.28994 1467.5412362 1996.695993  1660.46823\nENSG00000000457  454.60725  417.53411  471.5172271  520.877216   511.45224\nENSG00000000971   13.33159   21.92054    0.8981281    6.092131    19.26704\nENSG00000001036 2515.67119 2661.77997 2764.4381426 2526.711406  2495.95699\nENSG00000001084 2852.96044 2820.44293 3023.9971495 2613.524275  2751.68311\n                 vampirium_1  garlicum_3  garlicum_2\nENSG00000000005   19.6958544   13.937293   21.896374\nENSG00000000419 1729.9525449 1590.995601 1638.363998\nENSG00000000457  517.0161780  588.582605  592.490125\nENSG00000000971    0.8206606    2.144199    2.576044\nENSG00000001036 2472.6503879 2813.188988 2803.379907\nENSG00000001084 2516.1453997 3677.301154 3390.717944\n\n\nWe can save this normalized data matrix to file for later use:\n\nwrite.table(normalized_counts, file=\"../Results/normalized_counts.txt\", sep=\"\\t\", quote=F)",
    "crumbs": [
      "Data analyses",
      "Quality control",
      "Count normalization with DESeq2"
    ]
  },
  {
    "objectID": "develop/cards/extraCards/SamueleSoraggi.html",
    "href": "develop/cards/extraCards/SamueleSoraggi.html",
    "title": "Samuele Soraggi",
    "section": "",
    "text": "Samuele is a Sandbox data scientist based at the university of Aarhus. During his academic activity he has gained experience in population genomics, transcriptomics, single cell multiomics and spans his knowledge across various themes of advanced computational statistics."
  },
  {
    "objectID": "develop/workshop_RNAseq_nov2024.html#access-sandbox-resources",
    "href": "develop/workshop_RNAseq_nov2024.html#access-sandbox-resources",
    "title": "Welcome to the bulk RNAseq workshop",
    "section": "Access Sandbox resources",
    "text": "Access Sandbox resources\nOur first choice is to provide all the training materials, tutorials, and tools as interactive apps on UCloud, the supercomputer located at the University of Southern Denmark. Anyone using these resources needs the following:\n\na Danish university ID so you can sign on to UCloud via WAYF1.\n\n¬†\n\n for UCloud Access click here \n\n¬†\n\nbasic ability to navigate in Linux/RStudio/Jupyter. You don‚Äôt need to be an expert, but it is beyond our ambitions (and course material) to teach you how to code from zero and how to run analyses simultaneously. We recommend a basic R or Python course before diving in.\nFor workshop participants: Use our invite link to the correct UCloud workspace that will be shared on the day of the workshop. This way, we can provide you with compute resources for the active sessions of the workshop2 Click the link below after your first uCloud access and accept the invite that shows.\n\n¬†\n\n Invite link to uCloud workspace \n\n¬†\n\nAdditional files needed for exercises from Day 1 - Lecture 2 (QC report files)\n\n\n Download QC files \n\n\nCourse slides\n\n\n Download course slides \n\n¬†\n\nCOURSE EVALUATION SURVEY - The Novo Nordisk Foundation funds the Sandbox project and is interested in the outcomes of our training activities, so we really appreciate your responses!\n\n¬†\n\n Evaluation survey link"
  },
  {
    "objectID": "develop/workshop_RNAseq_nov2024.html#transcriptomics-apps",
    "href": "develop/workshop_RNAseq_nov2024.html#transcriptomics-apps",
    "title": "Welcome to the bulk RNAseq workshop",
    "section": "Transcriptomics apps",
    "text": "Transcriptomics apps\nHigh-Performance Computing (HPC) platforms are essential for large-scale data analysis. Therefore, we will run our bulk RNA-seq analyses on one of the national HPC platforms, UCloud.\n\nIf you want to review the course material, visit our website where you will find the content for all the lectures.\n\nZenodo link to download the material (slides, assignments, data, etc.) for this workshop here.\nTo get started with our transcriptomics app, follow the UCloud setup guidelines. This will help you set up a new job and repeat the exercises on your own.\nTo run the nf-core RNAseq pipeline follow the instructions here. This will generate the output from the preprocessing pipeline.\n\n\n\n\nTranscriptomics Sandbox: Our sandbox for bulk or single-cell RNA sequencing analysis provides stand-alone analysis and visualization tools.\n\n\n¬†\nWe are developing other apps. If you are interested, explore the modules section on our website!"
  },
  {
    "objectID": "develop/workshop_RNAseq_nov2024.html#discussion-and-feedback",
    "href": "develop/workshop_RNAseq_nov2024.html#discussion-and-feedback",
    "title": "Welcome to the bulk RNAseq workshop",
    "section": "Discussion and feedback",
    "text": "Discussion and feedback\nWe hope you enjoyed the workshop. If you have broader questions, suggestions, or concerns, now is the time to raise them! Remember that you can check out longer versions of our tutorials as well as other topics and tools in each of the Sandbox modules. We regularly run workshops on a variety of health data science topics that you can also check out (follow our news here).\nAs data scientists, we also would be happy for some quantifiable info and feedback - we want to build things that the Danish health data science community is excited to use.\n\n¬†\n\n\n\n\n\n\n\nNice meeting you and we hope to see you again!"
  },
  {
    "objectID": "develop/workshop_RNAseq_nov2024.html#footnotes",
    "href": "develop/workshop_RNAseq_nov2024.html#footnotes",
    "title": "Welcome to the bulk RNAseq workshop",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOther institutions (e.g.¬†hospitals, libraries, ‚Ä¶) can log on through WAYF. See all institutions here‚Ü©Ô∏é\nTo use Sandbox materials outside of the workshop: remember that each new user has hundreds of hours of free computing credit and around 50GB of free storage, which can be used to run any uCloud software. If you run out of credit (which takes a long time) you‚Äôll need to check with the local DeiC office at your university about how to request compute hours on UCloud. Contact us at the Sandbox if you need help or want more information.‚Ü©Ô∏é"
  },
  {
    "objectID": "develop/07_extra_contrast_design.html",
    "href": "develop/07_extra_contrast_design.html",
    "title": "DESeq samples comparison: contrast designs",
    "section": "",
    "text": "Approximate time: 40 minutes",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#learning-objectives",
    "href": "develop/07_extra_contrast_design.html#learning-objectives",
    "title": "DESeq samples comparison: contrast designs",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nDemonstrate the use of the design formula with simple and complex designs\nConstruct R code to execute the differential expression analysis workflow with DESeq2",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#design-formula",
    "href": "develop/07_extra_contrast_design.html#design-formula",
    "title": "DESeq samples comparison: contrast designs",
    "section": "Design formula",
    "text": "Design formula\nA design formula tells the statistical software the known sources of variation to control for, as well as, the factor of interest to test for during differential expression testing. For example, if you know that sex is a significant source of variation in your data, then sex should be included in your model. The design formula should have all of the factors in your metadata that account for major sources of variation in your data. The last factor entered in the formula should be the condition of interest.\nFor example, suppose you have the following metadata:\n\nmetadata &lt;- data.frame(row.names = paste0(\"sample\", c(1:12)), \n           condition = rep(c(rep(\"control\",3), rep(\"treat\",3)), 2),\n           bloodtype = c(rep(\"bloodO\",6), rep(\"bloodA\",6)),\n           patient = rep(paste0(\"patient\",c(1:3)), 4)\n)\n\nmetadata\n\n\n  \n\n\n\nIf you want to examine the expression differences between condition, and you know that major sources of variation include bloodtype and patient, then your design formula would be:\ndesign = ~ bloodtype + patient + condition\nThe tilde (~) should always precede your factors and tells DESeq2 to model the counts using the following formula. Note the factors included in the design formula need to match the column names in the metadata.\nIn this tutorial we show a general and flexible way to define contrasts, and is often useful for more complex contrasts or when the design of the experiment is imbalanced (e.g.¬†different number of replicates in each group). Although we focus on DESeq2, the approach can also be used with the other popular package edgeR.\nEach section below covers a particular experimental design, from simpler to more complex ones. The first chunk of code in each section is to simulate data, which has no particular meaning and is only done in order to have a DESeqDataSet object with the right kind of variables for each example. In practice, users can ignore this step as they should have created a DESeqDataSet object from their own data following the instructions in the vignette.",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#one-factor-two-levels",
    "href": "develop/07_extra_contrast_design.html#one-factor-two-levels",
    "title": "DESeq samples comparison: contrast designs",
    "section": "One factor, two levels",
    "text": "One factor, two levels\n\n# simulate data\ndds &lt;- makeExampleDESeqDataSet(n = 1000, m = 6, betaSD = 2)\ndds$condition &lt;- factor(rep(c(\"control\", \"treat\"), each = 3))\n\nFirst we can look at our sample information:\n\ncolData(dds)\n\nDataFrame with 6 rows and 1 column\n        condition\n         &lt;factor&gt;\nsample1   control\nsample2   control\nsample3   control\nsample4   treat  \nsample5   treat  \nsample6   treat  \n\n\nOur factor of interest is condition and so we define our design and run the DESeq model fitting routine:\n\ndesign(dds) &lt;- ~ 1 + condition # or just `~ condition`\ndds &lt;- DESeq(dds) # equivalent to edgeR::glmFit()\n\nThen check what coefficients DESeq estimated:\n\nresultsNames(dds)\n\n[1] \"Intercept\"                  \"condition_treat_vs_control\"\n\n\nWe can see that we have a coefficient for our intercept and coefficient for the effect of treat (i.e.¬†differences between treat versus control).\nUsing the more standard syntax, we can obtain the results for the effect of treat as such:\n\nres1 &lt;- results(dds, contrast = list(\"condition_treat_vs_control\"))\nres1\n\nlog2 fold change (MLE): condition_treat_vs_control effect \nWald test p-value: condition_treat_vs_control effect \nDataFrame with 1000 rows and 6 columns\n          baseMean log2FoldChange     lfcSE       stat      pvalue        padj\n         &lt;numeric&gt;      &lt;numeric&gt; &lt;numeric&gt;  &lt;numeric&gt;   &lt;numeric&gt;   &lt;numeric&gt;\ngene1      6.99478       0.827958  1.164165   0.711203 4.76958e-01 0.602507693\ngene2    111.94803       1.425660  0.461628   3.088334 2.01282e-03 0.007743544\ngene3     11.69847      -0.625382  1.120365  -0.558195 5.76711e-01 0.687474997\ngene4     61.31487      -3.146315  0.760285  -4.138335 3.49836e-05 0.000234371\ngene5      2.37825      -3.811160  2.626004  -1.451315 1.46692e-01 0.260588553\n...            ...            ...       ...        ...         ...         ...\ngene996    2.25406      0.1704427  2.115898  0.0805534 9.35797e-01 9.59501e-01\ngene997  288.94559      0.0622391  0.394597  0.1577286 8.74671e-01 9.21175e-01\ngene998  895.65622      3.1721701  0.416109  7.6234095 2.47062e-14 7.93153e-13\ngene999   35.35022      0.5104178  0.576830  0.8848664 3.76229e-01 5.02538e-01\ngene1000   4.37311     -2.6796029  1.988946 -1.3472474 1.77901e-01 2.96820e-01\n\n\nThe above is a simple way to obtain the results of interest. But it is worth understanding how DESeq is getting to these results by looking at the model‚Äôs matrix. DESeq defines the model matrix using base R functionality:\n\nmodel.matrix(design(dds), colData(dds))\n\n        (Intercept) conditiontreat\nsample1           1              0\nsample2           1              0\nsample3           1              0\nsample4           1              1\nsample5           1              1\nsample6           1              1\nattr(,\"assign\")\n[1] 0 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$condition\n[1] \"contr.treatment\"\n\n\nWe can see that R coded condition as a dummy variable, with an intercept (common to all samples) and a ‚Äúconditiontreat‚Äù variable, which adds the effect of treat to samples 4-6.\nWe can actually set our contrasts in DESeq2::results() using a numeric vector. The way it works is to define a vector of ‚Äúweights‚Äù for the coefficient(s) we want to test for. In this case, we have (Intercept) and conditiontreat as our coefficients (see model matrix above), and we want to test for the effect of treat, so our contrast vector would be c(0, 1). In other words, we don‚Äôt care about the value of (Intercept) (so it has a weight of 0), and we‚Äôre only interested in the effect of treat (so we give it a weight of 1).\nIn this case the design is very simple, so we could define our contrast vector ‚Äúmanually‚Äù. But for complex designs this can get more difficult to do, so it‚Äôs worth mentioning the general way in which we can define this. For any contrast of interest, we can follow three steps:\n\nGet the model matrix\nSubset the matrix for each group of interest and calculate its column means - this results in a vector of coefficients for each group\nSubtract the group vectors from each other according to the comparison we‚Äôre interested in\n\nLet‚Äôs see this example in action:\n\n# get the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\nmod_mat\n\n        (Intercept) conditiontreat\nsample1           1              0\nsample2           1              0\nsample3           1              0\nsample4           1              1\nsample5           1              1\nsample6           1              1\nattr(,\"assign\")\n[1] 0 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$condition\n[1] \"contr.treatment\"\n\n\n\n# calculate the vector of coefficient weights in the treat\ntreat &lt;- colMeans(mod_mat[dds$condition == \"treat\", ])\ntreat\n\n   (Intercept) conditiontreat \n             1              1 \n\n\n\n# calculate the vector of coefficient weights in the control\ncontrol &lt;- colMeans(mod_mat[dds$condition == \"control\", ])\ncontrol\n\n   (Intercept) conditiontreat \n             1              0 \n\n\n\n# The contrast we are interested in is the difference between treat and control\ntreat - control\n\n   (Intercept) conditiontreat \n             0              1 \n\n\nThat last step is where we define our contrast vector, and we can give this directly to the results function:\n\n# get the results for this contrast\nres2 &lt;- results(dds, contrast = treat - control)\n\nThis gives us exactly the same results as before, which we can check for example by plotting the log-fold-changes between the first and second approach:\n\nplot(res1$log2FoldChange, res2$log2FoldChange)",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#recoding-the-design",
    "href": "develop/07_extra_contrast_design.html#recoding-the-design",
    "title": "DESeq samples comparison: contrast designs",
    "section": "Recoding the design",
    "text": "Recoding the design\nOften, we can use different model matrices that essentially correspond to the same design. For example, we could recode our design above by removing the intercept:\n\ndesign(dds) &lt;- ~ 0 + condition\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n\n[1] \"conditioncontrol\" \"conditiontreat\"  \n\n\nIn this case we get a coefficient corresponding to the average expression in control and the average expression in the treat (rather than the difference between treat and control).\nIf we use the same contrast trick as before (using the model matrix), we can see the result is the same:\n\n# get the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\nmod_mat\n\n        conditioncontrol conditiontreat\nsample1                1              0\nsample2                1              0\nsample3                1              0\nsample4                0              1\nsample5                0              1\nsample6                0              1\nattr(,\"assign\")\n[1] 1 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$condition\n[1] \"contr.treatment\"\n\n\n\n# calculate weights for coefficients in each condition\ntreat &lt;- colMeans(mod_mat[which(dds$condition == \"treat\"), ])\ncontrol &lt;- colMeans(mod_mat[which(dds$condition == \"control\"), ])\n# get the results for our contrast\nres3 &lt;- results(dds, contrast = treat - control)\n\nAgain, the results are essentially the same:\n\nplot(res1$log2FoldChange, res3$log2FoldChange)\n\n\n\n\n\n\n\n\nIn theory there‚Äôs no difference between these two ways of defining our design. The design with an intercept is more common, but for the purposes of understanding what‚Äôs going on, it‚Äôs sometimes easier to look at models without intercept.",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#one-factor-three-levels",
    "href": "develop/07_extra_contrast_design.html#one-factor-three-levels",
    "title": "DESeq samples comparison: contrast designs",
    "section": "One factor, three levels",
    "text": "One factor, three levels\n\n# simulate data\ndds &lt;- makeExampleDESeqDataSet(n = 1000, m = 9, betaSD = 2)\ndds$condition &lt;- NULL\ndds$bloodtype &lt;- factor(rep(c(\"bloodA\", \"bloodB\", \"bloodO\"), each = 3))\ndds$bloodtype &lt;- relevel(dds$bloodtype, \"bloodO\")\n\nFirst we can look at our sample information:\n\ncolData(dds)\n\nDataFrame with 9 rows and 1 column\n        bloodtype\n         &lt;factor&gt;\nsample1    bloodA\nsample2    bloodA\nsample3    bloodA\nsample4    bloodB\nsample5    bloodB\nsample6    bloodB\nsample7    bloodO\nsample8    bloodO\nsample9    bloodO\n\n\nAs in the previous example, we only have one factor of interest, bloodtype, and so we define our design and run the DESeq as before:\n\ndesign(dds) &lt;- ~ 1 + bloodtype\ndds &lt;- DESeq(dds)\n# check the coefficients estimated by DEseq\nresultsNames(dds)\n\n[1] \"Intercept\"                  \"bloodtype_bloodA_vs_bloodO\"\n[3] \"bloodtype_bloodB_vs_bloodO\"\n\n\nWe see that now we have 3 coefficients:\n\n‚ÄúIntercept‚Äù corresponds to bloodO bloodtype (our reference level)\n‚Äúbloodtype_bloodA_vs_bloodO‚Äù corresponds to the difference between the reference level and bloodA\n‚Äúbloodtype_bloodB_vs_bloodO‚Äù corresponds to the difference between the reference level and bloodB\n\nWe could obtain the difference between bloodO and any of the two bloodtypes easily:\n\nres1_bloodA_bloodO &lt;- results(dds, contrast = list(\"bloodtype_bloodA_vs_bloodO\"))\nres1_bloodB_bloodO &lt;- results(dds, contrast = list(\"bloodtype_bloodB_vs_bloodO\"))\n\nFor comparing bloodA vs bloodB, however, we need to compare two coefficients with each other to check whether they are themselves different (check the slide to see the illustration). This is how the standard DESeq syntax would be:\n\nres1_bloodA_bloodB &lt;- results(dds, contrast = list(\"bloodtype_bloodA_vs_bloodO\", \n                                                 \"bloodtype_bloodB_vs_bloodO\"))\n\nHowever, following our three steps detailed in the first section, we can define our comparisons from the design matrix:\n\n# define the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\nmod_mat\n\n        (Intercept) bloodtypebloodA bloodtypebloodB\nsample1           1               1               0\nsample2           1               1               0\nsample3           1               1               0\nsample4           1               0               1\nsample5           1               0               1\nsample6           1               0               1\nsample7           1               0               0\nsample8           1               0               0\nsample9           1               0               0\nattr(,\"assign\")\n[1] 0 1 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$bloodtype\n[1] \"contr.treatment\"\n\n\n\n# calculate coefficient vectors for each group\nbloodA &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\", ])\nbloodB &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodB\", ])\nbloodO &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\", ])\n\nAnd we can now define any contrasts we want:\n\n# obtain results for each pairwise contrast\nres2_bloodA_bloodO &lt;- results(dds, contrast = bloodA - bloodO)\nres2_bloodB_bloodO &lt;- results(dds, contrast = bloodB - bloodO)\nres2_bloodA_bloodB &lt;- results(dds, contrast = bloodA - bloodB)\n# plot the results from the two approaches to check that they are identical\nplot(res1_bloodA_bloodO$log2FoldChange, res2_bloodA_bloodO$log2FoldChange)\n\n\n\n\n\n\n\nplot(res1_bloodB_bloodO$log2FoldChange, res2_bloodB_bloodO$log2FoldChange)\n\n\n\n\n\n\n\nplot(res1_bloodA_bloodB$log2FoldChange, res2_bloodA_bloodB$log2FoldChange)",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#a-and-b-against-o",
    "href": "develop/07_extra_contrast_design.html#a-and-b-against-o",
    "title": "DESeq samples comparison: contrast designs",
    "section": "A and B against O",
    "text": "A and B against O\nWith this approach, we could even define a more unusual contrast, for example to find genes that differ between A and B against and O samples:\n\n# define vector of coefficients for A_B samples\nA_B &lt;- colMeans(mod_mat[dds$bloodtype %in% c(\"bloodA\", \"bloodB\"),])\n# Our contrast of interest is\nA_B - bloodO\n\n    (Intercept) bloodtypebloodA bloodtypebloodB \n            0.0             0.5             0.5 \n\n\nNotice the contrast vector in this case assigns a ‚Äúweight‚Äù of 0.5 to each of bloodtypebloodA and bloodtypebloodB. This is equivalent to saying that we want to consider the average of bloodA and bloodB expression. In fact, we could have also defined our contrast vector like this:\n\n# average of bloodA and bloodB minus bloodO\n(bloodA + bloodB)/2 - bloodO\n\n    (Intercept) bloodtypebloodA bloodtypebloodB \n            0.0             0.5             0.5 \n\n\nTo obtain our results, we use the results() function as before:\n\n# get the results between A_B and bloodA\nres2_AB &lt;- results(dds, contrast = A_B - bloodO)",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#extra-why-not-define-a-new-group-in-our-design-matrix",
    "href": "develop/07_extra_contrast_design.html#extra-why-not-define-a-new-group-in-our-design-matrix",
    "title": "DESeq samples comparison: contrast designs",
    "section": "Extra: why not define a new group in our design matrix?",
    "text": "Extra: why not define a new group in our design matrix?\nFor this last example (A_B vs bloodO), we may have considered creating a new variable in our column data:\n\ndds$A_B &lt;- factor(dds$bloodtype %in% c(\"bloodA\", \"bloodB\"))\ncolData(dds)\n\nDataFrame with 9 rows and 3 columns\n        bloodtype sizeFactor      A_B\n         &lt;factor&gt;  &lt;numeric&gt; &lt;factor&gt;\nsample1    bloodA   0.964674    TRUE \nsample2    bloodA   0.917232    TRUE \nsample3    bloodA   0.895324    TRUE \nsample4    bloodB   0.995566    TRUE \nsample5    bloodB   0.921173    TRUE \nsample6    bloodB   1.182643    TRUE \nsample7    bloodO   1.141209    FALSE\nsample8    bloodO   1.106591    FALSE\nsample9    bloodO   1.156398    FALSE\n\n\nand then re-run DESeq with a new design:\n\ndesign(dds) &lt;- ~ 1 + A_B\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n\n[1] \"Intercept\"         \"A_B_TRUE_vs_FALSE\"\n\n\n\nres1_A_B &lt;- results(dds, contrast = list(\"A_B_TRUE_vs_FALSE\"))\n\nHowever, in this model the gene dispersion is estimated together for bloodA and bloodB samples as if they were replicates of each other, which may result in inflated/deflated estimates. Instead, our approach above estimates the error within each of those groups.\nTo check the difference one could compare the two approaches visually:\n\n# compare the log-fold-changes between the two approaches\nplot(res1_A_B$log2FoldChange, res2_AB$log2FoldChange)\nabline(0, 1, col = \"brown\", lwd = 2)\n\n\n\n\n\n\n\n\n\n# compare the errors between the two approaches\nplot(res1_A_B$lfcSE, res2_AB$lfcSE)\nabline(0, 1, col = \"brown\", lwd = 2)",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#two-factors-with-interaction",
    "href": "develop/07_extra_contrast_design.html#two-factors-with-interaction",
    "title": "DESeq samples comparison: contrast designs",
    "section": "Two factors with interaction",
    "text": "Two factors with interaction\n\n# simulate data\ndds &lt;- makeExampleDESeqDataSet(n = 1000, m = 12, betaSD = 2)\ndds$bloodtype &lt;- factor(rep(c(\"bloodO\", \"bloodA\"), each = 6))\ndds$bloodtype &lt;- relevel(dds$bloodtype, \"bloodO\")\ndds$condition &lt;- factor(rep(c(\"treat\", \"control\"), 6))\ndds &lt;- dds[, order(dds$bloodtype, dds$condition)]\ncolnames(dds) &lt;- paste0(\"sample\", 1:ncol(dds))\n\nFirst let‚Äôs look at our sample information:\n\ncolData(dds)\n\nDataFrame with 12 rows and 2 columns\n         condition bloodtype\n          &lt;factor&gt;  &lt;factor&gt;\nsample1    control    bloodO\nsample2    control    bloodO\nsample3    control    bloodO\nsample4    treat      bloodO\nsample5    treat      bloodO\n...            ...       ...\nsample8    control    bloodA\nsample9    control    bloodA\nsample10   treat      bloodA\nsample11   treat      bloodA\nsample12   treat      bloodA\n\n\nThis time we have two factors of interest, and we want to model both with an interaction (i.e.¬†we assume that bloodA and bloodO samples may respond differently to treat/control). We define our design accordingly and fit the model:\n\ndesign(dds) &lt;- ~ 1 + bloodtype + condition + bloodtype:condition\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n\n[1] \"Intercept\"                      \"bloodtype_bloodA_vs_bloodO\"    \n[3] \"condition_treat_vs_control\"     \"bloodtypebloodA.conditiontreat\"\n\n\nBecause we have two factors and an interaction, the number of comparisons we can do is larger. Using our three-step approach from the model matrix, we do things exactly as we‚Äôve been doing so far:\n\n# get the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\n# Define coefficient vectors for each condition\nbloodO_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" & dds$condition == \"control\", ])\nbloodO_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" & dds$condition == \"treat\", ])\nbloodA_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" & dds$condition == \"control\", ])\nbloodA_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" & dds$condition == \"treat\", ])\n\nWe are now ready to define any contrast of interest from these vectors (for completeness we show the equivalent syntax using the coefficient‚Äôs names from DESeq).\nbloodA vs bloodO (in the control):\n\nres1 &lt;- results(dds, contrast = bloodA_control - bloodO_control)\n# or equivalently\nres2 &lt;- results(dds, contrast = list(\"bloodtype_bloodA_vs_bloodO\"))\n\nbloodA vs bloodO (in the treatment):\n\nres1 &lt;- results(dds, contrast = bloodO_treat - bloodA_treat)\n# or equivalently\nres2 &lt;- results(dds, contrast = list(c(\"bloodtype_bloodA_vs_bloodO\",\n                                       \"bloodtypebloodA.conditiontreat\")))\n\ntreat vs control (for bloodtypes O):\n\nres1 &lt;- results(dds, contrast = bloodO_treat - bloodO_control)\n# or equivalently\nres2 &lt;- results(dds, contrast = list(c(\"condition_treat_vs_control\")))\n\ntreat vs control (for bloodtypes A):\n\nres1 &lt;- results(dds, contrast = bloodA_treat - bloodA_control)\n# or equivalently\nres2 &lt;- results(dds, contrast = list(c(\"condition_treat_vs_control\", \n                                       \"bloodtypebloodA.conditiontreat\")))\n\nInteraction between bloodtype and condition\nI.e. do bloodAs and bloodOs respond differently to the treatment?\n\nres1 &lt;- results(dds, \n                contrast = (bloodA_treat - bloodA_control) - (bloodO_treat - bloodO_control))\n# or equivalently\nres2 &lt;- results(dds, contrast = list(\"bloodtypebloodA.conditiontreat\"))\n\nIn conclusion, although we can define these contrasts using DESeq coefficient names, it is somewhat more explicit (and perhaps intuitive?) what it is we‚Äôre comparing using matrix-based contrasts.",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#three-factors-with-nesting",
    "href": "develop/07_extra_contrast_design.html#three-factors-with-nesting",
    "title": "DESeq samples comparison: contrast designs",
    "section": "Three factors, with nesting",
    "text": "Three factors, with nesting\n\n# simulate data\ndds &lt;- makeExampleDESeqDataSet(n = 1000, m = 24, betaSD = 2)\ndds$bloodtype &lt;- factor(rep(c(\"bloodA\", \"bloodO\"), each = 12))\ndds$bloodtype &lt;- relevel(dds$bloodtype, \"bloodO\")\ndds$patient &lt;- factor(rep(LETTERS[1:4], each = 6))\ndds$condition &lt;- factor(rep(c(\"treat\", \"control\"), 12))\ndds &lt;- dds[, order(dds$bloodtype, dds$patient, dds$condition)]\ncolnames(dds) &lt;- paste0(\"sample\", 1:ncol(dds))\n\nFirst let‚Äôs look at our sample information:\n\ncolData(dds)\n\nDataFrame with 24 rows and 3 columns\n         condition bloodtype  patient\n          &lt;factor&gt;  &lt;factor&gt; &lt;factor&gt;\nsample1    control    bloodO        C\nsample2    control    bloodO        C\nsample3    control    bloodO        C\nsample4    treat      bloodO        C\nsample5    treat      bloodO        C\n...            ...       ...      ...\nsample20   control    bloodA        B\nsample21   control    bloodA        B\nsample22   treat      bloodA        B\nsample23   treat      bloodA        B\nsample24   treat      bloodA        B\n\n\nNow we have three factors, but patient is nested within bloodtype (i.e.¬†a patient is either bloodA or bloodO, it cannot be both). Therefore, bloodtype is a linear combination with patient (or, another way to think about it is that bloodtype is redundant with patient). Because of this, we will define our design without including ‚Äúbloodtype‚Äù, although later we can compare groups of patient of the same bloodtype with each other.\n\ndesign(dds) &lt;- ~ 1 + patient + condition + patient:condition\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n\n[1] \"Intercept\"                  \"patient_B_vs_A\"            \n[3] \"patient_C_vs_A\"             \"patient_D_vs_A\"            \n[5] \"condition_treat_vs_control\" \"patientB.conditiontreat\"   \n[7] \"patientC.conditiontreat\"    \"patientD.conditiontreat\"   \n\n\nNow it‚Äôs harder to define contrasts between groups of patient of the same bloodtype using DESeq‚Äôs coefficient names (although still possible). But using the model matrix approach, we do it in exactly the same way we have done so far!\nAgain, let‚Äôs define our groups from the model matrix:\n\n# get the model matrix\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\n# define coefficient vectors for each group\nbloodO_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" & dds$condition == \"control\", ])\nbloodA_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" & dds$condition == \"control\", ])\nbloodO_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" & dds$condition == \"treat\", ])\nbloodA_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" & dds$condition == \"treat\", ])\n\nIt‚Äôs worth looking at some of these vectors, to see that they are composed of weighted coefficients from different patient. For example, for ‚ÄúbloodO‚Äù patient, we have equal contribution from ‚ÄúpatientC‚Äù and ‚ÄúpatientD‚Äù:\n\nbloodO_control\n\n            (Intercept)                patientB                patientC \n                    1.0                     0.0                     0.5 \n               patientD          conditiontreat patientB:conditiontreat \n                    0.5                     0.0                     0.0 \npatientC:conditiontreat patientD:conditiontreat \n                    0.0                     0.0 \n\n\nAnd so, when we define our contrasts, each patient will be correctly weighted:\n\nbloodO_treat - bloodO_control\n\n            (Intercept)                patientB                patientC \n                    0.0                     0.0                     0.0 \n               patientD          conditiontreat patientB:conditiontreat \n                    0.0                     1.0                     0.0 \npatientC:conditiontreat patientD:conditiontreat \n                    0.5                     0.5 \n\n\nWe can set our contrasts in exactly the same way as we did in the previous section (for completeness, we also give the contrasts using DESeq‚Äôs named coefficients).\nbloodA vs bloodO (in the control):\n\nres1_bloodA_bloodO_control &lt;- results(dds, contrast = bloodA_control - bloodO_control)\n# or equivalently\nres2_bloodA_bloodO_control &lt;- results(dds, \n                                 contrast = list(c(\"patient_B_vs_A\"), # Blood type A\n                                                 c(\"patient_C_vs_A\", # Blood type O\n                                                   \"patient_D_vs_A\"))) # Blood type O\n\nbloodA vs bloodO (in the treat):\n\nres1_bloodO_bloodA_treat &lt;- results(dds, contrast = bloodO_treat - bloodA_treat)\n# or equivalently\nres2_bloodO_bloodA_treat &lt;- results(dds, \n                           contrast = list(c(\"patient_B_vs_A\", # Blood type A\n                                             \"patientB.conditiontreat\"), # Interaction of patient B with treatment\n                                           c(\"patient_C_vs_A\", # Blood type O\n                                             \"patient_D_vs_A\", # Blood type O\n                                             \"patientC.conditiontreat\", # Interaction of patient C with treatment\n                                             \"patientD.conditiontreat\"))) # Interaction of patient B with treatment\n\nAnd so on, for other contrasts of interest‚Ä¶",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/07_extra_contrast_design.html#extra-imbalanced-design",
    "href": "develop/07_extra_contrast_design.html#extra-imbalanced-design",
    "title": "DESeq samples comparison: contrast designs",
    "section": "Extra: imbalanced design",
    "text": "Extra: imbalanced design\nLet‚Äôs take our previous example, but drop one of the samples from the data, so that we only have 2 replicates for it.\n\ndds &lt;- dds[, -1] # drop one of the patient C samples\ndds &lt;- DESeq(dds)\nresultsNames(dds)\n\n[1] \"Intercept\"                  \"patient_B_vs_A\"            \n[3] \"patient_C_vs_A\"             \"patient_D_vs_A\"            \n[5] \"condition_treat_vs_control\" \"patientB.conditiontreat\"   \n[7] \"patientC.conditiontreat\"    \"patientD.conditiontreat\"   \n\n\nDefine our model matrix and coefficient vectors:\n\nmod_mat &lt;- model.matrix(design(dds), colData(dds))\nmod_mat\n\n         (Intercept) patientB patientC patientD conditiontreat\nsample2            1        0        1        0              0\nsample3            1        0        1        0              0\nsample4            1        0        1        0              1\nsample5            1        0        1        0              1\nsample6            1        0        1        0              1\nsample7            1        0        0        1              0\nsample8            1        0        0        1              0\nsample9            1        0        0        1              0\nsample10           1        0        0        1              1\nsample11           1        0        0        1              1\nsample12           1        0        0        1              1\nsample13           1        0        0        0              0\nsample14           1        0        0        0              0\nsample15           1        0        0        0              0\nsample16           1        0        0        0              1\nsample17           1        0        0        0              1\nsample18           1        0        0        0              1\nsample19           1        1        0        0              0\nsample20           1        1        0        0              0\nsample21           1        1        0        0              0\nsample22           1        1        0        0              1\nsample23           1        1        0        0              1\nsample24           1        1        0        0              1\n         patientB:conditiontreat patientC:conditiontreat\nsample2                        0                       0\nsample3                        0                       0\nsample4                        0                       1\nsample5                        0                       1\nsample6                        0                       1\nsample7                        0                       0\nsample8                        0                       0\nsample9                        0                       0\nsample10                       0                       0\nsample11                       0                       0\nsample12                       0                       0\nsample13                       0                       0\nsample14                       0                       0\nsample15                       0                       0\nsample16                       0                       0\nsample17                       0                       0\nsample18                       0                       0\nsample19                       0                       0\nsample20                       0                       0\nsample21                       0                       0\nsample22                       1                       0\nsample23                       1                       0\nsample24                       1                       0\n         patientD:conditiontreat\nsample2                        0\nsample3                        0\nsample4                        0\nsample5                        0\nsample6                        0\nsample7                        0\nsample8                        0\nsample9                        0\nsample10                       1\nsample11                       1\nsample12                       1\nsample13                       0\nsample14                       0\nsample15                       0\nsample16                       0\nsample17                       0\nsample18                       0\nsample19                       0\nsample20                       0\nsample21                       0\nsample22                       0\nsample23                       0\nsample24                       0\nattr(,\"assign\")\n[1] 0 1 1 1 2 3 3 3\nattr(,\"contrasts\")\nattr(,\"contrasts\")$patient\n[1] \"contr.treatment\"\n\nattr(,\"contrasts\")$condition\n[1] \"contr.treatment\"\n\n\n\n# define coefficient vectors for each group\nbloodO_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" & dds$condition == \"control\", ])\nbloodA_control &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" & dds$condition == \"control\", ])\nbloodO_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodO\" & dds$condition == \"treat\", ])\nbloodA_treat &lt;- colMeans(mod_mat[dds$bloodtype == \"bloodA\" & dds$condition == \"treat\", ])\n\nNow let‚Äôs check what happens to the bloodO_control group:\n\nbloodO_control\n\n            (Intercept)                patientB                patientC \n                    1.0                     0.0                     0.4 \n               patientD          conditiontreat patientB:conditiontreat \n                    0.6                     0.0                     0.0 \npatientC:conditiontreat patientD:conditiontreat \n                    0.0                     0.0 \n\n\nNotice that whereas before ‚ÄúpatientC‚Äù and ‚ÄúpatientD‚Äù had each a weight of 0.5, now they have different weights. That‚Äôs because for patientC there‚Äôs only 2 replicates. So, we have a total of 5 bloodtype O individuals in the control (2 from patient C and 3 from D). Therefore, when we calculate the average coefficients for bloodOs, we need to do it as 0.4 x patientC + 0.6 x patientD.\nThe nice thing about this approach is that we do not need to worry about any of this, the weights come from our colMeans() call automatically. And now, any contrasts that we make will take these weights into account:\n\n# bloodA vs bloodO (in the control)\nbloodA_control - bloodO_control\n\n            (Intercept)                patientB                patientC \n                    0.0                     0.5                    -0.4 \n               patientD          conditiontreat patientB:conditiontreat \n                   -0.6                     0.0                     0.0 \npatientC:conditiontreat patientD:conditiontreat \n                    0.0                     0.0 \n\n\n\n# interaction\n(bloodA_treat - bloodA_control) - (bloodO_treat - bloodO_control)\n\n            (Intercept)                patientB                patientC \n                    0.0                     0.0                    -0.1 \n               patientD          conditiontreat patientB:conditiontreat \n                    0.1                     0.0                     0.5 \npatientC:conditiontreat patientD:conditiontreat \n                   -0.5                    -0.5",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "DESeq samples comparison: contrast designs"
    ]
  },
  {
    "objectID": "develop/cards/AdrijaKalvisa.html",
    "href": "develop/cards/AdrijaKalvisa.html",
    "title": "Adrija Kalvisa",
    "section": "",
    "text": "Adrija is a Special consultant at the NNF CPR/reNEW Genomics platform. Find out more about the genomics platform here."
  },
  {
    "objectID": "develop/cards/extraCards/JenniferBartell.html",
    "href": "develop/cards/extraCards/JenniferBartell.html",
    "title": "Jennifer Bartell",
    "section": "",
    "text": "Jennifer (Jennie) is the Sandbox project manager from the Center for Health Data Science at the University of Copenhagen. Jennie has a broad background in computational systems biology, bioinformatics, and health data modeling. Her PhD and postdoc work also included high throughput phenotyping and long read sequencing of bacterial strain libraries, so she can also speak ‚Äòwet lab‚Äô with experimentalists interested in gaining data science skills. In addition to project management, she‚Äôs developing ‚ÄòHPC lab‚Äô content and is knowledgable about research data management. She has been deeply involved in the synthetic health data arm of the project, which has turned into a collaborative research project between her, Anders Krogh, Martin Boegsted, and Jan Trzaskowski with a 4 year data science grant from the NNF."
  },
  {
    "objectID": "develop/cards/AlbaMartinez.html",
    "href": "develop/cards/AlbaMartinez.html",
    "title": "Alba Refoyo Martinez",
    "section": "",
    "text": "Alba is a Sandbox data scientist based at the University of Copenhagen. During her academic background as a PhD and Postdoc she has developed a solid expertise in large-scale genomics and pipelines development on computing clusters."
  },
  {
    "objectID": "develop/04c_preprocessing_nf3170.html",
    "href": "develop/04c_preprocessing_nf3170.html",
    "title": "nf-core/rnaseq 3.17.0",
    "section": "",
    "text": "Section Overview\n\n\n\nüí¨ Learning Objectives:\n\nLearn about the UCloud computing system.\nLearn how to submit a job and explore your results folders.\nSubmit a nf-core/rnaseq 3.17.0 run on our data\n\nWe will be running the nf-core/rnaseq pipeline. Please refer to their detailed documentation here: https://nf-co.re/rnaseq/3.17.0/. We highly recommend reading through all the sections to fully understand how to run the pipeline, explore the optional parameters you can set, and learn about the output format.",
    "crumbs": [
      "Data processing",
      "UCloud setup",
      "nf-core/rnaseq 3.17.0"
    ]
  },
  {
    "objectID": "develop/04c_preprocessing_nf3170.html#submit-a-job",
    "href": "develop/04c_preprocessing_nf3170.html#submit-a-job",
    "title": "nf-core/rnaseq 3.17.0",
    "section": "Submit a job",
    "text": "Submit a job\nAccess Ucloud with your account and choose the project Sandbox RNASeq Workshop to which you have been invited (contact the team if you haven‚Äôt).\n\nClick on Apps on the left-side menu, search for the application nf-core rnaseq, and click on it.\n\nNext, let‚Äôs set up the parameters to run the pipeline. Your screen should resemble the image below‚Äîplease verify it does.\n\nAssign a job title using your name and the task (e.g., ‚Äúpreprocessing salmon‚Äù).\nSelect 8 cores and a runtime of 4 hours.\nChoose the sequencing data drive containing the sequencing reads and scripts needed for the pipeline. Please, also add your personal drive‚Äîthe one with your name (e.g.Yourname#xxxx).\nEnable interactive mode to start a session through the terminal app, allowing us to work with the command line and monitor the progress of the pipeline.\n\n\n\n\n\n\n\nWarning\n\n\n\nEnsure that the hard-drive icon is labeled ‚Äúsequencing_data‚Äù and you are in the ‚Äúsandbox_bulkRNAseq‚Äù workspace.\nYou can select the drive by clicking the down arrow (‚à®) icon to open a dropdown menu.\n\n\n\nYou are almost ready to run the app! But first, make sure your screen looks like the one shown here. Review the arguments used to run the job: we have specified a Job name, Hours, Machine type, and an additional parameter, Interactive mode.\n\nNow, click the button on the top-right of the screen (submit) to start the job.\nNext, wait until the screen looks like the figure below. This process usually takes a few minutes. You can always come back to this screen via the Runs button in the left menu on UCloud. From there, you can add extra time or stop the app if you no longer need it.\n\nNow, click on Open terminal on the top right-hand side of the screen. You will start the terminal session through your browser! Once inside the terminal, you will need to do one last thing before starting the pipeline:\n\n\nTerminal\n\n # This will create a session with an automatically assigned numeric name, starting from 0\ntmux \n\n# Alternatively, \ntmux new -s session_name\n\n\nThe tmux command initiates a persistent virtual command line session. This is crucial because, once the pipeline starts, you won‚Äôt be able to monitor its progress if your computer disconnects or enters sleep mode. With tmux, however, you can close your computer, and the session will still be active when you reconnect‚Äîunless your requested job time has run out. You‚Äôll know you‚Äôre inside the tmux session by checking the bottom of the screen.\n\n\n\n\n\n\n\nReconnect to tmux session\n\n\n\nIf you want to leave the tmux session (and not kill it), you can do so by pressing simultaneously Ctrl and B keys, and then pressing D. Then, you can reconnect to the session using the command:\n\n\nTerminal\n\ntmux attach -t 0 # abbreviated as tmux a -t0\n\n\n\nLet‚Äôs prepare to run the pipeline. First, navigate to your personal drive‚Äîthe one with your name (e.g.Yourname#xxxx)‚Äîand create a directory to serve as your working directory where all pipeline results will be saved (e.g., nfcore-results). Make sure you‚Äôre now located within this new directory. Finally, copy the bash script that runs the Nextflow command into this directory. Check the commands you need to run below:\n\n\nTerminal\n\n# Change location to your personal drive and create a new directory\n# cd /work/&lt;YourName#xxxx&gt;\nmkdir nfcore-results\n\n# Make the new dir your current working dir!\ncd nfcore-results # You might have named it differently \n\n# Copy our bash script to your directory \ncp /work/sequencing_data/scripts_v3.17.0/preprocessing_salmon.sh .\n\n# Make sure you have copied the bash script using the ls command \nls . \n# ls is a Linux shell command that lists directory contents of files and directories.\n\n# You will run the pipeline from here as follows BUT not yet! (that's why is commented out)\n# bash ./preprocessing_salmon.sh\n\nOnce copied, review the bash script:\n\n\npreprocessing_salmon.sh\n\n#!/bin/bash  # Specifies the script that should be run in the bash shell\n\nVRNASEQ=\"3.17.0\"    # Defines the version of the rnaseq pipeline to use\nPARAMSF=\"/work/sequencing_data/scripts_v3.17.0/nf-params_salmon.json\"   # Set path to configuration pipeline parameters (e.g. aligner software)\nCONFIGF=\"/work/sequencing_data/scripts_v3.17.0/maxcores.config\"     # Set path to maximum cores and memory usage (e.g. what you requested on UCloud)\n\nnextflow run nf-core/rnaseq -r $VRNASEQ -params-file $PARAMSF -profile conda -c $CONFIGF\n\nThis small bash script initiates the nf-core/rnaseq pipeline. It‚Äôs a good practice to save the command used to run the pipeline, and now you‚Äôve copied it into your results folder! You‚Äôll notice extra parameters and configuration settings defined in the script, which we‚Äôll explore shortly. The final line of the script runs the RNA-seq pipeline with the specified version, parameters, Conda profile, and configuration file. We will inspect each part of the Nextflow command below in the section Understanding the pipeline arguments but we will first look at the different input files.\n\nParameters file\nThe parameters JSON file is used in nf-core pipelines to define various arguments and software options that can be utilized within the pipeline. You can find a full list of all parameters on the official page: https://nf-co.re/rnaseq/3.17.0/parameters/. Let‚Äôs take a look at the different configuration files we‚Äôre using.\nIn the parameters file, we specify that we want to use the pseudoaligner Salmon for this pipeline. The key elements we need to define are the location of the samplesheet, the output directory where Nextflow will save the results, and the paths to the FASTA and GTF files. It is important to use full paths for these locations to ensure that Nextflow can correctly access the required files, regardless of the working directory.\n\n\nnf-params.json\n\n{\n    \"input\": \"/work/sequencing_data/raw_reads/samplesheet_v3.17.0.csv\",\n    \"outdir\": \"preprocessing_results_salmon\",\n    \"fasta\": \"/work/sequencing_data/genomic_resources/homo_sapiens/GRCh38/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz\",\n    \"gtf\": \"/work/sequencing_data/genomic_resources/homo_sapiens/GRCh38/Homo_sapiens.GRCh38.109.MODIFIED.gtf.gz\",\n    \"pseudo_aligner\": \"salmon\",\n    \"skip_stringtie\": true,\n    \"skip_rseqc\": true,\n    \"skip_preseq\": true,\n    \"skip_qualimap\": true,\n    \"skip_biotype_qc\": true,\n    \"skip_bigwig\": true,\n    \"skip_deseq2_qc\": true,\n    \"skip_bbsplit\": true,\n    \"skip_alignment\": true,\n    \"extra_salmon_quant_args\": \"--gcBias\"\n}\n\n\n\n\n\n\n\nMore info on the parameters file\n\n\n\n--input parameter\nThe --input parameter points to the samplesheet.csv file that contains all the info regarding our samples.\n--outdir parameter\nThe --outdir parameter indicates where the results of the pipeline will be saved.\n--fasta parameter\nPath to FASTA reference genome file.\n--gtf parameter\nPath to GTF annotation file that contains genomic region information.\n--pseudo_aligner argument\nThe --pseudo_aligner argument indicates that we want to use salmon to quantify transcription levels.\nFinally, we are skipping several QC and extra steps that we did not explain in the previous lesson. Do not worry if you cannot manage to run the pipeline or you do not have the time, we have prepared a backup folder that contains the results from a traditional alignment + pseudoquantification for you to freely explore! (More about that below).\n\n\n\n\nSamples‚Äô sheet\nLet‚Äôs quickly explore our samplesheet.csv file (we named it samplesheet_v3.17.0.csv to differentiate it from other formats, as the file may have slightly changed with Nextflow updates‚Äîdon‚Äôt worry about this). Additional details, including descriptions of the columns here\n\n\nsamplesheet_v3.17.0.csv\n\nsample,fastq_1,fastq_2,strandedness\ncontrol_3,/work/sequencing_data/raw_reads/Control_3.fastq.gz,,unstranded\ncontrol_2,/work/sequencing_data/raw_reads/Control_2.fastq.gz,,unstranded\ncontrol_1,/work/sequencing_data/raw_reads/Control_1.fastq.gz,,unstranded\nvampirium_3,/work/sequencing_data/raw_reads/Vampirium_3.fastq.gz,,unstranded\nvampirium_2,/work/sequencing_data/raw_reads/Vampirium_2.fastq.gz,,unstranded\nvampirium_1,/work/sequencing_data/raw_reads/Vampirium_1.fastq.gz,,unstranded\ngarlicum_3,/work/sequencing_data/raw_reads/Garlicum_3.fastq.gz,,unstranded\ngarlicum_2,/work/sequencing_data/raw_reads/Garlicum_2.fastq.gz,,unstranded\n\nIt is crucial that the FASTQ paths inside this file match the paths in your job exactly! A good practice is to use the full paths to avoid any discrepancies.\n\n\nConfiguration file\nThe configuration file ensures that, regardless of how nf-core defines the resources required for each task, the jobs will run with the resources we allocate when submitting the job. You can learn more about configuration parameters here. One of Nextflow‚Äôs key strengths is its ability to run on virtually any computational infrastructure, so these settings might differ if you run the workflow on a different machine.\n\n\nmaxcores.config\n\nprocess {\n  resourceLimits = [\n    cpus: 8,\n    memory: 40.GB,\n  ]\n}",
    "crumbs": [
      "Data processing",
      "UCloud setup",
      "nf-core/rnaseq 3.17.0"
    ]
  },
  {
    "objectID": "develop/04c_preprocessing_nf3170.html#understanding-the-pipeline-options",
    "href": "develop/04c_preprocessing_nf3170.html#understanding-the-pipeline-options",
    "title": "nf-core/rnaseq 3.17.0",
    "section": "Understanding the pipeline arguments",
    "text": "Understanding the pipeline arguments\nLet‚Äôs divide the command into different sections.\n\n\nNextflow command\n\nnextflow run \\\n    nf-core/rnaseq -r &lt;VERSION&gt;\\\n    -params-file &lt;PARAMS_FILE&gt; \\\n    -profile &lt;conda,docker,arm&gt;  \\\n    -c &lt;CONFIG_FILE&gt;  \\\n\n\n\n\n\n\n\nBash scripting\n\n\n\nThe notation used in the command to run Nextflow is a common practice in bash scripting. It involves defining a variable for the file path (e.g., PARAMSF=\"/work/sequencing_data/scripts_v3.17.0/nf-params_salmon.json\") and then referencing the variable in the command (e.g., -params-file $PARAMSF). This approach enhances the readability and manageability of the script.\nYou can easily define other paths and reuse the script!\n\n\nFirst we have:\nnextflow run nf-core/rnaseq -r 3.17.0\nWhile usually one would run an nf-core pipeline using nextflow run nf-core/rnaseq and fetch the pipeline remotely, UCloud has installed the pipelines locally. Specifically, we are using the latest version by using the argument -r 3.17.0.\n\nThe -params-file argument is another nextflow core argument that allows us to give the nf-core rnaseq pipeline arguments in a json file, instead of creating an excessively long command. Writing the parameters this way allows for better reproducibility since you can reuse the file in the future.\n# Set path to configuration pipeline parameters (e.g. aligner software)\nPARAMSF=\"/path/to/params.json\"   \n-params-file $PARAMSF\n\nThe next argument defines the -profile. Profiles can give configuration presets for different compute environments. Unfortunately, the UCloud implementation of the nf-core pipelines does not currently allow the use of docker or singularity, which are the recommended profile options. However, UCloud has made sure that there is a working conda environment ready to use!\n-profile conda\n\nFinally, we include the argument to specify the config file containing the resource settings:\n# Set path to maximum cores and memory usage (e.g. what you requested on UCloud)\nCONFIGF=\"/path/to/config.json\"   \n-c $CONFIGF\nThese are nf-core specific arguments that indicate Nextflow to only use as maximum the number of CPUs and RAM we requested when we submitted the job. We are using 8 cores since it is what we requested on the submission page (e.g.¬†if you submitted a job with 4 CPUs, this will be equal to 4). We are using slightly less RAM than we requested (48Gb) just in case there is a problem with memory overflow.\n\n\n\n\n\n\nNeed more help?\n\n\n\n\nAsk your instructors if you have any questions before we start running it.\nYou can also check nf-core usage documentation here.",
    "crumbs": [
      "Data processing",
      "UCloud setup",
      "nf-core/rnaseq 3.17.0"
    ]
  },
  {
    "objectID": "develop/04c_preprocessing_nf3170.html#running-the-pipeline",
    "href": "develop/04c_preprocessing_nf3170.html#running-the-pipeline",
    "title": "nf-core/rnaseq 3.17.0",
    "section": "Running the pipeline",
    "text": "Running the pipeline\nWe can finally start the run! Type in the command:\n\n\nTerminal within tmux session\n\n# running command from /work/YourName#xxxx/nfcore-results \nbash ./preprocessing_salmon.sh \n\nYou should see now a prompt like this, which means that the pipeline started successfully!",
    "crumbs": [
      "Data processing",
      "UCloud setup",
      "nf-core/rnaseq 3.17.0"
    ]
  },
  {
    "objectID": "develop/04c_preprocessing_nf3170.html#restarting-a-failed-run",
    "href": "develop/04c_preprocessing_nf3170.html#restarting-a-failed-run",
    "title": "nf-core/rnaseq 3.17.0",
    "section": "Restarting a failed run",
    "text": "Restarting a failed run\nWhen running a nf-core pipeline for the first time, you might encounter some errors, for example, one of your files has an incorrect path, or a program failed to do its job. It is very important to read the error message carefully (try Googling it, as chances are others have encountered the same issue)!\n\n\n\n\n\n\nFailure\n\n\n\n# Error in terminal\nError executing process &gt;\nCaused by:\n    Failed to create create conda environment\n\n\n\nOnce you fix the error, it is possible to resume a pipeline instead of restarting the whole workflow. You can do this by adding the -resume argument to the Nextflow command:\nnextflow run nf-core/rnaseq -r $VRNASEQ -params-file $PARAMSF -profile conda -c $CONFIGF -resume",
    "crumbs": [
      "Data processing",
      "UCloud setup",
      "nf-core/rnaseq 3.17.0"
    ]
  },
  {
    "objectID": "develop/04c_preprocessing_nf3170.html#stopping-the-app",
    "href": "develop/04c_preprocessing_nf3170.html#stopping-the-app",
    "title": "nf-core/rnaseq 3.17.0",
    "section": "Stopping the app",
    "text": "Stopping the app\nOnce the pipeline is done (HINT: check your tmux session), go on Runs in UCloud and stop it from using more resources than necessary!",
    "crumbs": [
      "Data processing",
      "UCloud setup",
      "nf-core/rnaseq 3.17.0"
    ]
  },
  {
    "objectID": "develop/04c_preprocessing_nf3170.html#saved-results",
    "href": "develop/04c_preprocessing_nf3170.html#saved-results",
    "title": "nf-core/rnaseq 3.17.0",
    "section": "Saved results",
    "text": "Saved results\nAfter finishing the job, everything that the pipeline has created will be saved in the directory you created in your personal drive.\n\nAll generated files will be saved in a volume with your username, which you should be able to find under the menu Files &gt; Drives &gt; Member Files:YourName#numbers\n\n\n\nYou will find the results under the preprocessing_results_salmon which you used as --outdir\n\n\n\n\n\n\n\n\nNextflow work directory\n\n\n\nA common practice is to remove the work directory once the pipeline completes successfully. This helps save storage space in the long run, as the work directory can accumulate over multiple runs. Feel free to explore the contents to see more details on how the jobs were run, and if there are any failures, you can find additional information there.\n\n\n\n\n\n\n\n\nDid you not save the results in a specific folder?\n\n\n\n\n\nYou can always find past generated files by looking into the Jobs folder! You will need to remember which app and job name you provided before submitting the job to UCloud. For example,\n\nGo to Jobs -&gt; nf-core: rnaseq -&gt; job_name (RNAseq preprocessing ...) -&gt; preprocessing_results_salmon \n\n\n\n\nNow you have access to the full results of your pipeline! As explained in the previous lesson, the nf-core rnaseq workflow will create a MultiQC report summarizing several steps into a single html file that is interactive and explorable. In addition, there will be a folder with the results of the individual QC steps as well as the alignment and quantification results. Take your time and check it all out!",
    "crumbs": [
      "Data processing",
      "UCloud setup",
      "nf-core/rnaseq 3.17.0"
    ]
  },
  {
    "objectID": "develop/04c_preprocessing_nf3170.html#downstream-analysis-using-your-results",
    "href": "develop/04c_preprocessing_nf3170.html#downstream-analysis-using-your-results",
    "title": "nf-core/rnaseq 3.17.0",
    "section": "Downstream analysis using your results",
    "text": "Downstream analysis using your results\nOptional: If you have successfully run nf-core RNA jobs and want to use the files you generated from your own preprocessing results, don‚Äôt forget to choose Use folder when submitting a new job. How?\n\nGo to Select folders to use and Add folder by selecting the one containing the pipeline results like shown in the image above. They will be located in Member Files:YourName#numbers -&gt; nfcore-results -&gt; preprocessing_results_salmon (unless you have moved them elsewhere).",
    "crumbs": [
      "Data processing",
      "UCloud setup",
      "nf-core/rnaseq 3.17.0"
    ]
  },
  {
    "objectID": "develop/08b_FA_overrepresentation.html",
    "href": "develop/08b_FA_overrepresentation.html",
    "title": "Functional Analysis for RNA-seq",
    "section": "",
    "text": "Approximate time: 45 minutes",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Functional Analysis for RNA-seq"
    ]
  },
  {
    "objectID": "develop/08b_FA_overrepresentation.html#learning-objectives",
    "href": "develop/08b_FA_overrepresentation.html#learning-objectives",
    "title": "Functional Analysis for RNA-seq",
    "section": "Learning Objectives:",
    "text": "Learning Objectives:\n\nIdentify popular functional analysis tools for over-representation analysis",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Functional Analysis for RNA-seq"
    ]
  },
  {
    "objectID": "develop/08b_FA_overrepresentation.html#clusterprofiler",
    "href": "develop/08b_FA_overrepresentation.html#clusterprofiler",
    "title": "Functional Analysis for RNA-seq",
    "section": "clusterProfiler",
    "text": "clusterProfiler\nWe will be using clusterProfiler to perform over-representation analysis on GO terms associated with our list of significant genes. The tool takes as input a significant gene list and a background gene list and performs statistical enrichment analysis using hypergeometric testing. The basic arguments allow the user to select the appropriate organism and GO ontology (BP, CC, MF) to test.\n\nRunning clusterProfiler\nTo run clusterProfiler GO over-representation analysis, we wil use the Ensembl IDs, instead of the gene names, since the tool works a bit easier with the Ensembl IDs.\nThen load the following libraries:\n\n# Load libraries\nlibrary(DOSE)\nlibrary(pathview)\nlibrary(clusterProfiler)\nlibrary(org.Hs.eg.db)\n\nTo perform the over-representation analysis, we need a list of background genes and a list of significant genes. For our background dataset we will use all genes tested for differential expression (all genes in our results table). For our significant gene list we will use genes with p-adjusted values less than 0.05 (we could include a fold change threshold too if we have many DE genes).\n\n## Create background dataset for hypergeometric testing using all genes tested for significance in the results\nallCont_genes &lt;- dplyr::filter(res_ids, !is.na(gene)) %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n\n## Extract significant results\nsigCont &lt;- dplyr::filter(res_ids, padj &lt; 0.05 & !is.na(gene))\n\nsigCont_genes &lt;- sigCont %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n\nNow we can perform the GO enrichment analysis and save the results:\n\n## Run GO enrichment analysis \nego &lt;- enrichGO(gene = sigCont_genes, \n                universe = allCont_genes,\n                keyType = \"ENSEMBL\",\n                OrgDb = org.Hs.eg.db, \n                ont = \"BP\", \n                pAdjustMethod = \"BH\", \n                qvalueCutoff = 0.05, \n                readable = TRUE)\n\nLet‚Äôs check the results:\n\n## Output results from GO analysis to a table\ncluster_summary &lt;- data.frame(ego)\ncluster_summary\n\n\n  \n\n\nwrite.csv(cluster_summary, \"../Results/clusterProfiler_Cont-Vamp.csv\")\n\n\nExercise 1\nCreate two new GO enrichment analyses one with UP and another for DOWN regulated genes for Control vs Vampirium.\n\n\n\nVisualizing clusterProfiler results\nclusterProfiler has a variety of options for viewing the over-represented GO terms. We will explore the dotplot, enrichment plot, and the category netplot.\nThe dotplot shows the number of genes associated with the first 50 terms (size) and the p-adjusted values for these terms (color). This plot displays the top 50 GO terms by gene ratio (# genes related to GO term / total number of sig genes), not p-adjusted value.\n\n## Dotplot \ndotplot(ego, showCategory=20)\n\n\n\n\n\n\n\n\nThe next plot is the enrichment GO plot, which shows the relationship between the top 50 most significantly enriched GO terms (padj.), by grouping similar terms together. Before creating the plot, we will need to obtain the similarity between terms using the pairwise_termsim() function (instructions for emapplot). In the enrichment plot, the color represents the p-values relative to the other displayed terms (brighter red is more significant), and the size of the terms represents the number of genes that are significant from our list.\n\n## Add similarity matrix to the termsim slot of enrichment result\nego &lt;- enrichplot::pairwise_termsim(ego)\n\n\n## Enrichmap clusters the 50 most significant (by padj) GO terms to visualize relationships between terms\nemapplot(ego, showCategory = 50)\n\n\n\n\n\n\n\n\nFinally, the category netplot shows the relationships between the genes associated with the top five most significant GO terms and the fold changes of the significant genes associated with these terms (color). The size of the GO terms reflects the pvalues of the terms, with the more significant terms being larger. This plot is particularly useful for hypothesis generation in identifying genes that may be important to several of the most affected processes.\n\n## To color genes by log2 fold changes, we need to extract the log2 fold changes from our results table creating a named vector\nOE_foldchanges &lt;- sigCont$log2FoldChange\n\nnames(OE_foldchanges) &lt;- sigCont$gene\n\n\n## Cnetplot details the genes associated with one or more terms - by default gives the top 5 significant terms (by padj)\ncnetplot(ego, \n         categorySize=\"pvalue\", \n         showCategory = 5, \n         foldChange=OE_foldchanges, \n         vertex.label.font=6)\n\n\n\n\n\n\n\n\n\n## If some of the high fold changes are getting drowned out due to a large range, you could set a maximum fold change value\nOE_foldchanges &lt;- ifelse(OE_foldchanges &gt; 2, 2, OE_foldchanges)\nOE_foldchanges &lt;- ifelse(OE_foldchanges &lt; -2, -2, OE_foldchanges)\n\n\ncnetplot(ego, \n         categorySize=\"pvalue\", \n         showCategory = 5, \n         foldChange=OE_foldchanges, \n         vertex.label.font=6)\n\n\n\n\n\n\n\n\nIf you are interested in significant processes that are not among the top five, you can subset your ego dataset to only display these processes:\n\n## Subsetting the ego results without overwriting original `ego` variable\nego2 &lt;- ego\n\nego2@result &lt;- ego@result[c(1,3,4,8,9),]\n\n## Plotting terms of interest\ncnetplot(ego2, \n         categorySize=\"pvalue\", \n         foldChange=OE_foldchanges, \n         showCategory = 5, \n         vertex.label.font=6)\n\n\n\n\n\n\n\n\n\nExercise 2\nRun a Disease Ontology (DO) overrepresentation analysis using the enrichDO() function. NOTE the arguments are very similar to the previous examples.\n\nDo you find anything interesting?\n\n\nExercise 3\nRun an enrichment analysis on the results of the DEA for Garlicum vs Vampirium samples. Remember to use the annotated results!",
    "crumbs": [
      "Data analyses",
      "Functional Analysis",
      "Functional Analysis for RNA-seq"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html",
    "href": "develop/09_summarized_workflow.html",
    "title": "Summary of DGE workflow",
    "section": "",
    "text": "Approximate time: 15 minutes",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#learning-objectives",
    "href": "develop/09_summarized_workflow.html#learning-objectives",
    "title": "Summary of DGE workflow",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nIdentify the R commands needed to run a complete differential expression analysis using DESeq2",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#libraries",
    "href": "develop/09_summarized_workflow.html#libraries",
    "title": "Summary of DGE workflow",
    "section": "Libraries",
    "text": "Libraries\n\nlibrary(tidyverse)\nlibrary(DESeq2)\nlibrary(ggrepel)\nlibrary(pheatmap)\nlibrary(annotables)\nlibrary(clusterProfiler)\nlibrary(DOSE)\nlibrary(pathview)\nlibrary(org.Hs.eg.db)\nlibrary(tximport)\nlibrary(RColorBrewer)\n\nWe have detailed the various steps in a differential expression analysis workflow, providing theory with example code. To provide a more succinct reference for the code needed to run a DGE analysis, we have summarized the steps in an analysis below:",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#obtaining-gene-level-counts-from-your-preprocessing-and-create-deseq-object",
    "href": "develop/09_summarized_workflow.html#obtaining-gene-level-counts-from-your-preprocessing-and-create-deseq-object",
    "title": "Summary of DGE workflow",
    "section": "Obtaining gene-level counts from your preprocessing and create DESeq object",
    "text": "Obtaining gene-level counts from your preprocessing and create DESeq object\n\nIf you have a traditional raw count matrix\nLoad data and metadata\n\ndata &lt;- read_table(\"../Data/Vampirium_counts_traditional.tsv\") \n\nmeta &lt;- read_csv(\"../Data/samplesheet.csv\")\n\nCheck that the row names of the metadata equal the column names of the raw counts data\n\n### Check that sample names match in both files\nall(colnames(data)[-c(1,2)] %in% meta$sample)\n\n[1] TRUE\n\nall(colnames(data)[-c(1,2)] == meta$sample)\n\n[1] FALSE\n\n\nReorder meta rows so it matches count data colnames\n\nreorder &lt;- match(colnames(data)[-c(1,2)],meta$sample)\nreorder\n\n[1] 3 2 1 8 7 6 5 4\n\nmeta &lt;- meta[reorder,] \n\nCreate DESeq2Dataset object\n\ndds &lt;- DESeqDataSetFromMatrix(countData = data %&gt;% dplyr::select(-gene_name) %&gt;% column_to_rownames(\"gene_id\") %&gt;% mutate_all(as.integer), \n                              colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)\n\n\n\nIf you have pseudocounts\nLoad samplesheet with all our metadata from our pipeline\n\n# Load data, metadata and tx2gene and create a txi object\nmeta &lt;- read_csv(\"../Data/samplesheet.csv\")\n\nCreate a list of salmon results\n\ndir &lt;- \"../Data/salmon\"\ntx2gene &lt;- read_table(file.path(dir,\"salmon_tx2gene.tsv\"), col_names = c(\"transcript_ID\",\"gene_ID\",\"gene_symbol\"))\n\n# Get all salmon results files\nfiles &lt;- file.path(dir, meta$sample, \"quant.sf\")\nnames(files) &lt;- meta$sample\n\nCreate txi object\n\ntxi &lt;- tximport(files, type=\"salmon\", tx2gene=tx2gene, countsFromAbundance = \"lengthScaledTPM\", ignoreTxVersion = TRUE)\n\nCreate dds object\n\ndds &lt;- DESeqDataSetFromTximport(txi,\n                                   colData = meta %&gt;% column_to_rownames(\"sample\"), \n                              design = ~ condition)",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#exploratory-data-analysis",
    "href": "develop/09_summarized_workflow.html#exploratory-data-analysis",
    "title": "Summary of DGE workflow",
    "section": "Exploratory data analysis",
    "text": "Exploratory data analysis\nPre-filtering low count genes + PCA & hierarchical clustering - identifying outliers and sources of variation in the data:\n\nPrefiltering low count genes\n\nkeep &lt;- rowSums(counts(dds)) &gt; 0\ndds &lt;- dds[keep,]\n\n\n\nRlog or vst transformation\n\n# Transform counts for data visualization\nrld &lt;- rlog(dds, \n            blind=TRUE)\n\n# vsd &lt;- vst(dds, blind = TRUE)\n\n\n\nPCA\nPlot PCA\n\nplotPCA(rld, \n        intgroup=\"condition\")\n\n\n\n\n\n\n\n\n\n\nHeatmaps\nExtract the rlog matrix from the object\n\nrld_mat &lt;- assay(rld)\nrld_cor &lt;- cor(rld_mat) # Pearson correlation between samples\nrld_dist &lt;- as.matrix(dist(t(assay(rld)))) #distances are computed by rows, so we need to transponse the matrix\n\nPlot heatmap of correlations\n\npheatmap(rld_cor, \n         annotation = meta %&gt;% column_to_rownames(\"sample\") %&gt;% dplyr::select(\"condition\"))\n\n\n\n\n\n\n\n\nPlot heatmap of distances with a new color range\n\nheat.colors &lt;- brewer.pal(6, \"Blues\") # Colors from the RColorBrewer package (only 6)\nheat.colors &lt;- colorRampPalette(heat.colors)(100) # Interpolate 100 colors\n\npheatmap(rld_dist, \n         annotation = meta %&gt;% column_to_rownames(\"sample\") %&gt;% dplyr::select(\"condition\"),\n         color = heat.colors)",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#run-deseq2",
    "href": "develop/09_summarized_workflow.html#run-deseq2",
    "title": "Summary of DGE workflow",
    "section": "Run DESeq2:",
    "text": "Run DESeq2:\nOptional step - Re-create DESeq2 dataset if the design formula has changed after QC analysis in include other sources of variation using\n\n# dds &lt;- DESeqDataSetFromMatrix(data, colData = meta, design = ~ covariate + condition)\n\nRun DEseq2\n\n# Run DESeq2 differential expression analysis\ndds &lt;- DESeq(dds)\n\nOptional step - Output normalized counts to save as a file to access outside RStudio using\n\nnormalized_counts &lt;- counts(dds, normalized=TRUE)",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#check-the-fit-of-the-dispersion-estimates",
    "href": "develop/09_summarized_workflow.html#check-the-fit-of-the-dispersion-estimates",
    "title": "Summary of DGE workflow",
    "section": "Check the fit of the dispersion estimates",
    "text": "Check the fit of the dispersion estimates\nPlot dispersion estimates\n\nplotDispEsts(dds)",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#create-contrasts-to-perform-wald-testing-or-the-shrunken-log2-fold-changes-between-specific-conditions",
    "href": "develop/09_summarized_workflow.html#create-contrasts-to-perform-wald-testing-or-the-shrunken-log2-fold-changes-between-specific-conditions",
    "title": "Summary of DGE workflow",
    "section": "Create contrasts to perform Wald testing or the shrunken log2 fold changes between specific conditions",
    "text": "Create contrasts to perform Wald testing or the shrunken log2 fold changes between specific conditions\nFormal LFC calculation\n\n# Specify contrast for comparison of interest\ncontrast &lt;- c(\"condition\", \"control\", \"vampirium\")\n\n# Output results of Wald test for contrast\nres &lt;- results(dds, \n               contrast = contrast, \n               alpha = 0.05)\n\nShrinkage\n\n# Get name of the contrast you would like to use\nresultsNames(dds)\n\n[1] \"Intercept\"                      \"condition_garlicum_vs_control\" \n[3] \"condition_vampirium_vs_control\"\n\n# Shrink the log2 fold changes to be more accurate\nres &lt;- lfcShrink(dds, \n                 coef = \"condition_vampirium_vs_control\", \n                 type = \"apeglm\")",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#output-significant-results",
    "href": "develop/09_summarized_workflow.html#output-significant-results",
    "title": "Summary of DGE workflow",
    "section": "Output significant results:",
    "text": "Output significant results:\n\n# Set thresholds\npadj.cutoff &lt;- 0.05\n\n# Turn the results object into a tibble for use with tidyverse functions\nres_tbl &lt;- res %&gt;%\n  data.frame() %&gt;%\n  rownames_to_column(var=\"gene\") %&gt;% \n  as_tibble()\n\n# Subset the significant results\nsig_res &lt;- dplyr::filter(res_tbl, \n                  padj &lt; padj.cutoff)",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#visualize-results-volcano-plots-heatmaps-normalized-counts-plots-of-top-genes-etc.",
    "href": "develop/09_summarized_workflow.html#visualize-results-volcano-plots-heatmaps-normalized-counts-plots-of-top-genes-etc.",
    "title": "Summary of DGE workflow",
    "section": "Visualize results: volcano plots, heatmaps, normalized counts plots of top genes, etc.",
    "text": "Visualize results: volcano plots, heatmaps, normalized counts plots of top genes, etc.\nFunction to get gene_IDs based on gene names. The function will take as input a vector of gene names of interest, the tx2gene dataframe and the dds object that you analyzed.\n\nlookup &lt;- function(gene_name, tx2gene, dds){\n  hits &lt;- tx2gene %&gt;% dplyr::select(gene_symbol, gene_ID) %&gt;% distinct() %&gt;% \n    dplyr::filter(gene_symbol %in% gene_name & gene_ID %in% rownames(dds))\n  return(hits)\n}\n\nlookup(gene_name = \"TSPAN7\", tx2gene = tx2gene, dds = dds)\n\n\n  \n\n\n\nPlot expression for single gene\n\nplotCounts(dds, gene=\"ENSG00000156298\", intgroup=\"condition\")\n\n\n\n\n\n\n\n\nFunction to annotate all your gene results\n\nres_tbl &lt;- merge(res_tbl, tx2gene %&gt;% dplyr::select(-transcript_ID) %&gt;% distinct(),\n                        by.x = \"gene\", by.y = \"gene_ID\", all.x = T)\n\nres_tbl\n\n\n  \n\n\n\n\nMAplot\n\nplotMA(res)\n\n\n\n\n\n\n\n\n\n\nVolcano plot with labels (top N genes)\n\n## Obtain logical vector where TRUE values denote padj values &lt; 0.05 and fold change &gt; 1.5 in either direction\nres_tbl &lt;- res_tbl %&gt;% \nmutate(threshold = padj &lt; 0.05 & abs(log2FoldChange) &gt;= 0.58)\n\n\n## Create an empty column to indicate which genes to label\nres_tbl &lt;- res_tbl %&gt;% mutate(genelabels = \"\")\n\n## Sort by padj values \nres_tbl &lt;- res_tbl %&gt;% arrange(padj)\n\n## Populate the genelabels column with contents of the gene symbols column for the first 10 rows, i.e. the top 10 most significantly expressed genes\nres_tbl$genelabels[1:10] &lt;- as.character(res_tbl$gene[1:10])\n\nhead(res_tbl)\n\n\n  \n\n\n\n\nggplot(res_tbl, aes(x = log2FoldChange, y = -log10(padj))) +\n  geom_point(aes(colour = threshold)) +\n  geom_text_repel(aes(label = genelabels)) +\n  ggtitle(\"Vampirium vs Control\") +\n  xlab(\"log2 fold change\") + \n  ylab(\"-log10 adjusted p-value\") +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = rel(1.5), hjust = 0.5),\n        axis.title = element_text(size = rel(1.25))) \n\n\n\n\n\n\n\n\n\n\nHeatmap of differentially expressed genes\n\n# filter significant results from normalized counts\nnorm_sig &lt;- normalized_counts %&gt;% as_tibble(rownames = \"gene\") %&gt;%\n  dplyr::filter(gene %in% sig_res$gene) %&gt;% column_to_rownames(var=\"gene\")\n\n\npheatmap(norm_sig, \n         cluster_rows = T, #cluster by expression pattern\n         scale = \"row\", # scale by gene so expression pattern is visible\n         treeheight_row = 0, # dont show the row dendogram\n         show_rownames = F, # remove rownames so it is more clear\n         annotation = meta %&gt;% column_to_rownames(var = \"sample\") %&gt;% dplyr::select(\"condition\")\n         )",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#perform-analysis-to-extract-functional-significance-of-results-go-or-kegg-enrichment-gsea-etc.",
    "href": "develop/09_summarized_workflow.html#perform-analysis-to-extract-functional-significance-of-results-go-or-kegg-enrichment-gsea-etc.",
    "title": "Summary of DGE workflow",
    "section": "Perform analysis to extract functional significance of results: GO or KEGG enrichment, GSEA, etc.",
    "text": "Perform analysis to extract functional significance of results: GO or KEGG enrichment, GSEA, etc.\n\nAnnotate with annotables\n\nids &lt;- grch38 %&gt;% dplyr::filter(ensgene %in% res_tbl$gene) \nres_ids &lt;- inner_join(res_tbl, ids, by=c(\"gene\"=\"ensgene\"))\n\n\n\nPerform enrichment analysis of GO terms (can be done as well with KEGG pathways)\n\n# Create background dataset for hypergeometric testing using all genes tested for significance in the results\nall_genes &lt;- dplyr::filter(res_ids, !is.na(gene)) %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n\n# Extract significant results\nsig &lt;- dplyr::filter(res_ids, padj &lt; 0.05 & !is.na(gene))\n\nsig_genes &lt;- sig %&gt;% \n  pull(gene) %&gt;% \n  as.character()\n\n\n# Perform enrichment analysis\nego &lt;- enrichGO(gene = sig_genes, \n                universe = all_genes,\n                keyType = \"ENSEMBL\",\n                OrgDb = org.Hs.eg.db, \n                ont = \"BP\", \n                pAdjustMethod = \"BH\", \n                qvalueCutoff = 0.05, \n                readable = TRUE)\nego &lt;- enrichplot::pairwise_termsim(ego)\n\n\n\nVisualize result\n\ndotplot(ego, showCategory=50)\n\n\n\n\n\n\n\n\n\nemapplot(ego, showCategory = 50)\n\n\n\n\n\n\n\n\n\n\nCnetplot\n\n## To color genes by log2 fold changes, we need to extract the log2 fold changes from our results table creating a named vector\nsig_foldchanges &lt;- sig$log2FoldChange\n\nnames(sig_foldchanges) &lt;- sig$gene\n\n\n## Cnetplot details the genes associated with one or more terms - by default gives the top 5 significant terms (by padj)\ncnetplot(ego, \n         categorySize=\"pvalue\", \n         showCategory = 5, \n         foldChange=sig_foldchanges, \n         vertex.label.font=6)\n\n\n\n\n\n\n\n\n\n\nPerform GSEA analysis of KEGG pathways (can be done as well with GO terms)\n\n# Extract entrez IDs. IDs should not be duplicated or NA\nres_entrez &lt;- dplyr::filter(res_ids, entrez != \"NA\" & entrez != \"NULL\" & duplicated(entrez)==F)\n\n## Extract the foldchanges\nfoldchanges &lt;- res_entrez$log2FoldChange\n\n## Name each fold change with the corresponding Entrez ID\nnames(foldchanges) &lt;- res_entrez$entrez\n\n## Sort fold changes in decreasing order\nfoldchanges &lt;- sort(foldchanges, decreasing = TRUE)\n\n\n# Run GSEA of KEGG\ngseaKEGG &lt;- gseKEGG(geneList = foldchanges, # ordered named vector of fold changes (Entrez IDs are the associated names)\n              organism = \"hsa\", # supported organisms listed below\n              pvalueCutoff = 0.05, # padj cutoff value\n              verbose = FALSE)\n\ngseaKEGG_results &lt;- gseaKEGG@result\nhead(gseaKEGG_results)\n\n\n  \n\n\n\n\n## Plot the GSEA plot for a single enriched pathway:\ngseaplot(gseaKEGG, geneSetID = gseaKEGG_results$ID[1])\n\n\n\n\n\n\n\n\n\n## Output images for a single significant KEGG pathway\npathview(gene.data = foldchanges,\n              pathway.id = gseaKEGG_results$ID[1],\n              species = \"hsa\",\n              limit = list(gene = 2, # value gives the max/min limit for foldchanges\n              cpd = 1))\n\n\nknitr::include_graphics(paste0(\"./\",gseaKEGG_results$ID[1],\".png\"))",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/09_summarized_workflow.html#make-sure-to-output-the-versions-of-all-tools-used-in-the-de-analysis",
    "href": "develop/09_summarized_workflow.html#make-sure-to-output-the-versions-of-all-tools-used-in-the-de-analysis",
    "title": "Summary of DGE workflow",
    "section": "Make sure to output the versions of all tools used in the DE analysis:",
    "text": "Make sure to output the versions of all tools used in the DE analysis:\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 24.04.1 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices datasets  utils     methods  \n[8] base     \n\nother attached packages:\n [1] RColorBrewer_1.1-3          tximport_1.34.0            \n [3] org.Hs.eg.db_3.20.0         AnnotationDbi_1.68.0       \n [5] pathview_1.46.0             DOSE_4.0.0                 \n [7] clusterProfiler_4.14.4      annotables_0.2.0           \n [9] pheatmap_1.0.12             ggrepel_0.9.6              \n[11] DESeq2_1.46.0               SummarizedExperiment_1.36.0\n[13] Biobase_2.66.0              MatrixGenerics_1.18.1      \n[15] matrixStats_1.5.0           GenomicRanges_1.58.0       \n[17] GenomeInfoDb_1.42.1         IRanges_2.40.1             \n[19] S4Vectors_0.44.0            BiocGenerics_0.52.0        \n[21] lubridate_1.9.4             forcats_1.0.0              \n[23] stringr_1.5.1               dplyr_1.1.4                \n[25] purrr_1.0.2                 readr_2.1.5                \n[27] tidyr_1.3.1                 tibble_3.2.1               \n[29] ggplot2_3.5.1               tidyverse_2.0.0            \n\nloaded via a namespace (and not attached):\n  [1] jsonlite_1.8.9          magrittr_2.0.3          ggtangle_0.0.6         \n  [4] farver_2.1.2            rmarkdown_2.29          fs_1.6.5               \n  [7] zlibbioc_1.52.0         vctrs_0.6.5             memoise_2.0.1          \n [10] RCurl_1.98-1.16         ggtree_3.14.0           htmltools_0.5.8.1      \n [13] S4Arrays_1.6.0          SparseArray_1.6.1       gridGraphics_0.5-1     \n [16] htmlwidgets_1.6.4       plyr_1.8.9              cachem_1.1.0           \n [19] igraph_2.1.4            lifecycle_1.0.4         pkgconfig_2.0.3        \n [22] Matrix_1.7-1            R6_2.5.1                fastmap_1.2.0          \n [25] gson_0.1.0              GenomeInfoDbData_1.2.13 numDeriv_2016.8-1.1    \n [28] digest_0.6.37           aplot_0.2.4             enrichplot_1.26.6      \n [31] colorspace_2.1-1        patchwork_1.3.0         RSQLite_2.3.9          \n [34] labeling_0.4.3          timechange_0.3.0        httr_1.4.7             \n [37] abind_1.4-8             compiler_4.4.2          bit64_4.6.0-1          \n [40] withr_3.0.2             BiocParallel_1.36.0     DBI_1.2.3              \n [43] R.utils_2.12.3          MASS_7.3-61             DelayedArray_0.32.0    \n [46] tools_4.4.2             ape_5.8-1               R.oo_1.27.0            \n [49] glue_1.8.0              nlme_3.1-166            GOSemSim_2.32.0        \n [52] grid_4.4.2              reshape2_1.4.4          fgsea_1.33.1           \n [55] generics_0.1.3          gtable_0.3.6            tzdb_0.4.0             \n [58] R.methodsS3_1.8.2       data.table_1.16.4       hms_1.1.3              \n [61] XVector_0.46.0          pillar_1.10.1           emdbook_1.3.13         \n [64] vroom_1.6.5             yulab.utils_0.1.9       splines_4.4.2          \n [67] treeio_1.30.0           lattice_0.22-6          renv_1.0.11            \n [70] bit_4.5.0.1             tidyselect_1.2.1        GO.db_3.20.0           \n [73] locfit_1.5-9.10         Biostrings_2.74.1       knitr_1.49             \n [76] xfun_0.50               KEGGgraph_1.66.0        stringi_1.8.4          \n [79] UCSC.utils_1.2.0        lazyeval_0.2.2          ggfun_0.1.8            \n [82] yaml_2.3.10             evaluate_1.0.3          codetools_0.2-20       \n [85] bbmle_1.0.25.1          qvalue_2.38.0           Rgraphviz_2.50.0       \n [88] BiocManager_1.30.25     graph_1.84.1            ggplotify_0.1.2        \n [91] cli_3.6.3               munsell_0.5.1           Rcpp_1.0.14            \n [94] coda_0.19-4.1           png_0.1-8               bdsmatrix_1.3-7        \n [97] XML_3.99-0.18           parallel_4.4.2          blob_1.2.4             \n[100] bitops_1.0-9            mvtnorm_1.3-3           apeglm_1.28.0          \n[103] tidytree_0.4.6          scales_1.3.0            crayon_1.5.3           \n[106] rlang_1.1.5             cowplot_1.1.3           fastmatch_1.1-6        \n[109] KEGGREST_1.46.0",
    "crumbs": [
      "Data analyses",
      "Workflow summary",
      "Summary of DGE workflow"
    ]
  },
  {
    "objectID": "develop/05b_count_matrix.html",
    "href": "develop/05b_count_matrix.html",
    "title": "The RNAseq count matrix",
    "section": "",
    "text": "Approximate time: 20 minutes",
    "crumbs": [
      "Data analyses",
      "The RNAseq count matrix"
    ]
  },
  {
    "objectID": "develop/05b_count_matrix.html#learning-objectives",
    "href": "develop/05b_count_matrix.html#learning-objectives",
    "title": "The RNAseq count matrix",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nLoad and create a count matrix from our preprocessing analysis using Salmon\nExplain why negative binomial distribution is used to model RNA-seq count data",
    "crumbs": [
      "Data analyses",
      "The RNAseq count matrix"
    ]
  },
  {
    "objectID": "develop/05b_count_matrix.html#loading-libraries",
    "href": "develop/05b_count_matrix.html#loading-libraries",
    "title": "The RNAseq count matrix",
    "section": "Loading libraries",
    "text": "Loading libraries\nFor this analysis we will be using several R packages, some which have been installed from CRAN and others from Bioconductor. To use these packages (and the functions contained within them), we need to load the libraries.\n\nlibrary(tidyverse)\nlibrary(DESeq2)\nlibrary(tximport)\n\n# And with this last line of code, we set our working directory to the folder with this notebook.\n# This way, the relative paths will work without issues",
    "crumbs": [
      "Data analyses",
      "The RNAseq count matrix"
    ]
  },
  {
    "objectID": "develop/05b_count_matrix.html#loading-data",
    "href": "develop/05b_count_matrix.html#loading-data",
    "title": "The RNAseq count matrix",
    "section": "Loading data",
    "text": "Loading data\nThe directories of output from the mapping/quantification step of the workflow (Salmon) is the data that we will be using. These transcript abundance estimates, often referred to as ‚Äòpseudocounts‚Äô, will be the starting point for our differential gene expression analysis. The main output of Salmon is a quant.sf file, and we have one of these for each individual sample in our dataset.\nFor the sake of reproducibility, we will be using the backup results from our preprocessing pipeline. You are welcome to use your own results!\n\n# Tabulated separated files can be opened using the read_table() function.\nread_table(\"../Data/salmon/control_1/quant.sf\") %&gt;% head()\n\n\n  \n\n\n\nFor each transcript that was assayed in the reference, we have:\n\nThe transcript identifier\nThe transcript length (in bp)\nThe effective length (described in detail below)\nTPM (transcripts per million), which is computed using the effective length\nThe estimated read count (‚Äòpseudocount‚Äô)\n\n\nWhat exactly is the effective length?\nThe sequence composition of a transcript affects how many reads are sampled from it. While two transcripts might be of identical actual length, depending on the sequence composition we are more likely to generate fragments from one versus the other. The transcript that has a higer likelihood of being sampled, will end up with the larger effective length. The effective length is transcript length which has been ‚Äúcorrected‚Äù to include factors due to sequence-specific and GC biases.\n\nWe will be using the R Bioconductor package tximport to prepare the quant.sf files for DESeq2. The first thing we need to do is create a variable that contains the paths to each of our quant.sf files. Then we will add names to our quant files which will allow us to easily distinguish between samples in the final output matrix.\nWe will use the samplesheet.csv file that we use to process our raw reads, since it already contains all the information we need to run our analysis.\n\n# Load metadata\nmeta &lt;- read_csv(\"../Data/samplesheet.csv\")\n\n# View metadata\nmeta\n\n\n  \n\n\n\nUsing the samples column, we can create all the paths needed:\n\n# Directory where salmon files are. You can change this path to the results of your own analysis\ndir &lt;- \"../Data/salmon\"\n\n# List all directories containing quant.sf files using the samplename column of metadata\nfiles &lt;- file.path(dir, meta$sample, \"quant.sf\")\n\n# Name the file list with the samplenames\nnames(files) &lt;- meta$sample\nfiles\n\n                            control_3                             control_2 \n  \"../Data/salmon/control_3/quant.sf\"   \"../Data/salmon/control_2/quant.sf\" \n                            control_1                           vampirium_3 \n  \"../Data/salmon/control_1/quant.sf\" \"../Data/salmon/vampirium_3/quant.sf\" \n                          vampirium_2                           vampirium_1 \n\"../Data/salmon/vampirium_2/quant.sf\" \"../Data/salmon/vampirium_1/quant.sf\" \n                           garlicum_3                            garlicum_2 \n \"../Data/salmon/garlicum_3/quant.sf\"  \"../Data/salmon/garlicum_2/quant.sf\" \n\n\nOur Salmon files were generated with transcript sequences listed by Ensembl IDs, but tximport needs to know which genes these transcripts came from. We will use annotation table the that was created in our workflow, called tx2gene.txt.\n\ntx2gene &lt;- read_table(\"../Data/salmon/salmon_tx2gene.tsv\", col_names = c(\"transcript_ID\",\"gene_ID\",\"gene_symbol\"))\ntx2gene %&gt;% head()\n\n\n  \n\n\n\ntx2gene is a three-column data frame linking transcript ID (column 1) to gene ID (column 2) to gene symbol (column 3). We will take the first two columns as input to tximport. The column names are not relevant, but the column order is (i.e transcript ID must be first).\nNow we are ready to run tximport. The tximport() function imports transcript-level estimates from various external software (e.g.¬†Salmon, Kallisto) and summarizes to the gene-level (default) or outputs transcript-level matrices. There are optional arguments to use the abundance estimates as they appear in the quant.sf files or to calculate alternative values.\nFor our analysis we need non-normalized or ‚Äúraw‚Äù count estimates at the gene-level for performing DESeq2 analysis.\nSince the gene-level count matrix is a default (txOut=FALSE) there is only one additional argument for us to modify to specify how to obtain our ‚Äúraw‚Äù count values. The options for countsFromAbundance are as follows:\n\nno (default): This will take the values in TPM (as our scaled values) and NumReads (as our ‚Äúraw‚Äù counts) columns, and collapse it down to the gene-level.\nscaledTPM: This is taking the TPM scaled up to library size as our ‚Äúraw‚Äù counts\nlengthScaledTPM: This is used to generate the ‚Äúraw‚Äù count table from the TPM (rather than summarizing the NumReads column). ‚ÄúRaw‚Äù count values are generated by using the TPM value x featureLength x library size. These represent quantities that are on the same scale as original counts, except no longer correlated with transcript length across samples. We will use this option for DESeq2 downstream analysis.\n\nAn additional argument for tximport: When performing your own analysis you may find that the reference transcriptome file you obtain from Ensembl will have version numbers included on your identifiers (i.e ENSG00000265439.2). This will cause a discrepancy with the tx2gene file since the annotation databases don‚Äôt usually contain version numbers (i.e ENSG00000265439). To get around this issue you can use the argument ignoreTxVersion  = TRUE. The logical value indicates whether to split the tx id on the ‚Äò.‚Äô character to remove version information, for easier matching.\n\ntxi &lt;- tximport(files, type=\"salmon\", tx2gene=tx2gene, countsFromAbundance = \"lengthScaledTPM\", ignoreTxVersion = TRUE)\n\n\nViewing data\nThe txi object is a simple list containing matrices of the abundance, counts, length. Another list element ‚ÄòcountsFromAbundance‚Äô carries through the character argument used in the tximport call. The length matrix contains the average transcript length for each gene which can be used as an offset for gene-level analysis.\n\nattributes(txi)\n\n$names\n[1] \"abundance\"           \"counts\"              \"length\"             \n[4] \"countsFromAbundance\"\n\n\nWe will be using the txi object as is for input into DESeq2, but will save it until the next lesson. For now let‚Äôs take a look at the count matrix. You will notice that there are decimal values, so let‚Äôs round to the nearest whole number and convert it into a dataframe. We will save it to a variable called data that we can play with.\n\n# Look at the counts\ntxi$counts %&gt;% head()\n\n                 control_3   control_2    control_1 vampirium_3 vampirium_2\nENSG00000000005   23.73123   28.439224   27.6076274    21.64963    37.58783\nENSG00000000419 1009.27099 1421.230337 1633.8368895  1310.99003  1895.90678\nENSG00000000457  341.15729  400.448044  525.1262233   341.87963   583.67850\nENSG00000000938    0.00000    1.051365    1.0534302     0.00000     0.00000\nENSG00000000971    9.73718   21.246741    0.9349943     4.29848    22.14522\nENSG00000001036 1887.04974 2549.889400 3078.0911145  1658.75260  2849.69853\n                 vampirium_1 garlicum_3  garlicum_2\nENSG00000000005   23.5275693   13.30819   33.656497\nENSG00000000419 2107.7881582 1483.81817 2544.206786\nENSG00000000457  629.8318121  548.58951  919.967120\nENSG00000000938    0.0000000    0.00000    1.791226\nENSG00000000971    0.5082626    2.01232    4.312574\nENSG00000001036 3012.8098871 2624.21407 4352.957839\n\n\n\n# Write the counts to an object\ndata &lt;- txi$counts %&gt;% \n  round() %&gt;% \n  data.frame()\n\nThere are a lot of rows with no gene expression at all.\n\nsum(rowSums(data) == 0)\n\n[1] 22144\n\n\nLet‚Äôs take them out.\n\nkeep &lt;- rowSums(data) &gt; 0\ndata &lt;- data[keep,]",
    "crumbs": [
      "Data analyses",
      "The RNAseq count matrix"
    ]
  },
  {
    "objectID": "develop/05b_count_matrix.html#rna-seq-count-distribution",
    "href": "develop/05b_count_matrix.html#rna-seq-count-distribution",
    "title": "The RNAseq count matrix",
    "section": "RNA-seq count distribution",
    "text": "RNA-seq count distribution\nTo determine the appropriate statistical model, we need information about the distribution of counts. To get an idea about how RNA-seq counts are distributed, let‚Äôs plot the counts of all the samples:\n\n# Here we format the data into long format instead of wide format\npdata &lt;- data %&gt;% \n  gather(key = Sample, value = Count)\n\nhead(pdata)\n\n\n  \n\n\n\nAnd we plot our count distribution using all our samples:\n\nggplot(pdata) +\n  geom_density(aes(x = Count, color = Sample)) +\n  xlab(\"Raw expression counts\") +\n  ylab(\"Number of genes\")\n\n\n\n\n\n\n\n\nIf we zoom in close to zero, we can see a large number of genes with counts close to zero:\n\nggplot(pdata) +\n  geom_density(aes(x = Count, color = Sample)) +\n  xlim(-5, 500)  +\n  xlab(\"Raw expression counts\") +\n  ylab(\"Number of genes\")\n\n\n\n\n\n\n\n\nThese images illustrate some common features of RNA-seq count data, including a low number of counts associated with a large proportion of genes, and a long right tail due to the lack of any upper limit for expression. Unlike microarray data, which has a dynamic range maximum limited due to when the probes max out, there is no limit of maximum expression for RNA-seq data. Due to the differences in these technologies, the statistical models used to fit the data are different between the two methods.",
    "crumbs": [
      "Data analyses",
      "The RNAseq count matrix"
    ]
  },
  {
    "objectID": "develop/05b_count_matrix.html#modeling-count-data",
    "href": "develop/05b_count_matrix.html#modeling-count-data",
    "title": "The RNAseq count matrix",
    "section": "Modeling count data",
    "text": "Modeling count data\nRNAseq count data can be modeled using a Poisson distribution. this particular distribution is fitting for data where the number of cases is very large but the probability of an event occurring is very small. To give you an example, think of the lottery: many people buy lottery tickets (high number of cases), but only very few win (the probability of the event is small).\nWith RNA-Seq data, a very large number of RNAs are represented and the probability of pulling out a particular transcript is very small. Thus, it would be an appropriate situation to use the Poisson distribution. However, a unique property of this distribution is that the mean == variance. Realistically, with RNA-Seq data there is always some biological variation present across the replicates (within a sample class). Genes with larger average expression levels will tend to have larger observed variances across replicates.\nThe model that fits best, given this type of variability observed for replicates, is the Negative Binomial (NB) model. Essentially, the NB model is a good approximation for data where the mean &lt; variance, as is the case with RNA-Seq count data.\nHere we calculate the mean and the variance per gene for all columns and genes:\n\nmeans &lt;- rowMeans(data, na.rm = TRUE)\nvariances &lt;- rowVars(as.matrix(data), na.rm = TRUE)\n\n# Create a new dataframe 'df' to store the results\ndf &lt;- data.frame(rownames = rownames(data), mean_counts = means, variance_counts = variances)\n\nRun the following code to plot the mean versus variance of each gene for our data:\n\nggplot(df) +\n  geom_point(aes(x=mean_counts, y=variance_counts)) + \n  geom_abline(intercept = 0, slope = 1, color=\"red\") +\n  scale_y_log10() +\n  scale_x_log10()\n\n\n\n\n\n\n\n\nIf the mean would be equal to the variance, the cloud of points would follow the straight red line.",
    "crumbs": [
      "Data analyses",
      "The RNAseq count matrix"
    ]
  },
  {
    "objectID": "develop/04b_pipelines.html",
    "href": "develop/04b_pipelines.html",
    "title": "Nextflow & nf-core pipelines",
    "section": "",
    "text": "Section Overview\n\n\n\n‚è∞ Time Estimation: 40 minutes\nüí¨ Learning Objectives:\n\nUnderstand what is a pipeline/workflow and the Nextflow language.\nLearn about existing automated workflows from the bioinformatics community.\nLearn how to use the nf-core pipeline for bulk RNAseq analysis.\nAutomating your workflow: Nextflow and nf-core pipelines\nA pipeline consists of a chain of processing elements (processes, threads, coroutines, functions, etc.), arranged so that the output of each element is the input of the next; the name is by analogy to a physical pipeline. Narrowly speaking, a pipeline is linear and one-directional, though sometimes the term is applied to more general flows. For example, a primarily one-directional pipeline may have some communication in the other direction, known as a return channel or backchannel, or a pipeline may be fully bi-directional. Flows with one-directional tree and directed acyclic graph topologies behave similarly to (linear) pipelines‚Äì the lack of cycles makes them simple ‚Äì and thus may be loosely referred to as ‚Äúpipelines‚Äù.\nIn our case, a ‚Äúpreprocessing‚Äù pipeline consists on concatenating all the processes explained in the previous lesson so that we have one continuous workflow from raw sequencing reads to a count matrix. For example, the RNASeq pipeline developed by the nf-core community (see below).\nAs you can see in the image above, each process, such as read trimming, QC, alignment, etc, are connected to each other. A workflow created in this way is ideal to reproduce analysis and makes the task of analysing RNAseq data much much easier.",
    "crumbs": [
      "Data processing",
      "Nextflow & nf-core pipelines"
    ]
  },
  {
    "objectID": "develop/04b_pipelines.html#nextflow-pipelines",
    "href": "develop/04b_pipelines.html#nextflow-pipelines",
    "title": "Nextflow & nf-core pipelines",
    "section": "Nextflow pipelines",
    "text": "Nextflow pipelines\n\nNextflow is a bioinformatics workflow manager that enables the development of portable and reproducible workflows. It supports deploying workflows on a variety of execution platforms including local, HPC schedulers, AWS Batch, Google Cloud Life Sciences, and Kubernetes. Additionally, it provides support for manage your workflow dependencies through built-in support for Conda, Spack, Docker, Podman, Singularity, Modules, and more.\nWith the rise of big data, techniques to analyse and run experiments on large datasets are increasingly necessary. Parallelization and distributed computing are the best ways to tackle this problem, but the tools commonly available to the bioinformatics community often lack good support for these techniques, or provide a model that fits badly with the specific requirements in the bioinformatics domain and, most of the time, require the knowledge of complex tools or low-level APIs.\nNextflow framework is based on the dataflow programming model, which greatly simplifies writing parallel and distributed pipelines without adding unnecessary complexity and letting you concentrate on the flow of data, i.e.¬†the functional logic of the application/algorithm.\nIt doesn‚Äôt aim to be another pipeline scripting language yet, but it is built around the idea that the Linux platform is the lingua franca of data science, since it provides many simple command line and scripting tools, which by themselves are powerful, but when chained together facilitate complex data manipulations.\nIn practice, this means that a Nextflow script is defined by composing many different processes. Each process can execute a given bioinformatics tool or scripting language, to which is added the ability to coordinate and synchronize the processes execution by simply specifying their inputs and outputs.\n\nFeatures\n\nFast prototyping: Nextflow allows you to write a computational pipeline by making it simpler to put together many different tasks. You may reuse your existing scripts and tools and you don‚Äôt need to learn a new language or API to start using it.\nReproducibility: Nextflow supports Docker and Singularity containers technology. This, along with the integration of the GitHub code sharing platform, allows you to write self-contained pipelines, manage versions and to rapidly reproduce any former configuration.\nPortable: Nextflow provides an abstraction layer between your pipeline‚Äôs logic and the execution layer, so that it can be executed on multiple platforms without it changing. It provides out of the box executors for GridEngine, SLURM, LSF, PBS, Moab and HTCondor batch schedulers and for Kubernetes, Amazon AWS, Google Cloud and Microsoft Azure platforms.\nUnified parallelism: Nextflow is based on the dataflow programming model which greatly simplifies writing complex distributed pipelines. Parallelisation is implicitly defined by the processes input and output declarations. The resulting applications are inherently parallel and can scale-up or scale-out, transparently, without having to adapt to a specific platform architecture.\nContinuous checkpoints: All the intermediate results produced during the pipeline execution are automatically tracked. This allows you to resume its execution, from the last successfully executed step, no matter what the reason was for it stopping.",
    "crumbs": [
      "Data processing",
      "Nextflow & nf-core pipelines"
    ]
  },
  {
    "objectID": "develop/04b_pipelines.html#the-nf-core-project",
    "href": "develop/04b_pipelines.html#the-nf-core-project",
    "title": "Nextflow & nf-core pipelines",
    "section": "The nf-core project",
    "text": "The nf-core project\n\nThe nf-core project is a community effort to collect a curated set of analysis pipelines built using Nextflow, an incredibly powerful and flexible workflow language. This means that all the tools and steps used in your RNAseq workflow can be automated and easily reproduced by other researchers if necessary. In addition, if you use any of the nf-core pipelines, you will be sure that all the necessary tools are available to you in any computer platform (Cloud computing, HPC or your personal computer).\n\n\n\nnf-core/rnaseq pipeline metro schematic.\n\n\nThe RNAseq pipeline enables using many different tools, such as STAR, RSEM, HISAT2 or Salmon, and allows quantification of gene/isoform counts and provides extensive quality control checks at each step of the workflow. We encourage your to take a look at the pipeline and its documentation if you need to preprocess your RNAseq reads from stratch, as well as checkout this introductory video.",
    "crumbs": [
      "Data processing",
      "Nextflow & nf-core pipelines"
    ]
  },
  {
    "objectID": "develop/04b_pipelines.html#nf-corernaseq-usage-for-version-3.11.2",
    "href": "develop/04b_pipelines.html#nf-corernaseq-usage-for-version-3.11.2",
    "title": "Nextflow & nf-core pipelines",
    "section": "nf-core/rnaseq: Usage for version 3.11.2",
    "text": "nf-core/rnaseq: Usage for version 3.11.2\nIn this section, we will see some of the most important arguments that the pipeline uses to run a RNAseq preprocessing workflow. There are many more options for advanced users and we really encourage you to check them out at the official webpage. Below you will find the arguments we will use for our own data.\n\nRunning the pipeline\nThe typical command for running the pipeline is as follows:\nnextflow run nf-core/rnaseq --input samplesheet.csv --outdir &lt;OUTDIR&gt; --genome GRCh37 -profile docker\nThis will launch the pipeline with the docker configuration profile. See below for more information about profiles.\nNote that the pipeline will create the following files in your working directory:\nwork            # Directory containing the nextflow working files\nresults         # Finished results (configurable, see below)\n.nextflow_log   # Log file from Nextflow\n\n# Other nextflow hidden files, eg. history of pipeline runs and old logs.\n\n\n\n\n\n\nNote\n\n\n\n\nOptions with a single hyphen are part of Nextflo, i.e.¬†-profile.\nPipeline specific parameters use a double-hyphen, i.e.¬†--input.\n\n\n\n\n\nCore Nextflow arguments\n\n-work-dir\nUse this parameter to choose a path where the work folder, which containing all the intermediary files from the pipeline, should be saved.\n\n\n-profile\nUse this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments.\nSeveral generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Conda) - see below. When using Biocontainers, most of these software packaging methods pull Docker containers from quay.io e.g FastQC except for Singularity which directly downloads Singularity images via https hosted by the Galaxy project and Conda which downloads and installs software locally from Bioconda.\n\n\n\n\n\n\nTip\n\n\n\nIt is highly recommended to use Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported.\n\n\nThe pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation.\nNote that multiple profiles can be loaded, for example: -profile test,docker - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles.\nIf -profile is not specified, the pipeline will run locally and expect all software to be installed and available on the PATH. This is not recommended.\n\ndocker\n\nA generic configuration profile to be used with Docker\n\nsingularity\n\nA generic configuration profile to be used with Singularity\n\npodman\n\nA generic configuration profile to be used with Podman\n\nshifter\n\nA generic configuration profile to be used with Shifter\n\ncharliecloud\n\nA generic configuration profile to be used with Charliecloud\n\nconda\n\nA generic configuration profile to be used with Conda. Please only use Conda as a last resort i.e.¬†when it‚Äôs not possible to run the pipeline with Docker, Singularity, Podman, Shifter or Charliecloud.\n\ntest\n\nA profile with a complete configuration for automated testing\nIncludes links to test data so needs no other parameters\n\n\n\n\n-name\nUse this parameter to give a unique name to the run. This name cannot be used again for another run in the same folder. This is very useful to track different runs since otherwise Nextflow will assign a random unique name to the run.\n\n\n-resume\nSpecify this when restarting a pipeline. Nextflow will used cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. You can also supply a run name to resume a specific run: -resume [run-name]. Use the nextflow log command to show previous run names.\n\n\n-r\nIt is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you‚Äôll be running the same version of the pipeline, even if there have been changes to the code since.\nFirst, go to the nf-core/rnaseq releases page and find the latest version number (numeric only), e.g., 1.3.1. Then specify this when running the pipeline with -r (one hyphen), e.g., -r 1.3.1.\nThis version number will be logged in reports when you run the pipeline, so that you‚Äôll know what you used when you look back in the future.\n\n\n\nRNAseq pipeline arguments\n\nSamplesheet input\nYou will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 4 columns, and a header row as shown in the examples below.\n--input '[path to samplesheet file]'\nMultiple runs of the same sample\nThe sample identifiers have to be the same when you have re-sequenced the same sample more than once e.g.¬†to increase sequencing depth. The pipeline will concatenate the raw reads before performing any downstream analysis. Below is an example for the same sample sequenced across 3 lanes:\nsample,fastq_1,fastq_2,strandedness\nCONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz,unstranded\nCONTROL_REP1,AEG588A1_S1_L003_R1_001.fastq.gz,AEG588A1_S1_L003_R2_001.fastq.gz,unstranded\nCONTROL_REP1,AEG588A1_S1_L004_R1_001.fastq.gz,AEG588A1_S1_L004_R2_001.fastq.gz,unstranded\nFull samplesheet\nThe pipeline will auto-detect whether a sample is single- or paired-end using the information provided in the samplesheet. The samplesheet can have as many columns as you desire, however, there is a strict requirement for the first 4 columns to match those defined in the table below.\nA final samplesheet file consisting of both single- and paired-end data may look something like the one below. This is for 6 samples, where TREATMENT_REP3 has been sequenced twice.\nsample,fastq_1,fastq_2,strandedness\nCONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz,forward\nCONTROL_REP2,AEG588A2_S2_L002_R1_001.fastq.gz,AEG588A2_S2_L002_R2_001.fastq.gz,forward\nCONTROL_REP3,AEG588A3_S3_L002_R1_001.fastq.gz,AEG588A3_S3_L002_R2_001.fastq.gz,forward\nTREATMENT_REP1,AEG588A4_S4_L003_R1_001.fastq.gz,,reverse\nTREATMENT_REP2,AEG588A5_S5_L003_R1_001.fastq.gz,,reverse\nTREATMENT_REP3,AEG588A6_S6_L003_R1_001.fastq.gz,,reverse\nTREATMENT_REP3,AEG588A6_S6_L004_R1_001.fastq.gz,,reverse\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nsample\nCustom sample name. This entry will be identical for multiple sequencing libraries/runs from the same sample. Spaces in sample names are automatically converted to underscores (_).\n\n\nfastq_1\nFull path to FastQ file for Illumina short reads 1. File has to be gzipped and have the extension ‚Äú.fastq.gz‚Äù or ‚Äú.fq.gz‚Äù.\n\n\nfastq_2\nFull path to FastQ file for Illumina short reads 2. File has to be gzipped and have the extension ‚Äú.fastq.gz‚Äù or ‚Äú.fq.gz‚Äù.\n\n\nstrandedness\nSample strand-specificity. Must be one of unstranded, forward or reverse.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe group and replicate columns were replaced with a single sample column as of v3.1 of the pipeline. The sample column is essentially a concatenation of the group and replicate columns, however it now also offers more flexibility in instances where replicate information is not required e.g.¬†when sequencing clinical samples. If all values of sample have the same number of underscores, fields defined by these underscore-separated names may be used in the PCA plots produced by the pipeline, to regain the ability to represent different groupings.\n\n\n\n\nResults folder\nThe output directory where the results of the pipeline will be saved.\n--outdir '[path to output]'\n\n\nAlignment options\nBy default, the pipeline uses STAR (i.e.¬†--aligner star_salmon) to map the raw FastQ reads to the reference genome, project the alignments onto the transcriptome and to perform the downstream BAM-level quantification with Salmon. STAR is fast but requires a lot of memory to run, typically around 38GB for the Human GRCh37 reference genome. Since the RSEM (i.e.¬†--aligner star_rsem) workflow in the pipeline also uses STAR you should use the HISAT2 aligner (i.e.¬†--aligner hisat2) if you have memory limitations.\nYou also have the option to pseudo-align and quantify your data with Salmon by providing the --pseudo_aligner salmon parameter. Salmon will then be run in addition to the standard alignment workflow defined by --aligner, mainly because it allows you to obtain QC metrics with respect to the genomic alignments. However, you can provide the --skip_alignment parameter if you would like to run Salmon in isolation.\nTwo additional parameters --extra_star_align_args and --extra_salmon_quant_args were added in v3.10 of the pipeline that allow you to append any custom parameters to the STAR align and Salmon quant commands, respectively. Note, the --seqBias and --gcBias are not provided to Salmon quant by default so you can provide these via --extra_salmon_quant_args '--seqBias --gcBias' if required.\n\n\nReference genome files\nThe minimum reference genome requirements are a FASTA and GTF file, all other files required to run the pipeline can be generated from these files. However, it is more storage and compute friendly if you are able to re-use reference genome files as efficiently as possible. It is recommended to use the --save_reference parameter if you are using the pipeline to build new indices (e.g.¬†those unavailable on AWS iGenomes) so that you can save them somewhere locally. The index building step can be quite a time-consuming process and it permits their reuse for future runs of the pipeline to save disk space. You can then either provide the appropriate reference genome files on the command-line via the appropriate parameters (e.g.¬†--star_index '/path/to/STAR/index/') or via a custom config file.\n\nIf --genome is provided then the FASTA and GTF files (and existing indices) will be automatically obtained from AWS-iGenomes unless these have already been downloaded locally in the path specified by --igenomes_base.\nIf --gff is provided as input then this will be converted to a GTF file, or the latter will be used if both are provided.\nIf --gene_bed is not provided then it will be generated from the GTF file.\nIf --additional_fasta is provided then the features in this file (e.g.¬†ERCC spike-ins) will be automatically concatenated onto both the reference FASTA file as well as the GTF annotation before building the appropriate indices.\n\nWhen using --aligner star_rsem, both the STAR and RSEM indices should be present in the path specified by --rsem_index (see #568)\n\n\n\n\n\n\nNote\n\n\n\nCompressed reference files are also supported by the pipeline i.e.¬†standard files with the .gz extension and indices folders with the tar.gz extension.\n\n\n\n\nProcess skipping options\nThere are several options to skip various steps within the workflow.\n\n--skip_bigwig: Skip bigWig file creation\n--skip_stringtie: Skip StringTie.\n--skip_fastqc: Skip FastQC.\n--skip_preseq: Skip Preseq.\n--skip_dupradar: Skip dupRadar.\n--skip_qualimap: Skip Qualimap.\n--skip_rseqc: Skip RSeQC.\n--skip_biotype_qc: Skip additional featureCounts process for biotype QC.\n--skip_deseq2_qc: Skip DESeq2 PCA and heatmap plotting.\n--skip_multiqc: Skip MultiQC.\n--skip_qc: Skip all QC steps except for MultiQC.\n\n\n\n\nUnderstanding the results folder\nThe pipeline will save everything inside the --outdir folder. Inside it you will find different results. In this section we will go through the most relevant results for this workshop. If you are interested in the full documentation, visit the nf-core rnaseq output docs.\n\n1. pipeline_info\nFirst, we will check the pipeline_info folder. Nextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.\npipeline_info/\n\nReports generated by Nextflow: execution_report.html, execution_timeline.html, execution_trace.txt and pipeline_dag.dot/pipeline_dag.svg.\nReports generated by the pipeline: pipeline_report.html, pipeline_report.txt and software_versions.yml. The pipeline_report* files will only be present if the --email / --email_on_fail parameter‚Äôs are used when running the pipeline.\nReformatted samplesheet files used as input to the pipeline: samplesheet.valid.csv.\n\n\n\n2. genome\nA number of genome-specific files are generated by the pipeline because they are required for the downstream processing of the results. If the --save_reference parameter is provided then these will be saved in the genome/ directory. It is recommended to use the --save_reference parameter if you are using the pipeline to build new indices so that you can save them somewhere locally. The index building step can be quite a time-consuming process and it permits their reuse for future runs of the pipeline to save disk space.\n\n\n\n\n\n\nWarning\n\n\n\nIf you have not selected --save_reference, you will instead get a README.txt file containing information about the reference that was used for the run.\n\n\ngenome/\n\n*.fa, *.gtf, *.gff, *.bed, .tsv: If the --save_reference parameter is provided then all of the genome reference files will be placed in this directory\n\ngenome/index/\n\nstar/: Directory containing STAR indices.\nhisat2/: Directory containing HISAT2 indices.\nrsem/: Directory containing STAR and RSEM indices.\nsalmon/: Directory containing Salmon indices.\n\n\n\n3. multiqc\nResults generated by MultiQC collate pipeline QC from supported tools i.e.¬†FastQC, Cutadapt, SortMeRNA, STAR, RSEM, HISAT2, Salmon, SAMtools, Picard, RSeQC, Qualimap, Preseq and featureCounts. Additionally, various custom content has been added to the report to assess the output of dupRadar, DESeq2 and featureCounts biotypes, and to highlight samples failing a mimimum mapping threshold or those that failed to match the strand-specificity provided in the input samplesheet. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability.\nmultiqc/\n\nmultiqc_report.html: a standalone HTML file that can be viewed in your web browser.\nmultiqc_data/: directory containing parsed statistics from the different tools used in the pipeline.\nmultiqc_plots/: directory containing individual plots from the different tools used in the pipeline.\n\n\n\n4. fastqc\nThe FastQC plots in this directory are generated relative to the raw, input reads. They may contain adapter sequence and regions of low quality.\nfastqc/\n\n*_fastqc.html: FastQC report containing quality metrics.\n*_fastqc.zip: Zip archive containing the FastQC report, tab-delimited data file and plot images.\n\n\n\n5. trimgalore\nIn this folder you will find your trimmed and filtered fastq files from TrimGalore, including its fastqc results!\ntrimgalore/\n\n*.fq.gz: If --save_trimmed is specified, FastQ files after adapter trimming will be placed in this directory.\n*_trimming_report.txt: Log file generated by Trim Galore!.\n\ntrimgalore/fastqc/\n\n*_fastqc.html: FastQC report containing quality metrics for read 1 (and read2 if paired-end) after adapter trimming.\n*_fastqc.zip: Zip archive containing the FastQC report, tab-delimited data file and plot images.\n\n\n\n6. aligner\nDepending on the aligner that you use, this folder may change its contents and name. Generally, here you can find the aligned reads in .bam format, samtool stats, duplicated stats and different QC tools related to mapped reads.\nAlso, depending on the --aligner option you can either find the quantification results from either salmon (pseudoquantification) or rsem (traditional quantification, i.e., a count matrix)\nFrom star_salmon\nstar_salmon/\n\n*.Aligned.out.bam: If --save_align_intermeds is specified the original BAM file containing read alignments to the reference genome will be placed in this directory.\n\nstar_salmon/log/\n\n*.SJ.out.tab: File containing filtered splice junctions detected after mapping the reads.\n*.Log.final.out: STAR alignment report containing the mapping results summary.\n*.Log.out and *.Log.progress.out: STAR log files containing detailed information about the run. Typically only useful for debugging purposes.\n\nstar_salmon/salmon/\n\nsalmon.merged.gene_counts.tsv: Matrix of gene-level raw counts across all samples.\nsalmon.merged.gene_tpm.tsv: Matrix of gene-level TPM values across all samples.\nsalmon.merged.gene_counts.rds: RDS object that can be loaded in R that contains a SummarizedExperiment container with the TPM (abundance), estimated counts (counts) and transcript length (length) in the assays slot for genes.\nsalmon.merged.gene_counts_scaled.tsv: Matrix of gene-level scaled counts across all samples.\nsalmon.merged.gene_counts_scaled.rds: RDS object that can be loaded in R that contains a SummarizedExperiment container with the TPM (abundance), estimated counts (counts) and transcript length (length) in the assays slot for genes.\nsalmon.merged.gene_counts_length_scaled.tsv: Matrix of gene-level length-scaled counts across all samples.\nsalmon.merged.gene_counts_length_scaled.rds: RDS object that can be loaded in R that contains a SummarizedExperiment container with the TPM (abundance), estimated counts (counts) and transcript length (length) in the assays slot for genes.\nsalmon.merged.transcript_counts.tsv: Matrix of isoform-level raw counts across all samples.\nsalmon.merged.transcript_tpm.tsv: Matrix of isoform-level TPM values across all samples.\nsalmon.merged.transcript_counts.rds: RDS object that can be loaded in R that contains a SummarizedExperiment container with the TPM (abundance), estimated counts (counts) and transcript length (length) in the assays slot for transcripts.\nsalmon_tx2gene.tsv: Tab-delimited file containing gene to transcripts ids mappings.\n\nstar_salmon/salmon/&lt;SAMPLE&gt;/\n\nlogs/: Contains the file salmon_quant.log giving a record of Salmon‚Äôs quantification.\nquant.genes.sf: Salmon gene-level quantification of the sample, including feature length, effective length, TPM, and number of reads.\nquant.sf: Salmon transcript-level quantification of the sample, including feature length, effective length, TPM, and number of reads.\n\nFrom star_rsem\nstar_rsem/\n\nrsem.merged.gene_counts.tsv: Matrix of gene-level raw counts across all samples.\nrsem.merged.gene_tpm.tsv: Matrix of gene-level TPM values across all samples.\nrsem.merged.transcript_counts.tsv: Matrix of isoform-level raw counts across all samples.\nrsem.merged.transcript_tpm.tsv: Matrix of isoform-level TPM values across all samples.\n*.genes.results: RSEM gene-level quantification results for each sample.\n*.isoforms.results: RSEM isoform-level quantification results for each sample.\n\nstar_rsem/&lt;SAMPLE&gt;.stat/\n\n*.cnt, *.model, *.theta: RSEM counts and statistics for each sample.\n\nstar_rsem/log/\n\n*.log: STAR alignment report containing the mapping results summary.\n\n\n\n7. pseudoaligner\nThis is the same output as the star_salmon/salmon folder.\n\nParts of this lesson have been taken from Wikipedia, the Nextflow webpage and the nf-core project webpage.",
    "crumbs": [
      "Data processing",
      "Nextflow & nf-core pipelines"
    ]
  },
  {
    "objectID": "develop/03_data_explanation.html",
    "href": "develop/03_data_explanation.html",
    "title": "Dataset explanation",
    "section": "",
    "text": "Dataset explanation\n\n\n\n\n\n\nSection Overview\n\n\n\n‚è∞ Time Estimation: 5 minutes\nüí¨ Learning Objectives:\n\nExplain the experiment and its objectives.\n\n\n\nWe will be using the sequencing reads from the RNA-Seq dataset that is part of a larger study described in Kenny PJ et al, Cell Rep 2014.\nNonetheless, we have decided to make the dataset and the study a bit more spicy. We have modified our gene annotation file so that we would get some interesting conditions and results! The story goes like this:\nA mysterious condition named ‚ÄúVampirium‚Äù is causing individuals to exhibit aggressive behavior and a strange desire for blood. Local individuals treat the symptoms using a concoction named ‚ÄúGarlicum‚Äù, which seem to return the individuals to a normal status.\n\nScientists suspect that the condition might be related to changes in expression of genes related to blood production and impulse control. Thus, they have taken samples of individuals affected by Vampirum, individuals cured by the Garlicum concoction and healthy individuals used as control samples. With these samples, they have performed bulk RNAseq.\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\n\nAs you go through the upcoming sections, please keep the following questions in mind:\n\nWhat patterns of expression can we identify between the Vampirium individuals and controls?\nWhat happens to the Vampirium individuals when treated with Garlicum?\nAre there any genes shared between the two comparisons?\n\n\n\n\n\n\n\nThis lesson was originally developed by members of the teaching team (Mary Piper, Meeta Mistry, Radhika Khetani) at the Harvard Chan Bioinformatics Core (HBC).",
    "crumbs": [
      "Experiment design",
      "Dataset explanation"
    ]
  },
  {
    "objectID": "develop/06_exploratory_analysis.html",
    "href": "develop/06_exploratory_analysis.html",
    "title": "Exploratory analysis with DESeq2",
    "section": "",
    "text": "Approximate time: 40 minutes",
    "crumbs": [
      "Data analyses",
      "Quality control",
      "Exploratory analysis with DESeq2"
    ]
  },
  {
    "objectID": "develop/06_exploratory_analysis.html#learning-objectives",
    "href": "develop/06_exploratory_analysis.html#learning-objectives",
    "title": "Exploratory analysis with DESeq2",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nRecognize the importance of methods for count data transformation\nDescribe the PCA (principal component analysis) technique\nInterpret different examples of PCA plots\nEvaluate sample quality using PCA and hierarchical clustering",
    "crumbs": [
      "Data analyses",
      "Quality control",
      "Exploratory analysis with DESeq2"
    ]
  },
  {
    "objectID": "develop/06_exploratory_analysis.html#vampirium-quality-assessment-and-exploratory-analysis-using-deseq2",
    "href": "develop/06_exploratory_analysis.html#vampirium-quality-assessment-and-exploratory-analysis-using-deseq2",
    "title": "Exploratory analysis with DESeq2",
    "section": "Vampirium quality assessment and exploratory analysis using DESeq2",
    "text": "Vampirium quality assessment and exploratory analysis using DESeq2\nNow that we have a good understanding of the QC steps normally employed for RNA-seq, let‚Äôs implement them for the Vampirium dataset we are going to be working with.\n\nTransform normalized counts for the Vampirium dataset\nTo improve the distances/clustering for the PCA and hierarchical clustering visualization methods, we need to moderate the variance across the mean by applying the rlog transformation to the normalized counts.\n\n### Transform counts for data visualization\nrld &lt;- rlog(dds, blind=TRUE)\n\n## Or using the vst for &gt; 20 samples\n#vsd &lt;- vst(dds, blind = TRUE)\n\nThe blind=TRUE argument is to make sure that the rlog() function does not take our sample groups into account - i.e.¬†does the transformation in an unbiased manner. When performing quality assessment, it is important to include this option.\nThe rlog() function returns a DESeqTransform object, another type of DESeq-specific object. The reason you don‚Äôt just get a matrix of transformed values is because all of the parameters (i.e.¬†size factors) that went into computing the rlog transform are stored in that object. We use this object to plot the PCA and hierarchical clustering figures for quality assessment.\n\n\nPrincipal component analysis (PCA) for the Vampirium dataset\nWe are now ready for the QC steps, let‚Äôs start with PCA!\nDESeq2 has a built-in function for generating PCA plots using ggplot2 under the hood. In addition, it takes the rlog object as an input directly, hence saving us the trouble of extracting the relevant information from it.\nThe function plotPCA() requires two arguments as input: a DESeqTransform object and the ‚Äúintgroup‚Äù (interesting group), i.e.¬†the name of the column in our metadata that has information about the experimental sample groups.\n\n### Plot PCA \nplotPCA(rld, intgroup=\"condition\")\n\n\n\n\n\n\n\n\n\nExercise 1:\nBy default plotPCA() uses the top 500 most variable genes. You can change this by adding the ntop= argument and specifying how many of the genes you want the function to consider. For example, try 1000 genes. Did the plot change a lot?\nYour code here:\n\n#your code here\n\n\nExercise 2:\n\nWhat does the above plot tell you about the similarity of samples?\nDoes it fit the expectation from the experimental design?\nWhat do you think the %variance information (in the axes titles) tell you about the data in the context of the PCA?\n\n\nExtra\nThe plotPCA() function will only return the values for PC1 and PC2. If you would like to explore the additional PCs in your data or if you would like to identify genes that contribute most to the PCs, you can use the prcomp() function. For example, to plot any of the PCs we could run the following code:\n\n# Input is a matrix of log transformed values\nrld_mat &lt;- assay(rld) # extract rlog count matrix\npca &lt;- prcomp(t(rld_mat)) # perform PCA on the transposed (t) matrix of data \n\nTo see what the PCA object contains we can use again the attributes() function:\n\nattributes(pca)\n\n$names\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n$class\n[1] \"prcomp\"\n\n\nYou can check the ?prcomp() for more information. The most important variables are: - sdev: standard deviation explained by each PC. - rotation: contribution of each gene to each PC. - x: PC values for each sample (we use this values for our plots)\nWe can create a new object that contains all our metadata information and the PC values:\n\ndf &lt;- cbind(meta, pca$x) # Create data frame with metadata and PC3 and PC4 values for input to ggplot\n\n\n# ggplot with info for all PCAs\nggplot(df) + geom_point(aes(x=PC3, y=PC4, color = condition))\n\n\n\n\n\n\n\n\nIf you want to add PC variation information to the plot we can fetch it using the summary() function and take the second row:\n\nsummary(pca)\n\nImportance of components:\n                           PC1    PC2    PC3     PC4     PC5     PC6     PC7\nStandard deviation     12.2938 8.9055 6.3378 5.45687 5.21247 4.93050 4.85458\nProportion of Variance  0.4026 0.2112 0.1070 0.07931 0.07237 0.06475 0.06277\nCumulative Proportion   0.4026 0.6138 0.7208 0.80011 0.87248 0.93723 1.00000\n                             PC8\nStandard deviation     6.373e-14\nProportion of Variance 0.000e+00\nCumulative Proportion  1.000e+00\n\npca_var &lt;- summary(pca)$importance[2,] # second row is stored in the object \"importance\"\npca_var &lt;- round(pca_var * 100, digits = 2) # make it percentage and round to 2 digits\n\nFinally, we can add it to our plot:\n\nggplot(df) + geom_point(aes(x=PC3, y=PC4, color = condition)) + \n  xlab(paste0(\"PC3: \",pca_var[\"PC3\"], \"% variance\")) + \n  ylab(paste0(\"PC4: \",pca_var[\"PC4\"], \"% variance\")) \n\n\n\n\n\n\n\n\n\n\nHierarchical Clustering for the Vampirium dataset\nThere is no built-in function in DESeq2 for plotting the heatmap for displaying the pairwise correlation or distances between all the samples and the hierarchical clustering information; we will use the pheatmap() function from the pheatmap package. This function cannot use the DESeqTransform object as input, but requires a matrix or dataframe. So, the first thing to do is retrieve that information from the rld object using a function called assay().\n\n### Extract the rlog matrix from the object\nrld_mat &lt;- assay(rld)    \n\nNext, we need to compute the distances values for all the samples. We can do this using the dist function:\n\nsampleDists &lt;- dist(t(rld_mat)) #distances are computed by rows, so we need to transpose (t) the matrix\nsampleDistMatrix &lt;- as.matrix(sampleDists)\n\nLet‚Äôs take a look at the column and row names of the correlation matrix.\n\n## check the output of sampleDistMatrix, make note of the row names and column names\nhead(sampleDistMatrix)\n\n            control_3 control_2 control_1 vampirium_3 vampirium_2 vampirium_1\ncontrol_3     0.00000  20.14090  20.12224    30.72807    27.38707    27.31294\ncontrol_2    20.14090   0.00000  19.13724    30.60010    27.76047    27.45923\ncontrol_1    20.12224  19.13724   0.00000    31.70396    28.23922    27.71067\nvampirium_3  30.72807  30.60010  31.70396     0.00000    23.39985    22.08134\nvampirium_2  27.38707  27.76047  28.23922    23.39985     0.00000    18.74102\nvampirium_1  27.31294  27.45923  27.71067    22.08134    18.74102     0.00000\n            garlicum_3 garlicum_2\ncontrol_3     26.85721   27.95291\ncontrol_2     26.01064   27.13026\ncontrol_1     25.89459   26.02687\nvampirium_3   33.26245   35.50412\nvampirium_2   31.02035   33.25194\nvampirium_1   30.06386   32.12089\n\nhead(meta)\n\n\n  \n\n\n\nYou will notice that they match the names we have given our samples in the metadata data frame we started with. It is important that these match, so we can use the annotation argument below to plot a color block across the top. This block enables easy visualization of the hierarchical clustering.\nNow, let‚Äôs plot the heatmap!\n\n### Load pheatmap package\nlibrary(pheatmap)\n\npheatmap(sampleDistMatrix, annotation_col = meta %&gt;% column_to_rownames(\"sample\") %&gt;% \n           dplyr::select(condition)) # we only want to use the condition column as an annotation\n\n\n\n\n\n\n\n\nWhen you plot using pheatmap() the hierarchical clustering information is used to place similar samples together and this information is represented by the tree structure along the axes. The annotation argument accepts a dataframe as input, in our case it is the meta data frame.\nExercise 2\nInstead of using distances between expression patterns, check the Pearson correlation between samples using cor(). Use your rlog count matrix as an input.\nYour code here:\n\n#your code here\n\nExtra\nThere are many arguments and options for the pheatmap() function. You could, for example, change the color scale used, remove the dendograms, avoid clustering or even scale the values per row or per column.\n\nlibrary(RColorBrewer)\nheat.colors &lt;- brewer.pal(6, \"Blues\") # Colors from the RColorBrewer package (only 6)\nheat.colors &lt;- colorRampPalette(heat.colors)(100) # Interpolate 100 colors\n\n\npheatmap(sampleDistMatrix, annotation = meta %&gt;% column_to_rownames(\"sample\") %&gt;% dplyr::select(\"condition\"), \n         color = heat.colors, border_color=NA, fontsize = 10, \n         fontsize_row = 10, height=20)\n\n\n\n\n\n\n\n\nYou can check all the colors that RColorBrewer offers by using the following command: display.brewer.all()\n\ndisplay.brewer.all()",
    "crumbs": [
      "Data analyses",
      "Quality control",
      "Exploratory analysis with DESeq2"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html",
    "href": "develop/04a_preprocessing.html",
    "title": "Preprocessing steps",
    "section": "",
    "text": "Section Overview\n\n\n\n‚è∞ Time Estimation: 40 minutes\nüí¨ Learning Objectives:\n\nUnderstand the different steps of the RNA-seq workflow, from RNA extraction to assessing the expression levels of genes.\nFrom raw sequence reads to count matrix: the RNA-seq workflow\nTo perform differential gene expression analysis (DEA), we need to start with a matrix of counts representing the levels of gene expression. It is important to understand how the count matrix is generated, before diving into the statistical analysis.\nIn this lesson we will briefly discuss the RNA-processing pipeline for bulk RNA-seq, and the different steps we take to go from raw sequencing reads to a gene expression count matrix.",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#rna-extraction-and-library-preparation",
    "href": "develop/04a_preprocessing.html#rna-extraction-and-library-preparation",
    "title": "Preprocessing steps",
    "section": "1. RNA Extraction and library preparation",
    "text": "1. RNA Extraction and library preparation\nBefore RNA can be sequenced, it must first be extracted and separated from its cellular environment and prepared into a cDNA library. There are a number of steps involved which are outlined in the figure below, and in parallel there are various quality checks implemented to make sure we have good quality RNA to move forward with. We briefly describe some of these steps below.\na. Enriching for RNA. Once the sample has been treated with DNAse to remove any contaminating DNA sequence, the sample undergoes either selection of the mRNA (polyA selection) or depletion of the ribosomal RNA (rRNA).\nGenerally, rRNA represents the majority of the RNA present in a cell, while messenger RNAs represent a small percentage of total RNA, ~2% in humans. Therefore, if we want to study the protein-coding genes, we need to enrich mRNA or deplete the rRNA. For differential gene expression analysis, it is best to enrich for Poly(A)+, unless you are aiming to obtain information about long non-coding RNAs, in which case rRNA depletion is recommended.\n\nRNA Quality check: It is essential to check the integrity of the extracted RNA prior to starting the cDNA library prepation. Traditionally, RNA integrity was assessed via gel electrophoresis by visual inspection of the ribosomal RNA bands; but that method is time consuming and imprecise. The Bioanalyzer system from Agilent will rapidly assess RNA integrity and calculate an RNA Integrity Number (RIN), which facilitates the interpretation and reproducibility of RNA quality. RIN, essentially, provides a means by which RNA quality from different samples can be compared to each other in a standardized manner.\n\nb. Fragmentation and size selection. The remaining RNA molecules are then fragmented. This is done either via chemical, enzymatic (e.g., RNAses) or physical processes (e.g., chemical/mechanical shearing). These fragments then undergo size selection to retain only those fragments within a size range that Illumina sequencing machines can handle best, i.e., between 150 to 300 bp.\n\nFragment size quality check: After size selection/exclusion the fragment size distribution should be assessed to ensure that it is unimodal and well-defined.\n\nc.¬†Reverse transcribe RNA into double-stranded cDNA. Information about which strand a fragment originated from can be preserved by creating stranded libraries. The most commonly used method incorporates deoxy-UTP during the synthesis of the second cDNA strand (for details see Levin et al.¬†(2010)). Once double-stranded cDNA fragments are generated, sequence adapters are ligated to the ends. (Size selection can be performed here instead of at the RNA-level.)\nd.¬†PCR amplification. If the amount of starting material is low and/or to increase the number of cDNA molecules to an amount sufficient for sequencing, libraries are usually PCR amplified. Run as few amplification cycles as possible to avoid PCR artifacts.\n\n\n\nImage source: Zeng and Mortavi, 2012",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#sequencing-illumina",
    "href": "develop/04a_preprocessing.html#sequencing-illumina",
    "title": "Preprocessing steps",
    "section": "2. Sequencing (Illumina)",
    "text": "2. Sequencing (Illumina)\nSequencing of the cDNA libraries will generate reads. Reads correspond to the nucleotide sequences of the ends of each of the cDNA fragments in the library. You will have the choice of sequencing either a single end of the cDNA fragments (single-end reads) or both ends of the fragments (paired-end reads).\n\n\nSE - Single end dataset =&gt; Only Read1\nPE - Paired-end dataset =&gt; Read1 + Read2\n\nPE can be 2 separate FastQ files or just one with interleaved pairs\n\n\nGenerally, single-end sequencing is sufficient unless it is expected that the reads will match multiple locations on the genome (e.g.¬†organisms with many paralogous genes), assemblies are being performed, or for splice isoform differentiation. On the other hand, paired-end sequencing helps resolve structural genome rearrangements e.g.¬†insertions, deletions, or inversions. Furthermore, paired reads improve the alignment/assembly of reads from repetitive regions. The downside of this type of sequencing is that it may be twice as expensive.\nThe scientific community is moving towards paired-end sequencing in general. However, for many purposes, single-end reads are perfectly adequate.\n\nSequencing-by-synthesis\nIllumina sequencing technology uses a sequencing-by-synthesis approach. To explore sequencing by synthesis in more depth, please watch this linked video on Illumina‚Äôs YouTube channel.\nWe have provided a brief explanation of the steps below:\n\nCluster growth: The DNA fragments in the cDNA library are denatured and hybridized to the glass flowcell (adapter complementarity). Each fragment is then clonally amplified, forming a cluster of double-stranded DNA. This step is necessary to ensure that the sequencing signal will be strong enough to be detected/captured unambiguously for each base of each fragment. NOTE: Number of clusters ~= Number of reads\nSequencing: The sequencing of the fragment ends is based on fluorophore labelled dNTPs with reversible terminator elements. In each sequencing cycle, a base is incorporated into every cluster and excited by a laser.\nImage acquisition: Each dNTP has a distinct excitatory signal emission which is captured by cameras.\nBase calling: The Base calling program will then generate the sequence of bases, i.e.¬†reads, for each fragment/cluster by assessing the images captured during the many sequencing cycles. In addition to calling the base in every position, the base caller will also report the certainty with which it was able to make the call (quality information). NOTE: Number of sequencing cycles = Length of reads",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#quality-control-of-raw-sequencing-data",
    "href": "develop/04a_preprocessing.html#quality-control-of-raw-sequencing-data",
    "title": "Preprocessing steps",
    "section": "3. Quality control of raw sequencing data",
    "text": "3. Quality control of raw sequencing data\nThe raw reads obtained from the sequencer are stored as FASTQ files. The FASTQ file format is the de facto file format for sequence reads generated from next-generation sequencing technologies.\nEach FASTQ file is a text file which represents sequence readouts for a sample. Each read is represented by 4 lines as shown below:\n@HWI-ST330:304:H045HADXX:1:1101:1111:61397\nCACTTGTAAGGGCAGGCCCCCTTCACCCTCCCGCTCCTGGGGGANNNNNNNNNNANNNCGAGGCCCTGGGGTAGAGGGNNNNNNNNNNNNNNGATCTTGG\n+\n@?@DDDDDDHHH?GH:?FCBGGB@C?DBEGIIIIAEF;FCGGI##################################################################################################################\n\n\n\n\n\n\n\nLine\nDescription\n\n\n\n\n1\nAlways begins with ‚Äò@‚Äô and then information about the read\n\n\n2\nThe actual DNA sequence, where N means that no base was called (poor quality)\n\n\n3\nAlways begins with a ‚Äò+‚Äô and sometimes the same info as in line 1\n\n\n4\nHas a string of characters which represent the quality scores; must have same number of characters as line 2\n\n\n\n¬†\nFastQC is a commonly used software that provides a simple way to do some quality control checks on raw sequence data.\nThe main functions include:\n\nProviding a quick overview to tell you in which areas there may be problems\nSummary graphs and tables to quickly assess your data\nExport of results to an HTML based permanent report\n\n\nQuality metrics\nHere you will find a list of metrics that FASTQC will calculate on your reads:\n\nPhred Quality Scores: Preprocessed reads are evaluated based on Phred quality scores. These scores represent the estimated probability of a base call being incorrect. Higher Phred scores indicate higher base-call accuracy.\nSequence Length Distribution: QC tools assess the length distribution of the preprocessed reads. This helps in identifying any biases introduced during preprocessing, such as excessive shortening of reads.\nAdapter Contamination: Even after preprocessing, it‚Äôs crucial to confirm that all adapter sequences have been successfully removed. Any remaining adapter contamination can adversely affect downstream analyses.\nGC Content: Evaluating the GC content of preprocessed reads helps in detecting biases that might have been introduced during library preparation or sequencing.\nDuplicate Reads: Preprocessed reads should be checked for duplicates. Duplicate reads can arise due to PCR amplification biases during library preparation.\nK-mer Content: QC tools can analyze the frequency distribution of k-mers (short sequences of length k). Deviations from the expected k-mer distribution may indicate biases or contamination.\nOverall Sequence Quality: A summary of the overall quality metrics, including mean Phred scores, per-base sequence quality, and sequence duplication levels, provides a comprehensive assessment of data quality.",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#read-filtering-and-trimming",
    "href": "develop/04a_preprocessing.html#read-filtering-and-trimming",
    "title": "Preprocessing steps",
    "section": "4. Read filtering and trimming",
    "text": "4. Read filtering and trimming\nThe reads in a FASTQ file may contain errors, low-quality bases and adapter sequences. To extract reliable biological information, it‚Äôs crucial to preprocess or ‚Äúclean‚Äù this data through trimming and filtering.\nTrimming involves the removal of low-quality bases from the ends of reads. Low-quality bases can arise due to various factors, such as limitations in the sequencing technology or degradation during sample preparation. Trimming helps to improve the overall quality of the data, which is essential for downstream analysis.\nAdditionally, adapter sequences, which are short DNA sequences used in library preparation, can be mistakenly sequenced along with the target DNA. Trimming these adapters is necessary to ensure accurate alignment and subsequent analysis.\nFiltering is a broader process that involves the removal of reads that do not meet specific quality criteria. For example, reads with an excessive number of low-quality bases or those that are too short may be discarded. This step helps to retain high-confidence data for downstream analysis.\nTrimming and filtering are crucial steps in NGS data processing because they improve the accuracy and reliability of the data. Without these steps, subsequent analyses like genome assembly, variant calling, and transcript quantification can be severely affected. By reducing noise and removing artifacts, researchers can obtain a clearer and more accurate picture of the biological information encoded in the sequencing data.\nTo trim and filter reads, we can use bioinformatics tools such as like Cutadapt and Trim Galore. They offer powerful and versatile functionalities for trimming and filtering raw sequencing reads, ensuring that only high-quality data is used for subsequent analyses.\n\nCutadapt\nCutadapt is a widely-used and highly flexible tool designed specifically for removing adapter sequences from NGS reads. Adapter sequences can be introduced during library preparation and may subsequently be sequenced along with the target DNA or RNA. Cutadapt employs a sophisticated algorithm to accurately and efficiently identify and trim these adapters.\nKey features of Cutadapt include:\n\nAdapter Detection and Removal: Cutadapt can detect and remove adapters with high precision, even in cases where the adapter sequence is only partially known.\nError-Tolerant Matching: It can perform error-tolerant matching, allowing it to handle cases where adapter sequences might have minor variations or mutations.\nQuality Trimming: Cutadapt can also perform quality trimming, which involves removing low-quality bases from the ends of reads. This feature helps in improving data quality.\nBatch Processing: It can process multiple files in a single run, making it efficient for handling large-scale datasets.\nFormat Compatibility: Cutadapt supports various file formats commonly used in NGS, such as FASTQ and SAM.\n\n\n\nTrim Galore\nTrim Galore is a user-friendly wrapper script that combines the functionalities of Cutadapt with FastQC, to provide a streamlined solution for trimming and quality control of NGS data. It simplifies the preprocessing workflow by automating the process of running Cutadapt and generating quality reports through FastQC.",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#quality-control-of-clean-sequencing-data",
    "href": "develop/04a_preprocessing.html#quality-control-of-clean-sequencing-data",
    "title": "Preprocessing steps",
    "section": "5. Quality control of clean sequencing data",
    "text": "5. Quality control of clean sequencing data\nAfter preprocessing the reads, we assess again the quality and reliability of the sequencing reads. This QC step is essential to ensure that only high-quality data is used for downstream analyses. We will check that the quality metrics calculated on the raw reads have improved:\n\nImproved Quality: Preprocessed reads typically exhibit higher quality scores and improved base call accuracy compared to raw reads. This is because preprocessing steps like adapter trimming and quality filtering remove low-quality bases and artifacts.\nReduced Noise and Artifacts: Preprocessing removes noise, such as adapter sequences, low-quality bases, and sequencing errors. This leads to cleaner data, enhancing the accuracy of downstream analyses.",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#alignment",
    "href": "develop/04a_preprocessing.html#alignment",
    "title": "Preprocessing steps",
    "section": "6. Alignment",
    "text": "6. Alignment\nAfter checking that the quality of our reads is adequate, we can proceed to aligning our sequencing reads to a reference genome. By doing this, we can identify variations, quantify gene expression levels and study other genomic features. For the purposes of this workshop, we are mostly interested in the ability to quantify gene expression levels for our differential expression analysis.\nAlignment is achieved by finding the best matching position in the reference genome for each read. This is a computationally intensive task due to the vast amount of data generated by NGS experiments. Alignment tools utilize various algorithms and techniques to efficiently perform this task, which can be mostly divided in two categories: traditional aligment and pseudoaligment.\n\nTraditional alignment tools\nTraditional alignment consists in the process described above, matching your preprocessed reads to a reference genome. This process involves determining the genomic location from which each read originated. The result of the alignment will be a SAM/BAM file, which will contain information regarding the quality and the genomic position of the aligned read.\nBelow we will highlight some of the most common alignment algorithms:\n\nBowtie2\nBowtie2 is a widely-used, ultra-fast alignment tool designed for aligning short reads (typically from Illumina platforms) to a reference genome. It employs a Burrows-Wheeler transform-based algorithm, which allows it to quickly and accurately align millions of reads. Bowtie is highly efficient, making it a popular choice for large-scale NGS projects.\n\n\nSTAR\nSTAR (Spliced Transcripts Alignment to a Reference) is a specialized alignment tool tailored for RNA-Seq data. It is designed to align reads to a reference genome, taking into account the splicing events that occur in eukaryotic genomes. STAR can align both short and long RNA-Seq reads, making it a versatile tool for gene expression analysis and transcriptome mapping.\n\n\nHISAT2\nHISAT2 (Hierarchical Indexing for Spliced Alignment of Transcripts) is another prominent alignment tool widely used for aligning RNA-Seq reads to a reference genome. It employs a hierarchical indexing approach that enables efficient and accurate alignment, particularly in the presence of spliced alignments. HISAT2 is known for its speed and sensitivity, making it a popular choice for transcriptome analysis. It also offers the advantage of reduced memory usage compared to some other alignment tools, making it suitable for a wide range of computational environments. HISAT2‚Äôs ability to accurately handle splice junctions makes it a valuable tool for studying alternative splicing events and other complex features of transcriptomes.\n\n\n\nPseudoalignment\nPseudoalignment is a concept in computational biology and genomics that offers an alternative approach to traditional read alignment. Unlike traditional alignment, which involves finding the exact position of a read within a reference genome, pseudoalignment estimates the likelihood that a read originates from a specific transcript or set of transcripts without explicitly mapping it to the reference genome.\nPseudoalignment tools, like Salmon and Kallisto, achieve this by building an index of transcript sequences rather than the entire genome. They use efficient algorithms to quickly determine which transcripts are likely to be the source of a given read. This approach significantly reduces the computational resources required for quantifying gene expression, as it circumvents the need to align every read to the entire genome. By focusing on transcripts, pseudoalignment provides a faster and more memory-efficient solution, making it especially advantageous for large-scale RNA-Seq studies and in situations where rapid quantification of gene expression levels is critical, such as in time-sensitive experiments or in scenarios with limited computational resources.\nPseudoalignment is well-suited for studying gene expression in well-annotated genomes, where the transcriptome is relatively well-characterized, although not so great with other under-studied organisms. We will highlight a couple of these algorithms below.\n\nSalmon\nSalmon uses a lightweight and rapid algorithm based on the concept of selective alignment. It directly quantifies transcript abundance without explicitly aligning reads to the reference genome. This makes Salmon especially efficient for large-scale RNA-Seq studies, where speed and accuracy are crucial.\n\n\nKallisto\nSimilar to Salmon, Kallisto employs a pseudoalignment strategy. It quantifies transcript abundance by estimating the compatibility of reads with known transcripts, bypassing the need for full alignment to the genome. This approach makes Kallisto extremely fast, making it an attractive choice for rapid and accurate gene expression quantification.",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#quality-control-of-aligned-reads",
    "href": "develop/04a_preprocessing.html#quality-control-of-aligned-reads",
    "title": "Preprocessing steps",
    "section": "7. Quality control of aligned reads",
    "text": "7. Quality control of aligned reads\nAfter aligning our reads, it is essential to perform some basic quality checks on the sequencing data. However, this step is only possible if you align your reads using a traditional algorithm, since pseudoaligment tools will not create a BAM file that can be checked for quality control.\n\nQualimap\nA tool called Qualimap explores the features of aligned reads in the context of the genomic region they map to, hence providing an overall view of the data quality (as an HTML file). Various quality metrics assessed by Qualimap include:\n\nDNA or rRNA contamination\n5‚Äô-3‚Äô biases\nCoverage biases\n\n\n\ndupRadar\nThe [dupRadar[(https://bioconductor.org/packages/release/bioc/vignettes/dupRadar/inst/doc/dupRadar.html) package provides an assessment of the level of duplication of your reads, allowing you to distinguish PCR amplification artifacts from true biological signals.\nThe number of reads per base assigned to a gene in an ideal RNA-Seq data set is expected to be proportional to the abundance of its transcripts in the sample. For lowly expressed genes we expect read duplication to happen rarely by chance, while for highly expressed genes - depending on the total sequencing depth - we expect read duplication to happen often.\nA good way to learn if a dataset is following this trend is by relating the normalized number of counts per gene (RPK, as a quantification of the gene expression) and the fraction represented by duplicated reads. For example, the plots below show very well how duplicates should look in a good experiment (left) compared to another experiment with duplication issues(right)\n\n\n\ndupRadar example",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#quantify-expression",
    "href": "develop/04a_preprocessing.html#quantify-expression",
    "title": "Preprocessing steps",
    "section": "8. Quantify expression",
    "text": "8. Quantify expression\nOnce we have explored the quality of our raw reads, we can move on to quantifying expression at the transcript level. The goal of this step is to identify from which transcript each of the reads originated from and the total number of reads associated with each transcript.\nQuantification from BAM files is the traditional method of estimating gene expression levels. It involves aligning reads to a reference genome using tools like Bowtie, STAR, or HISAT2, and then counting the number of reads that map to each gene or transcript. This process relies on the generation of a BAM (Binary Alignment/Map) file, which records the alignment information for each read. Quantification tools like featureCounts or HTSeq then process the BAM file to count reads that align to each annotated gene.\nPseudoaligment tools such as Kallisto and Salmon they perform pseudoalignment and quantification in the same step by quickly mapping reads to a set of reference transcripts. This is done using an indexing strategy that efficiently assigns reads to potential transcript sources. Pseudoquantification is particularly fast and memory-efficient, making it ideal for large-scale transcriptome studies. It provides accurate estimates of transcript abundance, even in the presence of complex transcript structures.\nIn this course, we will use the expression estimates, often referred to as ‚Äòpseudocounts‚Äô, obtained from Salmon as the starting point for the differential gene expression analysis.",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/04a_preprocessing.html#aggregation-of-quality-control-checks",
    "href": "develop/04a_preprocessing.html#aggregation-of-quality-control-checks",
    "title": "Preprocessing steps",
    "section": "9. Aggregation of quality control checks",
    "text": "9. Aggregation of quality control checks\nThroughout the workflow we have performed various steps of quality checks on our data. You will need to do this for every sample in your dataset, making sure these metrics are consistent across the samples for a given experiment. Outlier samples should be flagged for further investigation and potential removal.\nManually tracking these metrics and browsing through multiple HTML reports (FastQC, Qualimap) and log files (Salmon, STAR) for each sample is tedious and prone to errors. MultiQC is a tool which aggregates results from several tools and generates a single HTML report with plots to visualize and compare various QC metrics between the samples. Assessment of the QC metrics may result in the removal of samples before proceeding to the next step, if necessary.\nOnce the QC has been performed on all the samples, we are ready to get started with Differential Gene Expression analysis with DESeq2!\n\n\nThis lesson was originally developed by members of the teaching team at the Harvard Chan Bioinformatics Core (Meeta Mistry, Radhika Khetani and Mary Piper) (HBC).",
    "crumbs": [
      "Data processing",
      "Preprocessing steps"
    ]
  },
  {
    "objectID": "develop/07a_DEA.html",
    "href": "develop/07a_DEA.html",
    "title": "Gene-level differential expression analysis with DESeq2",
    "section": "",
    "text": "Approximate time: 15 minutes",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Gene-level differential expression analysis with DESeq2"
    ]
  },
  {
    "objectID": "develop/07a_DEA.html#learning-objectives",
    "href": "develop/07a_DEA.html#learning-objectives",
    "title": "Gene-level differential expression analysis with DESeq2",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nExplain the different steps involved in running DESeq()\nExamine size factors and understand the source of differences\nInspect gene-level dispersion estimates\nRecognize the importance of dispersion during differential expression analysis",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Gene-level differential expression analysis with DESeq2"
    ]
  },
  {
    "objectID": "develop/07a_DEA.html#deseq2-differential-gene-expression-analysis-workflow",
    "href": "develop/07a_DEA.html#deseq2-differential-gene-expression-analysis-workflow",
    "title": "Gene-level differential expression analysis with DESeq2",
    "section": "DESeq2 differential gene expression analysis workflow",
    "text": "DESeq2 differential gene expression analysis workflow\nPreviously, we created the DESeq2 object using the appropriate design formula.\n\n# DO NOT RUN\n\n# Create dds object\ndds &lt;- DESeqDataSetFromTximport(txi,\n                                colData = meta %&gt;% column_to_rownames(\"sample\"), \n                                design = ~ condition)\n\n# Filter genes with 0 counts\nkeep &lt;- rowSums(counts(dds)) &gt; 0\ndds &lt;- dds[keep,]\n\nThen, to run the entire differential expression analysis workflow, we use a single call to the function DESeq().\n\n## Run analysis\ndds &lt;- DESeq(dds)\n\nAnd with that we completed the entire workflow for the differential gene expression analysis with DESeq2! The DESeq() function performs a default analysis through the following steps:\n\nEstimation of size factors: estimateSizeFactors()\nEstimation of dispersion: estimateDispersions()\nNegative Binomial GLM fitting and Wald statistics: nbinomWaldTest()\n\n\nStep 1: Estimate size factors\nThe first step in the differential expression analysis is to estimate the size factors, which is exactly what we already did to normalize the raw counts.\nLet‚Äôs take a quick look at size factor values we have for each sample:\n\n## Check the size factors\nsizeFactors(dds)\n\n  control_3   control_2   control_1 vampirium_3 vampirium_2 vampirium_1 \n  0.7501070   0.9580056   1.1134126   0.6565921   1.1418067   1.2184977 \n garlicum_3  garlicum_2 \n  0.9327493   1.5527069 \n\n\nThese numbers should be identical to those we generated initially when we had run the function estimateSizeFactors(dds). Take a look at the total number of reads for each sample:\n\n## Total number of raw counts per sample\ncolSums(counts(dds))\n\n  control_3   control_2   control_1 vampirium_3 vampirium_2 vampirium_1 \n   20257917    26156069    30817090    17054657    29573402    31589516 \n garlicum_3  garlicum_2 \n   26428310    44740987 \n\n\nHow do the numbers correlate with the size factor?\nWe see that the larger size factors correspond to the samples with higher sequencing depth, which makes sense, because to generate our normalized counts we need to divide the counts by the size factors. This accounts for the differences in sequencing depth between samples.\nNow take a look at the total depth after normalization using:\n\n## Total number of normalized counts per sample\ncolSums(counts(dds, normalized=T))\n\n  control_3   control_2   control_1 vampirium_3 vampirium_2 vampirium_1 \n   27006701    27302628    27678052    25974507    25900533    25924969 \n garlicum_3  garlicum_2 \n   28333777    28814831 \n\n\nHow do the values across samples compare with the total counts taken for each sample?\nYou might have expected the counts to be the exact same across the samples after normalization. However, DESeq2 also accounts for RNA composition during the normalization procedure. By using the median ratio value for the size factor, DESeq2 should not be biased to a large number of counts sucked up by a few DE genes; however, this may lead to the size factors being quite different than what would be anticipated just based on sequencing depth.\n\n\nStep 2: Estimate gene-wise dispersion\nLet‚Äôs take a look at the dispersion estimates for our Vampirium data. First, we will use the function estimateDispersions().\n\ndds &lt;- estimateDispersions(dds)\n\nWe can check the values using the dispersion() function and plotting it with the plotDispEsts() function:\n\nhead(dispersions(dds))\n\n[1] 0.102415719 0.005312987 0.005241663 9.982833068 0.954109932 0.002146811\n\n## Plot dispersion estimates\nplotDispEsts(dds)\n\n\n\n\n\n\n\n\nWe can see that our estimated dispersions look quite good!\n\nExercise 1\nGiven the dispersion plot below, would you have any concerns regarding the fit of your data to the model?\n\nIf not, what aspects of the plot makes you feel confident about your data?\nIf so, what are your concerns? What would you do to address them?",
    "crumbs": [
      "Data analyses",
      "Differential Expression",
      "Gene-level differential expression analysis with DESeq2"
    ]
  }
]